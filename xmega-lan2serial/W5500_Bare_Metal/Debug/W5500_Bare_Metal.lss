
W5500_Bare_Metal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00802000  00001fbe  00002052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b3  0080204c  0080204c  0000209e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000209e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000438  00000000  00000000  000020d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a22f  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ccc  00000000  00000000  0000c737  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000631f  00000000  00000000  0000e403  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e44  00000000  00000000  00014724  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002acfd  00000000  00000000  00015568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000504e  00000000  00000000  00040265  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  000452b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b2a3  00000000  00000000  00045653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
       6:	00 00       	nop
       8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
       a:	00 00       	nop
       c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
      1e:	00 00       	nop
      20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
      22:	00 00       	nop
      24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>
      26:	00 00       	nop
      28:	6d c0       	rjmp	.+218    	; 0x104 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6b c0       	rjmp	.+214    	; 0x104 <__bad_interrupt>
      2e:	00 00       	nop
      30:	69 c0       	rjmp	.+210    	; 0x104 <__bad_interrupt>
      32:	00 00       	nop
      34:	67 c0       	rjmp	.+206    	; 0x104 <__bad_interrupt>
      36:	00 00       	nop
      38:	65 c0       	rjmp	.+202    	; 0x104 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	63 c0       	rjmp	.+198    	; 0x104 <__bad_interrupt>
      3e:	00 00       	nop
      40:	61 c0       	rjmp	.+194    	; 0x104 <__bad_interrupt>
      42:	00 00       	nop
      44:	5f c0       	rjmp	.+190    	; 0x104 <__bad_interrupt>
      46:	00 00       	nop
      48:	5d c0       	rjmp	.+186    	; 0x104 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5b c0       	rjmp	.+182    	; 0x104 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c0       	rjmp	.+178    	; 0x104 <__bad_interrupt>
      52:	00 00       	nop
      54:	57 c0       	rjmp	.+174    	; 0x104 <__bad_interrupt>
      56:	00 00       	nop
      58:	55 c0       	rjmp	.+170    	; 0x104 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	53 c0       	rjmp	.+166    	; 0x104 <__bad_interrupt>
      5e:	00 00       	nop
      60:	51 c0       	rjmp	.+162    	; 0x104 <__bad_interrupt>
      62:	00 00       	nop
      64:	4f c0       	rjmp	.+158    	; 0x104 <__bad_interrupt>
      66:	00 00       	nop
      68:	4d c0       	rjmp	.+154    	; 0x104 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4b c0       	rjmp	.+150    	; 0x104 <__bad_interrupt>
      6e:	00 00       	nop
      70:	49 c0       	rjmp	.+146    	; 0x104 <__bad_interrupt>
      72:	00 00       	nop
      74:	47 c0       	rjmp	.+142    	; 0x104 <__bad_interrupt>
      76:	00 00       	nop
      78:	45 c0       	rjmp	.+138    	; 0x104 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	43 c0       	rjmp	.+134    	; 0x104 <__bad_interrupt>
      7e:	00 00       	nop
      80:	41 c0       	rjmp	.+130    	; 0x104 <__bad_interrupt>
      82:	00 00       	nop
      84:	3f c0       	rjmp	.+126    	; 0x104 <__bad_interrupt>
      86:	00 00       	nop
      88:	3d c0       	rjmp	.+122    	; 0x104 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3b c0       	rjmp	.+118    	; 0x104 <__bad_interrupt>
      8e:	00 00       	nop
      90:	39 c0       	rjmp	.+114    	; 0x104 <__bad_interrupt>
      92:	00 00       	nop
      94:	37 c0       	rjmp	.+110    	; 0x104 <__bad_interrupt>
      96:	00 00       	nop
      98:	35 c0       	rjmp	.+106    	; 0x104 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	33 c0       	rjmp	.+102    	; 0x104 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4d c0       	rjmp	.+154    	; 0x13c <__vector_40>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__vector_41>
      a6:	00 00       	nop
      a8:	2d c0       	rjmp	.+90     	; 0x104 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1d 0e       	add	r1, r29
      ae:	1f 0e       	add	r1, r31
      b0:	2f 0e       	add	r2, r31
      b2:	2b 0e       	add	r2, r27
      b4:	31 0e       	add	r3, r17
      b6:	35 0e       	add	r3, r21
      b8:	39 0e       	add	r3, r25
      ba:	46 0e       	add	r4, r22
      bc:	5a 0e       	add	r5, r26
      be:	6b 0e       	add	r6, r27
      c0:	6d 0e       	add	r6, r29
      c2:	70 0e       	add	r7, r16
      c4:	80 0e       	add	r8, r16
      c6:	73 0e       	add	r7, r19
      c8:	78 0e       	add	r7, r24
      ca:	7d 0e       	add	r7, r29

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	cd bf       	out	0x3d, r28	; 61
      d4:	d3 e2       	ldi	r29, 0x23	; 35
      d6:	de bf       	out	0x3e, r29	; 62

000000d8 <__do_copy_data>:
      d8:	10 e2       	ldi	r17, 0x20	; 32
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e2       	ldi	r27, 0x20	; 32
      de:	ee eb       	ldi	r30, 0xBE	; 190
      e0:	ff e1       	ldi	r31, 0x1F	; 31
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	ac 34       	cpi	r26, 0x4C	; 76
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
      ee:	21 e2       	ldi	r18, 0x21	; 33
      f0:	ac e4       	ldi	r26, 0x4C	; 76
      f2:	b0 e2       	ldi	r27, 0x20	; 32
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	af 3f       	cpi	r26, 0xFF	; 255
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	f6 d3       	rcall	.+2028   	; 0x8ec <main>
     100:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <_exit>

00000104 <__bad_interrupt>:
     104:	e9 c3       	rjmp	.+2002   	; 0x8d8 <__vector_default>

00000106 <fifo_push_uint8>:
 *  \return Status
 *    \retval FIFO_OK when no error occurred.
 *    \retval FIFO_ERROR_UNDERFLOW when the FIFO was empty.
 */
static inline int fifo_push_uint8(fifo_desc_t *fifo_desc, uint32_t item)
{
     106:	fc 01       	movw	r30, r24
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
     108:	83 81       	ldd	r24, Z+3	; 0x03
     10a:	22 81       	ldd	r18, Z+2	; 0x02
     10c:	95 81       	ldd	r25, Z+5	; 0x05
     10e:	82 1b       	sub	r24, r18
     110:	89 23       	and	r24, r25
 */
static inline int fifo_push_uint8(fifo_desc_t *fifo_desc, uint32_t item)
{
	uint8_t write_index;

	if (fifo_is_full(fifo_desc)) {
     112:	24 81       	ldd	r18, Z+4	; 0x04
     114:	82 17       	cp	r24, r18
     116:	79 f0       	breq	.+30     	; 0x136 <fifo_push_uint8+0x30>
		return FIFO_ERROR_OVERFLOW;
	}

	write_index = fifo_desc->write_index;
     118:	83 81       	ldd	r24, Z+3	; 0x03
	fifo_desc->buffer.u8ptr[write_index & (fifo_desc->mask >> 1)] = item;
     11a:	96 95       	lsr	r25
     11c:	98 23       	and	r25, r24
     11e:	a0 81       	ld	r26, Z
     120:	b1 81       	ldd	r27, Z+1	; 0x01
     122:	a9 0f       	add	r26, r25
     124:	b1 1d       	adc	r27, r1
     126:	4c 93       	st	X, r20
	write_index = (write_index + 1) & fifo_desc->mask;
     128:	8f 5f       	subi	r24, 0xFF	; 255
     12a:	95 81       	ldd	r25, Z+5	; 0x05
     12c:	89 23       	and	r24, r25

	// Must be the last thing to do.
	barrier();
	fifo_desc->write_index = write_index;
     12e:	83 83       	std	Z+3, r24	; 0x03
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	08 95       	ret
static inline int fifo_push_uint8(fifo_desc_t *fifo_desc, uint32_t item)
{
	uint8_t write_index;

	if (fifo_is_full(fifo_desc)) {
		return FIFO_ERROR_OVERFLOW;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
	// Must be the last thing to do.
	barrier();
	fifo_desc->write_index = write_index;

	return FIFO_OK;
}
     13a:	08 95       	ret

0000013c <__vector_40>:

void usart_setup(uint32_t config, bool Stopbit);


ISR(USARTD0_RXC_vect)
{
     13c:	1f 92       	push	r1
     13e:	0f 92       	push	r0
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	0f 92       	push	r0
     144:	11 24       	eor	r1, r1
     146:	2f 93       	push	r18
     148:	3f 93       	push	r19
     14a:	4f 93       	push	r20
     14c:	5f 93       	push	r21
     14e:	6f 93       	push	r22
     150:	7f 93       	push	r23
     152:	8f 93       	push	r24
     154:	9f 93       	push	r25
     156:	af 93       	push	r26
     158:	bf 93       	push	r27
     15a:	ef 93       	push	r30
     15c:	ff 93       	push	r31
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	1f 92       	push	r1
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
	//Get the char out of the Buffer
	//And Put it to the FiFo
	volatile uint8_t recived = usart_getchar(&USARTD0);
     168:	80 ec       	ldi	r24, 0xC0	; 192
     16a:	99 e0       	ldi	r25, 0x09	; 9
     16c:	84 d2       	rcall	.+1288   	; 0x676 <usart_getchar>
     16e:	89 83       	std	Y+1, r24	; 0x01
	fifo_push_uint8(&fifo_desc,recived);
     170:	49 81       	ldd	r20, Y+1	; 0x01
     172:	50 e0       	ldi	r21, 0x00	; 0
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	8d ee       	ldi	r24, 0xED	; 237
     17a:	90 e2       	ldi	r25, 0x20	; 32
     17c:	c4 df       	rcall	.-120    	; 0x106 <fifo_push_uint8>
}
     17e:	0f 90       	pop	r0
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	ff 91       	pop	r31
     186:	ef 91       	pop	r30
     188:	bf 91       	pop	r27
     18a:	af 91       	pop	r26
     18c:	9f 91       	pop	r25
     18e:	8f 91       	pop	r24
     190:	7f 91       	pop	r23
     192:	6f 91       	pop	r22
     194:	5f 91       	pop	r21
     196:	4f 91       	pop	r20
     198:	3f 91       	pop	r19
     19a:	2f 91       	pop	r18
     19c:	0f 90       	pop	r0
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	0f 90       	pop	r0
     1a2:	1f 90       	pop	r1
     1a4:	18 95       	reti

000001a6 <__vector_41>:

ISR(USARTD0_DRE_vect)
{
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	0f 92       	push	r0
     1ae:	11 24       	eor	r1, r1
     1b0:	2f 93       	push	r18
     1b2:	3f 93       	push	r19
     1b4:	4f 93       	push	r20
     1b6:	5f 93       	push	r21
     1b8:	6f 93       	push	r22
     1ba:	7f 93       	push	r23
     1bc:	8f 93       	push	r24
     1be:	9f 93       	push	r25
     1c0:	af 93       	push	r26
     1c2:	bf 93       	push	r27
     1c4:	ef 93       	push	r30
     1c6:	ff 93       	push	r31
 *    \retval true when the FIFO is empty.
 *    \retval false when the FIFO is not empty.
 */
static inline bool fifo_is_empty(fifo_desc_t *fifo_desc)
{
	return (fifo_desc->write_index == fifo_desc->read_index);
     1c8:	90 91 f6 21 	lds	r25, 0x21F6
     1cc:	80 91 f5 21 	lds	r24, 0x21F5
 */
static inline int fifo_pull_uint8(fifo_desc_t *fifo_desc, uint8_t *item)
{
	uint8_t read_index;

	if (fifo_is_empty(fifo_desc)) {
     1d0:	98 17       	cp	r25, r24
     1d2:	b1 f0       	breq	.+44     	; 0x200 <__vector_41+0x5a>
		return FIFO_ERROR_UNDERFLOW;
	}

	read_index = fifo_desc->read_index;
     1d4:	80 91 f5 21 	lds	r24, 0x21F5
	*item = fifo_desc->buffer.u8ptr[read_index & (fifo_desc->mask >> 1)];
     1d8:	20 91 f8 21 	lds	r18, 0x21F8
     1dc:	92 2f       	mov	r25, r18
     1de:	96 95       	lsr	r25
     1e0:	98 23       	and	r25, r24
     1e2:	e0 91 f3 21 	lds	r30, 0x21F3
     1e6:	f0 91 f4 21 	lds	r31, 0x21F4
     1ea:	e9 0f       	add	r30, r25
     1ec:	f1 1d       	adc	r31, r1
     1ee:	60 81       	ld	r22, Z
	read_index = (read_index + 1) & fifo_desc->mask;
     1f0:	8f 5f       	subi	r24, 0xFF	; 255
     1f2:	82 23       	and	r24, r18

	// Must be the last thing to do.
	barrier();
	fifo_desc->read_index = read_index;
     1f4:	80 93 f5 21 	sts	0x21F5, r24
	//The DATAREGISTER is empty, what to do?
	uint8_t Data=0;
	if(fifo_pull_uint8(&fifo_desc_usart_tx,&Data)==FIFO_OK)
	{
		usart_putchar(&USARTD0,Data);
     1f8:	80 ec       	ldi	r24, 0xC0	; 192
     1fa:	99 e0       	ldi	r25, 0x09	; 9
     1fc:	34 d2       	rcall	.+1128   	; 0x666 <usart_putchar>
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <__vector_41+0x64>
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     200:	80 91 c2 09 	lds	r24, 0x09C2
     204:	8c 7f       	andi	r24, 0xFC	; 252
     206:	80 93 c2 09 	sts	0x09C2, r24
	{
		//Fifo Empty or broken
		usart_set_dre_interrupt_level(&USARTD0,USART_INT_LVL_OFF);
	}
	
}
     20a:	ff 91       	pop	r31
     20c:	ef 91       	pop	r30
     20e:	bf 91       	pop	r27
     210:	af 91       	pop	r26
     212:	9f 91       	pop	r25
     214:	8f 91       	pop	r24
     216:	7f 91       	pop	r23
     218:	6f 91       	pop	r22
     21a:	5f 91       	pop	r21
     21c:	4f 91       	pop	r20
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <usart_setup>:


void usart_setup(uint32_t Baudrate, bool Stopbit)
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	27 97       	sbiw	r28, 0x07	; 7
     236:	cd bf       	out	0x3d, r28	; 61
     238:	de bf       	out	0x3e, r29	; 62
	//Not nice but just a sample
	//115200Baud 8Bit No Parity Two Stopbit
	usart_rs232_options_t USART_SERIAL_OPTIONS = {
     23a:	23 e0       	ldi	r18, 0x03	; 3
     23c:	2d 83       	std	Y+5, r18	; 0x05
     23e:	1e 82       	std	Y+6, r1	; 0x06
		.baudrate = 0 ,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = false
	};
	USART_SERIAL_OPTIONS.baudrate=Baudrate;
     240:	69 83       	std	Y+1, r22	; 0x01
     242:	7a 83       	std	Y+2, r23	; 0x02
     244:	8b 83       	std	Y+3, r24	; 0x03
     246:	9c 83       	std	Y+4, r25	; 0x04
	USART_SERIAL_OPTIONS.stopbits=Stopbit;
     248:	4f 83       	std	Y+7, r20	; 0x07
	
	
	//Setup Clock
	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm);
     24a:	60 e1       	ldi	r22, 0x10	; 16
     24c:	84 e0       	ldi	r24, 0x04	; 4
     24e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <sysclk_enable_module>
	//Setup USARTD0 as RS232
	usart_init_rs232(USART_SERIAL, &USART_SERIAL_OPTIONS);
     252:	be 01       	movw	r22, r28
     254:	6f 5f       	subi	r22, 0xFF	; 255
     256:	7f 4f       	sbci	r23, 0xFF	; 255
     258:	80 ec       	ldi	r24, 0xC0	; 192
     25a:	99 e0       	ldi	r25, 0x09	; 9
     25c:	ee d2       	rcall	.+1500   	; 0x83a <usart_init_rs232>
	
	//Remap Pins to the correct place
	PORTD.REMAP|=(0x10);
     25e:	e0 e6       	ldi	r30, 0x60	; 96
     260:	f6 e0       	ldi	r31, 0x06	; 6
     262:	86 85       	ldd	r24, Z+14	; 0x0e
     264:	80 61       	ori	r24, 0x10	; 16
     266:	86 87       	std	Z+14, r24	; 0x0e
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     26c:	80 e4       	ldi	r24, 0x40	; 64
     26e:	82 83       	std	Z+2, r24	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
     270:	e0 ea       	ldi	r30, 0xA0	; 160
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	87 e0       	ldi	r24, 0x07	; 7
     276:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
     278:	82 81       	ldd	r24, Z+2	; 0x02
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	82 83       	std	Z+2, r24	; 0x02
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
     27e:	a0 ec       	ldi	r26, 0xC0	; 192
     280:	b9 e0       	ldi	r27, 0x09	; 9
     282:	12 96       	adiw	r26, 0x02	; 2
     284:	8c 91       	ld	r24, X
     286:	12 97       	sbiw	r26, 0x02	; 2
     288:	80 63       	ori	r24, 0x30	; 48
     28a:	12 96       	adiw	r26, 0x02	; 2
     28c:	8c 93       	st	X, r24
     28e:	12 97       	sbiw	r26, 0x02	; 2
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
     290:	82 81       	ldd	r24, Z+2	; 0x02
     292:	84 60       	ori	r24, 0x04	; 4
     294:	82 83       	std	Z+2, r24	; 0x02
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     296:	12 96       	adiw	r26, 0x02	; 2
     298:	8c 91       	ld	r24, X
     29a:	12 97       	sbiw	r26, 0x02	; 2
     29c:	8c 7f       	andi	r24, 0xFC	; 252
     29e:	12 96       	adiw	r26, 0x02	; 2
     2a0:	8c 93       	st	X, r24
     2a2:	82 81       	ldd	r24, Z+2	; 0x02
     2a4:	84 60       	ori	r24, 0x04	; 4
     2a6:	82 83       	std	Z+2, r24	; 0x02
	usart_set_dre_interrupt_level(&USARTD0,USART_INT_LVL_OFF);
	//Enable HIGH LEVEL ISR
	pmic_enable_level(PMIC_LVL_HIGH);
	
	//Enable Global ISR
	cpu_irq_enable();
     2a8:	78 94       	sei
}
     2aa:	27 96       	adiw	r28, 0x07	; 7
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <tcp_2_usart>:
}
	


int32_t tcp_2_usart(uint8_t sn, uint8_t* buf, uint16_t port) //Copy DATA from W5500 to USART
{
     2b6:	8f 92       	push	r8
     2b8:	9f 92       	push	r9
     2ba:	af 92       	push	r10
     2bc:	bf 92       	push	r11
     2be:	cf 92       	push	r12
     2c0:	df 92       	push	r13
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <tcp_2_usart+0x1a>
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	18 2f       	mov	r17, r24
	int32_t ret;						//Variabl requiered to Check if Function retuned an error or somthing eles
	uint16_t size = 0;					//size and sentsize are for calculating the requierd buffer for datarecive
	switch(getSn_SR(sn))				//Okay sn is our Socket for the W5500 it can be between zero and seven (eight sockets)
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	18 9f       	mul	r17, r24
     2da:	70 01       	movw	r14, r0
     2dc:	11 24       	eor	r1, r1
     2de:	9f ef       	ldi	r25, 0xFF	; 255
     2e0:	e9 1a       	sub	r14, r25
     2e2:	f9 0a       	sbc	r15, r25
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	ee 0c       	add	r14, r14
     2e8:	ff 1c       	adc	r15, r15
     2ea:	8a 95       	dec	r24
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <tcp_2_usart+0x30>
     2ee:	b7 01       	movw	r22, r14
     2f0:	7d 5f       	subi	r23, 0xFD	; 253
     2f2:	88 27       	eor	r24, r24
     2f4:	77 fd       	sbrc	r23, 7
     2f6:	80 95       	com	r24
     2f8:	98 2f       	mov	r25, r24
     2fa:	49 83       	std	Y+1, r20	; 0x01
     2fc:	5a 83       	std	Y+2, r21	; 0x02
     2fe:	d1 d7       	rcall	.+4002   	; 0x12a2 <WIZCHIP_READ>
     300:	49 81       	ldd	r20, Y+1	; 0x01
     302:	5a 81       	ldd	r21, Y+2	; 0x02
     304:	83 31       	cpi	r24, 0x13	; 19
     306:	09 f4       	brne	.+2      	; 0x30a <tcp_2_usart+0x54>
     308:	80 c0       	rjmp	.+256    	; 0x40a <tcp_2_usart+0x154>
     30a:	20 f4       	brcc	.+8      	; 0x314 <tcp_2_usart+0x5e>
     30c:	88 23       	and	r24, r24
     30e:	09 f4       	brne	.+2      	; 0x312 <tcp_2_usart+0x5c>
     310:	85 c0       	rjmp	.+266    	; 0x41c <tcp_2_usart+0x166>
     312:	96 c0       	rjmp	.+300    	; 0x440 <tcp_2_usart+0x18a>
     314:	87 31       	cpi	r24, 0x17	; 23
     316:	61 f0       	breq	.+24     	; 0x330 <tcp_2_usart+0x7a>
     318:	8c 31       	cpi	r24, 0x1C	; 28
     31a:	09 f0       	breq	.+2      	; 0x31e <tcp_2_usart+0x68>
     31c:	91 c0       	rjmp	.+290    	; 0x440 <tcp_2_usart+0x18a>
			
		}
		break; //Okay with this state we are done and leave the switch statement
		case SOCK_CLOSE_WAIT : //okay we need to close the socket
		
		if((ret=disconnect(sn)) != SOCK_OK) return ret; //Close Socket
     31e:	81 2f       	mov	r24, r17
     320:	73 d5       	rcall	.+2790   	; 0xe08 <disconnect>
     322:	68 2f       	mov	r22, r24
     324:	77 27       	eor	r23, r23
     326:	67 fd       	sbrc	r22, 7
     328:	70 95       	com	r23
     32a:	87 2f       	mov	r24, r23
     32c:	97 2f       	mov	r25, r23
     32e:	8f c0       	rjmp	.+286    	; 0x44e <tcp_2_usart+0x198>
	uint16_t size = 0;					//size and sentsize are for calculating the requierd buffer for datarecive
	switch(getSn_SR(sn))				//Okay sn is our Socket for the W5500 it can be between zero and seven (eight sockets)
	//Lets see in witch State we are
	{
		case SOCK_ESTABLISHED :		//Someone has Opened a Connection to us
		if(getSn_IR(sn) & Sn_IR_CON) //Okay this is the first time we realize the connection
     330:	67 01       	movw	r12, r14
     332:	ee ef       	ldi	r30, 0xFE	; 254
     334:	de 1a       	sub	r13, r30
     336:	ee 24       	eor	r14, r14
     338:	d7 fc       	sbrc	r13, 7
     33a:	e0 94       	com	r14
     33c:	fe 2c       	mov	r15, r14
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	af d7       	rcall	.+3934   	; 0x12a2 <WIZCHIP_READ>
     344:	80 ff       	sbrs	r24, 0
     346:	08 c0       	rjmp	.+16     	; 0x358 <tcp_2_usart+0xa2>
 *  \param fifo_desc  The FIFO descriptor.
 */
static inline void fifo_flush(fifo_desc_t *fifo_desc)
{
	// Fifo starts empty.
	fifo_desc->read_index = fifo_desc->write_index = 0;
     348:	10 92 f0 20 	sts	0x20F0, r1
     34c:	10 92 ef 20 	sts	0x20EF, r1
		{
			//If this was a Telnet-Console we would send a Welcome to the System :-)
			//In this case we flus the FIFO....
			fifo_flush(&fifo_desc);
			setSn_IR(sn,Sn_IR_CON);
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	c7 01       	movw	r24, r14
     354:	b6 01       	movw	r22, r12
     356:	e6 d7       	rcall	.+4044   	; 0x1324 <WIZCHIP_WRITE>
		}
		if((size = getSn_RX_RSR(sn)) > 0) //And lets see if there is some Data wathing for us
     358:	81 2f       	mov	r24, r17
     35a:	0e 94 cd 0a 	call	0x159a	; 0x159a <getSn_RX_RSR>
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	09 f4       	brne	.+2      	; 0x364 <tcp_2_usart+0xae>
     362:	6e c0       	rjmp	.+220    	; 0x440 <tcp_2_usart+0x18a>
     364:	ac 01       	movw	r20, r24
     366:	81 38       	cpi	r24, 0x81	; 129
     368:	91 05       	cpc	r25, r1
     36a:	10 f0       	brcs	.+4      	; 0x370 <tcp_2_usart+0xba>
     36c:	40 e8       	ldi	r20, 0x80	; 128
     36e:	50 e0       	ldi	r21, 0x00	; 0
 *
 *  \return The number of free elements.
 */
static inline uint8_t fifo_get_free_size(fifo_desc_t *fifo_desc)
{
	return fifo_desc->size - fifo_get_used_size(fifo_desc);
     370:	20 91 f7 21 	lds	r18, 0x21F7
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
     374:	80 91 f6 21 	lds	r24, 0x21F6
     378:	90 91 f5 21 	lds	r25, 0x21F5
     37c:	30 91 f8 21 	lds	r19, 0x21F8
     380:	89 1b       	sub	r24, r25
     382:	83 23       	and	r24, r19
 *
 *  \return The number of free elements.
 */
static inline uint8_t fifo_get_free_size(fifo_desc_t *fifo_desc)
{
	return fifo_desc->size - fifo_get_used_size(fifo_desc);
     384:	f2 2f       	mov	r31, r18
     386:	f8 1b       	sub	r31, r24
     388:	8f 2f       	mov	r24, r31
		{
			//If more than zero bytes are waiting we want to get the Data out of the Buffer and process it
			if(size > BUF_SIZE_T2U) size = BUF_SIZE_T2U; //If there is more data waiting than our Buffer can handle we will set the size to our DATA_BUF_SIZE
			//OKay after that adjust we need to see what we can put in the fifo....
			if(fifo_get_free_size(&fifo_desc_usart_tx)<size) size=fifo_get_free_size(&fifo_desc_usart_tx);
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	84 17       	cp	r24, r20
     38e:	95 07       	cpc	r25, r21
     390:	68 f4       	brcc	.+26     	; 0x3ac <tcp_2_usart+0xf6>
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
     392:	80 91 f6 21 	lds	r24, 0x21F6
     396:	90 91 f5 21 	lds	r25, 0x21F5
     39a:	89 1b       	sub	r24, r25
     39c:	83 23       	and	r24, r19
 *
 *  \return The number of free elements.
 */
static inline uint8_t fifo_get_free_size(fifo_desc_t *fifo_desc)
{
	return fifo_desc->size - fifo_get_used_size(fifo_desc);
     39e:	28 1b       	sub	r18, r24
     3a0:	42 2f       	mov	r20, r18
     3a2:	50 e0       	ldi	r21, 0x00	; 0
			if(size>0)
     3a4:	41 15       	cp	r20, r1
     3a6:	51 05       	cpc	r21, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <tcp_2_usart+0xf6>
     3aa:	4a c0       	rjmp	.+148    	; 0x440 <tcp_2_usart+0x18a>
			{
				ret = recv(sn,Buffer,size);	//This will start to Transfer Data from the W5500 Buffer to our MCU
     3ac:	6c e4       	ldi	r22, 0x4C	; 76
     3ae:	70 e2       	ldi	r23, 0x20	; 32
     3b0:	81 2f       	mov	r24, r17
     3b2:	95 d6       	rcall	.+3370   	; 0x10de <recv>
     3b4:	6b 01       	movw	r12, r22
     3b6:	7c 01       	movw	r14, r24
				if(ret <= 0) return ret;	//If the Result is less than 1 we got a problem and just return
     3b8:	16 16       	cp	r1, r22
     3ba:	17 06       	cpc	r1, r23
     3bc:	18 06       	cpc	r1, r24
     3be:	19 06       	cpc	r1, r25
     3c0:	0c f0       	brlt	.+2      	; 0x3c4 <tcp_2_usart+0x10e>
     3c2:	45 c0       	rjmp	.+138    	; 0x44e <tcp_2_usart+0x198>
     3c4:	0c e4       	ldi	r16, 0x4C	; 76
     3c6:	10 e2       	ldi	r17, 0x20	; 32
     3c8:	81 2c       	mov	r8, r1
     3ca:	91 2c       	mov	r9, r1
     3cc:	54 01       	movw	r10, r8
				//Okay
				for(uint16_t i=0;i<ret;i++) //Put the Data to USART
				{
					fifo_push_uint8(&fifo_desc_usart_tx,Buffer[i]);
     3ce:	f8 01       	movw	r30, r16
     3d0:	41 91       	ld	r20, Z+
     3d2:	8f 01       	movw	r16, r30
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	83 ef       	ldi	r24, 0xF3	; 243
     3dc:	91 e2       	ldi	r25, 0x21	; 33
     3de:	93 de       	rcall	.-730    	; 0x106 <fifo_push_uint8>
     3e0:	ff ef       	ldi	r31, 0xFF	; 255
     3e2:	8f 1a       	sub	r8, r31
     3e4:	9f 0a       	sbc	r9, r31
     3e6:	af 0a       	sbc	r10, r31
     3e8:	bf 0a       	sbc	r11, r31
			if(size>0)
			{
				ret = recv(sn,Buffer,size);	//This will start to Transfer Data from the W5500 Buffer to our MCU
				if(ret <= 0) return ret;	//If the Result is less than 1 we got a problem and just return
				//Okay
				for(uint16_t i=0;i<ret;i++) //Put the Data to USART
     3ea:	8c 14       	cp	r8, r12
     3ec:	9d 04       	cpc	r9, r13
     3ee:	ae 04       	cpc	r10, r14
     3f0:	bf 04       	cpc	r11, r15
     3f2:	69 f7       	brne	.-38     	; 0x3ce <tcp_2_usart+0x118>
     3f4:	80 91 c2 09 	lds	r24, 0x09C2
     3f8:	8c 7f       	andi	r24, 0xFC	; 252
     3fa:	82 60       	ori	r24, 0x02	; 2
     3fc:	80 93 c2 09 	sts	0x09C2, r24
		//Okay the Socket is back to
		break;
		default:
		break;
	}
	return 1;
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	22 c0       	rjmp	.+68     	; 0x44e <tcp_2_usart+0x198>
		if((ret=disconnect(sn)) != SOCK_OK) return ret; //Close Socket
		
		break;
		case SOCK_INIT :
		//Start to Listen for a Socket Connection
		if( (ret = listen(sn)) != SOCK_OK) return ret;
     40a:	81 2f       	mov	r24, r17
     40c:	a2 d4       	rcall	.+2372   	; 0xd52 <listen>
     40e:	68 2f       	mov	r22, r24
     410:	77 27       	eor	r23, r23
     412:	67 fd       	sbrc	r22, 7
     414:	70 95       	com	r23
     416:	87 2f       	mov	r24, r23
     418:	97 2f       	mov	r25, r23
     41a:	19 c0       	rjmp	.+50     	; 0x44e <tcp_2_usart+0x198>
		break;
		case SOCK_CLOSED:
		//Okay the Socket is closed
		if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	81 2f       	mov	r24, r17
     422:	c1 d3       	rcall	.+1922   	; 0xba6 <socket>
     424:	99 27       	eor	r25, r25
     426:	87 fd       	sbrc	r24, 7
     428:	90 95       	com	r25
     42a:	a9 2f       	mov	r26, r25
     42c:	b9 2f       	mov	r27, r25
     42e:	c1 2e       	mov	r12, r17
     430:	d1 2c       	mov	r13, r1
     432:	e1 2c       	mov	r14, r1
     434:	f1 2c       	mov	r15, r1
     436:	8c 15       	cp	r24, r12
     438:	9d 05       	cpc	r25, r13
     43a:	ae 05       	cpc	r26, r14
     43c:	bf 05       	cpc	r27, r15
     43e:	29 f4       	brne	.+10     	; 0x44a <tcp_2_usart+0x194>
		//Okay the Socket is back to
		break;
		default:
		break;
	}
	return 1;
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	02 c0       	rjmp	.+4      	; 0x44e <tcp_2_usart+0x198>
     44a:	bc 01       	movw	r22, r24
     44c:	cd 01       	movw	r24, r26
}
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	df 90       	pop	r13
     460:	cf 90       	pop	r12
     462:	bf 90       	pop	r11
     464:	af 90       	pop	r10
     466:	9f 90       	pop	r9
     468:	8f 90       	pop	r8
     46a:	08 95       	ret

0000046c <usart_2_tcp>:

uint32_t usart_2_tcp(uint8_t sn) //We only need the Socket here
{
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	c0 58       	subi	r28, 0x80	; 128
     480:	d1 09       	sbc	r29, r1
     482:	cd bf       	out	0x3d, r28	; 61
     484:	de bf       	out	0x3e, r29	; 62
     486:	18 2f       	mov	r17, r24
	#define FIFO_BUFFER_SIZE 128
	int32_t ret;						//Variable required to Check if Function returned an error or something else
	uint16_t sendsize=0;				//sendsize and sendsize are for calculating the required buffer for data to transmitt
	uint8_t TX_Buffer[FIFO_BUFFER_SIZE];//Max FIFO_BUFFER_SIZE Bytes for TX
	uint8_t status=FIFO_ERROR;
	switch(getSn_SR(sn))				//Okay sn is our Socket for the W5500 it can be between zero and seven (eight sockets)
     488:	80 e2       	ldi	r24, 0x20	; 32
     48a:	18 9f       	mul	r17, r24
     48c:	b0 01       	movw	r22, r0
     48e:	11 24       	eor	r1, r1
     490:	68 5f       	subi	r22, 0xF8	; 248
     492:	7c 4f       	sbci	r23, 0xFC	; 252
     494:	88 27       	eor	r24, r24
     496:	77 fd       	sbrc	r23, 7
     498:	80 95       	com	r24
     49a:	98 2f       	mov	r25, r24
     49c:	02 d7       	rcall	.+3588   	; 0x12a2 <WIZCHIP_READ>
     49e:	87 31       	cpi	r24, 0x17	; 23
     4a0:	b9 f5       	brne	.+110    	; 0x510 <usart_2_tcp+0xa4>
     4a2:	fe 01       	movw	r30, r28
     4a4:	31 96       	adiw	r30, 0x01	; 1
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	bf 01       	movw	r22, r30
			
			
			sendsize = 0;				//we set our sendsize to zero
			do
			{
				status = fifo_pull_uint8(&fifo_desc, &TX_Buffer[sendsize++]);
     4ac:	9a 01       	movw	r18, r20
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
 *    \retval true when the FIFO is empty.
 *    \retval false when the FIFO is not empty.
 */
static inline bool fifo_is_empty(fifo_desc_t *fifo_desc)
{
	return (fifo_desc->write_index == fifo_desc->read_index);
     4b2:	90 91 f0 20 	lds	r25, 0x20F0
     4b6:	80 91 ef 20 	lds	r24, 0x20EF
 */
static inline int fifo_pull_uint8(fifo_desc_t *fifo_desc, uint8_t *item)
{
	uint8_t read_index;

	if (fifo_is_empty(fifo_desc)) {
     4ba:	98 17       	cp	r25, r24
     4bc:	c1 f0       	breq	.+48     	; 0x4ee <usart_2_tcp+0x82>
		return FIFO_ERROR_UNDERFLOW;
	}

	read_index = fifo_desc->read_index;
     4be:	80 91 ef 20 	lds	r24, 0x20EF
	*item = fifo_desc->buffer.u8ptr[read_index & (fifo_desc->mask >> 1)];
     4c2:	40 91 f2 20 	lds	r20, 0x20F2
     4c6:	94 2f       	mov	r25, r20
     4c8:	96 95       	lsr	r25
     4ca:	98 23       	and	r25, r24
     4cc:	a0 91 ed 20 	lds	r26, 0x20ED
     4d0:	b0 91 ee 20 	lds	r27, 0x20EE
     4d4:	a9 0f       	add	r26, r25
     4d6:	b1 1d       	adc	r27, r1
     4d8:	9c 91       	ld	r25, X
     4da:	91 93       	st	Z+, r25
	read_index = (read_index + 1) & fifo_desc->mask;
     4dc:	8f 5f       	subi	r24, 0xFF	; 255
     4de:	84 23       	and	r24, r20

	// Must be the last thing to do.
	barrier();
	fifo_desc->read_index = read_index;
     4e0:	80 93 ef 20 	sts	0x20EF, r24
				
			} while ((status==FIFO_OK)&&(sendsize<FIFO_BUFFER_SIZE)); //We Transfer only max FIFO_BUFFER_SIZE Bytes at once at max
     4e4:	20 38       	cpi	r18, 0x80	; 128
     4e6:	31 05       	cpc	r19, r1
     4e8:	31 f0       	breq	.+12     	; 0x4f6 <usart_2_tcp+0x8a>
			
			
			sendsize = 0;				//we set our sendsize to zero
			do
			{
				status = fifo_pull_uint8(&fifo_desc, &TX_Buffer[sendsize++]);
     4ea:	a9 01       	movw	r20, r18
     4ec:	df cf       	rjmp	.-66     	; 0x4ac <usart_2_tcp+0x40>
				
			} while ((status==FIFO_OK)&&(sendsize<FIFO_BUFFER_SIZE)); //We Transfer only max FIFO_BUFFER_SIZE Bytes at once at max
			
			if(sendsize<2)
     4ee:	21 30       	cpi	r18, 0x01	; 1
     4f0:	31 05       	cpc	r19, r1
     4f2:	19 f4       	brne	.+6      	; 0x4fa <usart_2_tcp+0x8e>
     4f4:	0d c0       	rjmp	.+26     	; 0x510 <usart_2_tcp+0xa4>
     4f6:	4f e7       	ldi	r20, 0x7F	; 127
     4f8:	50 e0       	ldi	r21, 0x00	; 0
			{
				//Fail nothing in the FIFO
			}
			else
			{
				ret = send(sn,TX_Buffer,sendsize-1);
     4fa:	81 2f       	mov	r24, r17
     4fc:	00 d5       	rcall	.+2560   	; 0xefe <send>
     4fe:	6b 01       	movw	r12, r22
     500:	7c 01       	movw	r14, r24
				if(ret < 0)		//Okay if the result of our send function is less than zero we got a problem
     502:	97 ff       	sbrs	r25, 7
     504:	05 c0       	rjmp	.+10     	; 0x510 <usart_2_tcp+0xa4>
				{
					close(sn);		//so we close the connection
     506:	81 2f       	mov	r24, r17
     508:	e8 d2       	rcall	.+1488   	; 0xada <close>
					return ret;		//and return what happened
     50a:	b6 01       	movw	r22, r12
     50c:	c7 01       	movw	r24, r14
     50e:	04 c0       	rjmp	.+8      	; 0x518 <usart_2_tcp+0xac>
		break; //Okay with this state we are done and leave the switch statement
		
		default:
		break;
	}
	return 1;
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
     518:	c0 58       	subi	r28, 0x80	; 128
     51a:	df 4f       	sbci	r29, 0xFF	; 255
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	de bf       	out	0x3e, r29	; 62
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	08 95       	ret

00000530 <LAN2Serial>:
	cpu_irq_enable();
}


void LAN2Serial(uint8_t config)	
{
     530:	c8 2f       	mov	r28, r24
	uint32_t Baudrate =0;
	bool Parity=0;
	fifo_init(&fifo_desc, fifo_buffer, FIFO_BUFFER_LENGTH); //FiFo Init requiered for the USART
     532:	40 e8       	ldi	r20, 0x80	; 128
     534:	63 ef       	ldi	r22, 0xF3	; 243
     536:	70 e2       	ldi	r23, 0x20	; 32
     538:	8d ee       	ldi	r24, 0xED	; 237
     53a:	90 e2       	ldi	r25, 0x20	; 32
     53c:	26 d0       	rcall	.+76     	; 0x58a <fifo_init>
	fifo_init(&fifo_desc_usart_tx, fifo_buffer_usart_tx, FIFO_BUFFER_LENGTH); //FiFo Init requiered for the USART
     53e:	40 e8       	ldi	r20, 0x80	; 128
     540:	63 e7       	ldi	r22, 0x73	; 115
     542:	71 e2       	ldi	r23, 0x21	; 33
     544:	83 ef       	ldi	r24, 0xF3	; 243
     546:	91 e2       	ldi	r25, 0x21	; 33
     548:	20 d0       	rcall	.+64     	; 0x58a <fifo_init>
	//Okay lets see what the User wants
	switch(config&0x07)
     54a:	ec 2f       	mov	r30, r28
     54c:	e7 70       	andi	r30, 0x07	; 7
     54e:	e1 50       	subi	r30, 0x01	; 1
     550:	e7 30       	cpi	r30, 0x07	; 7
     552:	50 f4       	brcc	.+20     	; 0x568 <LAN2Serial+0x38>
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	e3 5c       	subi	r30, 0xC3	; 195
     55c:	ff 4d       	sbci	r31, 0xDF	; 223
     55e:	60 81       	ld	r22, Z
     560:	71 81       	ldd	r23, Z+1	; 0x01
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	04 c0       	rjmp	.+8      	; 0x570 <LAN2Serial+0x40>
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	72 ec       	ldi	r23, 0xC2	; 194
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
			Baudrate=115200;
		}
		break;
	}
	
	if((config&0x08)>0)
     570:	c3 fb       	bst	r28, 3
     572:	44 27       	eor	r20, r20
     574:	40 f9       	bld	r20, 0
	{
		Parity=1;
	}
	
	usart_setup(Baudrate,Parity); //Make USART on the module work
     576:	5a de       	rcall	.-844    	; 0x22c <usart_setup>

	while(1==1) //Super loop for the LAN2Serial operation
	{
		tcp_2_usart(L2S_Socket,Buffer,Port);
     578:	40 e9       	ldi	r20, 0x90	; 144
     57a:	5f e1       	ldi	r21, 0x1F	; 31
     57c:	6c e4       	ldi	r22, 0x4C	; 76
     57e:	70 e2       	ldi	r23, 0x20	; 32
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	99 de       	rcall	.-718    	; 0x2b6 <tcp_2_usart>
		usart_2_tcp(L2S_Socket);
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	72 df       	rcall	.-284    	; 0x46c <usart_2_tcp>
     588:	f7 cf       	rjmp	.-18     	; 0x578 <LAN2Serial+0x48>

0000058a <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
     58a:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
     58c:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
     58e:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
     590:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
     592:	44 0f       	add	r20, r20
     594:	41 50       	subi	r20, 0x01	; 1
     596:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
     598:	60 83       	st	Z, r22
     59a:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	08 95       	ret

000005a2 <sysclk_enable_peripheral_clock>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <sysclk_enable_peripheral_clock+0x6>
     5a6:	5e c0       	rjmp	.+188    	; 0x664 <sysclk_enable_peripheral_clock+0xc2>
     5a8:	81 15       	cp	r24, r1
     5aa:	24 e0       	ldi	r18, 0x04	; 4
     5ac:	92 07       	cpc	r25, r18
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <sysclk_enable_peripheral_clock+0x12>
     5b0:	64 e0       	ldi	r22, 0x04	; 4
     5b2:	55 c0       	rjmp	.+170    	; 0x65e <sysclk_enable_peripheral_clock+0xbc>
     5b4:	80 38       	cpi	r24, 0x80	; 128
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	92 07       	cpc	r25, r18
     5ba:	11 f4       	brne	.+4      	; 0x5c0 <sysclk_enable_peripheral_clock+0x1e>
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	4f c0       	rjmp	.+158    	; 0x65e <sysclk_enable_peripheral_clock+0xbc>
     5c0:	81 15       	cp	r24, r1
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	92 07       	cpc	r25, r18
     5c6:	11 f4       	brne	.+4      	; 0x5cc <sysclk_enable_peripheral_clock+0x2a>
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	49 c0       	rjmp	.+146    	; 0x65e <sysclk_enable_peripheral_clock+0xbc>
     5cc:	80 38       	cpi	r24, 0x80	; 128
     5ce:	23 e0       	ldi	r18, 0x03	; 3
     5d0:	92 07       	cpc	r25, r18
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <sysclk_enable_peripheral_clock+0x36>
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	0b c0       	rjmp	.+22     	; 0x5ee <sysclk_enable_peripheral_clock+0x4c>
     5d8:	81 15       	cp	r24, r1
     5da:	22 e0       	ldi	r18, 0x02	; 2
     5dc:	92 07       	cpc	r25, r18
     5de:	11 f4       	brne	.+4      	; 0x5e4 <sysclk_enable_peripheral_clock+0x42>
     5e0:	62 e0       	ldi	r22, 0x02	; 2
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <sysclk_enable_peripheral_clock+0x4c>
     5e4:	81 15       	cp	r24, r1
     5e6:	23 e0       	ldi	r18, 0x03	; 3
     5e8:	92 07       	cpc	r25, r18
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <sysclk_enable_peripheral_clock+0x50>
     5ec:	64 e0       	ldi	r22, 0x04	; 4
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	37 c0       	rjmp	.+110    	; 0x660 <sysclk_enable_peripheral_clock+0xbe>
     5f2:	81 15       	cp	r24, r1
     5f4:	28 e0       	ldi	r18, 0x08	; 8
     5f6:	92 07       	cpc	r25, r18
     5f8:	11 f4       	brne	.+4      	; 0x5fe <sysclk_enable_peripheral_clock+0x5c>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	2a c0       	rjmp	.+84     	; 0x652 <sysclk_enable_peripheral_clock+0xb0>
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	28 e0       	ldi	r18, 0x08	; 8
     602:	92 07       	cpc	r25, r18
     604:	11 f4       	brne	.+4      	; 0x60a <sysclk_enable_peripheral_clock+0x68>
     606:	62 e0       	ldi	r22, 0x02	; 2
     608:	24 c0       	rjmp	.+72     	; 0x652 <sysclk_enable_peripheral_clock+0xb0>
     60a:	80 34       	cpi	r24, 0x40	; 64
     60c:	29 e0       	ldi	r18, 0x09	; 9
     60e:	92 07       	cpc	r25, r18
     610:	11 f4       	brne	.+4      	; 0x616 <sysclk_enable_peripheral_clock+0x74>
     612:	62 e0       	ldi	r22, 0x02	; 2
     614:	17 c0       	rjmp	.+46     	; 0x644 <sysclk_enable_peripheral_clock+0xa2>
     616:	80 3b       	cpi	r24, 0xB0	; 176
     618:	28 e0       	ldi	r18, 0x08	; 8
     61a:	92 07       	cpc	r25, r18
     61c:	11 f4       	brne	.+4      	; 0x622 <sysclk_enable_peripheral_clock+0x80>
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	18 c0       	rjmp	.+48     	; 0x652 <sysclk_enable_peripheral_clock+0xb0>
     622:	80 3e       	cpi	r24, 0xE0	; 224
     624:	28 e0       	ldi	r18, 0x08	; 8
     626:	92 07       	cpc	r25, r18
     628:	11 f4       	brne	.+4      	; 0x62e <sysclk_enable_peripheral_clock+0x8c>
     62a:	68 e0       	ldi	r22, 0x08	; 8
     62c:	12 c0       	rjmp	.+36     	; 0x652 <sysclk_enable_peripheral_clock+0xb0>
     62e:	80 3c       	cpi	r24, 0xC0	; 192
     630:	28 e0       	ldi	r18, 0x08	; 8
     632:	92 07       	cpc	r25, r18
     634:	11 f4       	brne	.+4      	; 0x63a <sysclk_enable_peripheral_clock+0x98>
     636:	60 e1       	ldi	r22, 0x10	; 16
     638:	0c c0       	rjmp	.+24     	; 0x652 <sysclk_enable_peripheral_clock+0xb0>
     63a:	80 3c       	cpi	r24, 0xC0	; 192
     63c:	29 e0       	ldi	r18, 0x09	; 9
     63e:	92 07       	cpc	r25, r18
     640:	19 f4       	brne	.+6      	; 0x648 <sysclk_enable_peripheral_clock+0xa6>
     642:	60 e1       	ldi	r22, 0x10	; 16
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	0c c0       	rjmp	.+24     	; 0x660 <sysclk_enable_peripheral_clock+0xbe>
     648:	80 38       	cpi	r24, 0x80	; 128
     64a:	24 e0       	ldi	r18, 0x04	; 4
     64c:	92 07       	cpc	r25, r18
     64e:	19 f4       	brne	.+6      	; 0x656 <sysclk_enable_peripheral_clock+0xb4>
     650:	60 e4       	ldi	r22, 0x40	; 64
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	05 c0       	rjmp	.+10     	; 0x660 <sysclk_enable_peripheral_clock+0xbe>
     656:	80 36       	cpi	r24, 0x60	; 96
     658:	94 40       	sbci	r25, 0x04	; 4
     65a:	21 f4       	brne	.+8      	; 0x664 <sysclk_enable_peripheral_clock+0xc2>
     65c:	60 e8       	ldi	r22, 0x80	; 128
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <sysclk_enable_module>
     664:	08 95       	ret

00000666 <usart_putchar>:
     666:	fc 01       	movw	r30, r24
     668:	21 81       	ldd	r18, Z+1	; 0x01
     66a:	25 ff       	sbrs	r18, 5
     66c:	fc cf       	rjmp	.-8      	; 0x666 <usart_putchar>
     66e:	60 83       	st	Z, r22
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	08 95       	ret

00000676 <usart_getchar>:
     676:	fc 01       	movw	r30, r24
     678:	21 81       	ldd	r18, Z+1	; 0x01
     67a:	27 ff       	sbrs	r18, 7
     67c:	fc cf       	rjmp	.-8      	; 0x676 <usart_getchar>
     67e:	80 81       	ld	r24, Z
     680:	08 95       	ret

00000682 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     682:	8f 92       	push	r8
     684:	9f 92       	push	r9
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
     69c:	6a 01       	movw	r12, r20
     69e:	7b 01       	movw	r14, r22
     6a0:	48 01       	movw	r8, r16
     6a2:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     6a4:	b9 01       	movw	r22, r18
     6a6:	a8 01       	movw	r20, r16
     6a8:	a3 e0       	ldi	r26, 0x03	; 3
     6aa:	76 95       	lsr	r23
     6ac:	67 95       	ror	r22
     6ae:	57 95       	ror	r21
     6b0:	47 95       	ror	r20
     6b2:	aa 95       	dec	r26
     6b4:	d1 f7       	brne	.-12     	; 0x6aa <usart_set_baudrate+0x28>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     6b6:	d9 01       	movw	r26, r18
     6b8:	c8 01       	movw	r24, r16
     6ba:	16 e1       	ldi	r17, 0x16	; 22
     6bc:	b6 95       	lsr	r27
     6be:	a7 95       	ror	r26
     6c0:	97 95       	ror	r25
     6c2:	87 95       	ror	r24
     6c4:	1a 95       	dec	r17
     6c6:	d1 f7       	brne	.-12     	; 0x6bc <usart_set_baudrate+0x3a>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     6c8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ca:	22 fd       	sbrc	r18, 2
     6cc:	08 c0       	rjmp	.+16     	; 0x6de <usart_set_baudrate+0x5c>
		max_rate /= 2;
     6ce:	76 95       	lsr	r23
     6d0:	67 95       	ror	r22
     6d2:	57 95       	ror	r21
     6d4:	47 95       	ror	r20
		min_rate /= 2;
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     6de:	4c 15       	cp	r20, r12
     6e0:	5d 05       	cpc	r21, r13
     6e2:	6e 05       	cpc	r22, r14
     6e4:	7f 05       	cpc	r23, r15
     6e6:	08 f4       	brcc	.+2      	; 0x6ea <usart_set_baudrate+0x68>
     6e8:	9a c0       	rjmp	.+308    	; 0x81e <usart_set_baudrate+0x19c>
     6ea:	c8 16       	cp	r12, r24
     6ec:	d9 06       	cpc	r13, r25
     6ee:	ea 06       	cpc	r14, r26
     6f0:	fb 06       	cpc	r15, r27
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <usart_set_baudrate+0x74>
     6f4:	94 c0       	rjmp	.+296    	; 0x81e <usart_set_baudrate+0x19c>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	82 fd       	sbrc	r24, 2
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <usart_set_baudrate+0x82>
		baud *= 2;
     6fc:	cc 0c       	add	r12, r12
     6fe:	dd 1c       	adc	r13, r13
     700:	ee 1c       	adc	r14, r14
     702:	ff 1c       	adc	r15, r15
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	a7 01       	movw	r20, r14
     70a:	96 01       	movw	r18, r12
     70c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	a0 e0       	ldi	r26, 0x00	; 0
     716:	b0 e0       	ldi	r27, 0x00	; 0
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     718:	19 ef       	ldi	r17, 0xF9	; 249
		if (ratio < limit) {
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	4a 07       	cpc	r20, r26
     720:	5b 07       	cpc	r21, r27
     722:	58 f0       	brcs	.+22     	; 0x73a <usart_set_baudrate+0xb8>
			break;
		}

		limit <<= 1;
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	aa 1f       	adc	r26, r26
     72a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     72c:	1d 3f       	cpi	r17, 0xFD	; 253
     72e:	0c f4       	brge	.+2      	; 0x732 <usart_set_baudrate+0xb0>
			limit |= 1;
     730:	81 60       	ori	r24, 0x01	; 1
     732:	1f 5f       	subi	r17, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     734:	17 30       	cpi	r17, 0x07	; 7
     736:	89 f7       	brne	.-30     	; 0x71a <usart_set_baudrate+0x98>
     738:	4c c0       	rjmp	.+152    	; 0x7d2 <usart_set_baudrate+0x150>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     73a:	17 ff       	sbrs	r17, 7
     73c:	4a c0       	rjmp	.+148    	; 0x7d2 <usart_set_baudrate+0x150>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     73e:	d7 01       	movw	r26, r14
     740:	c6 01       	movw	r24, r12
     742:	03 e0       	ldi	r16, 0x03	; 3
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	aa 1f       	adc	r26, r26
     74a:	bb 1f       	adc	r27, r27
     74c:	0a 95       	dec	r16
     74e:	d1 f7       	brne	.-12     	; 0x744 <usart_set_baudrate+0xc2>
     750:	88 1a       	sub	r8, r24
     752:	99 0a       	sbc	r9, r25
     754:	aa 0a       	sbc	r10, r26
     756:	bb 0a       	sbc	r11, r27
     758:	81 2f       	mov	r24, r17
     75a:	99 27       	eor	r25, r25
     75c:	87 fd       	sbrc	r24, 7
     75e:	90 95       	com	r25
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     760:	1e 3f       	cpi	r17, 0xFE	; 254
     762:	e4 f4       	brge	.+56     	; 0x79c <usart_set_baudrate+0x11a>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     764:	6d ef       	ldi	r22, 0xFD	; 253
     766:	7f ef       	ldi	r23, 0xFF	; 255
     768:	68 1b       	sub	r22, r24
     76a:	79 0b       	sbc	r23, r25
     76c:	a5 01       	movw	r20, r10
     76e:	94 01       	movw	r18, r8
     770:	04 c0       	rjmp	.+8      	; 0x77a <usart_set_baudrate+0xf8>
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	44 1f       	adc	r20, r20
     778:	55 1f       	adc	r21, r21
     77a:	6a 95       	dec	r22
     77c:	d2 f7       	brpl	.-12     	; 0x772 <usart_set_baudrate+0xf0>
     77e:	ca 01       	movw	r24, r20
     780:	b9 01       	movw	r22, r18
     782:	46 01       	movw	r8, r12
     784:	57 01       	movw	r10, r14
     786:	b6 94       	lsr	r11
     788:	a7 94       	ror	r10
     78a:	97 94       	ror	r9
     78c:	87 94       	ror	r8
     78e:	68 0d       	add	r22, r8
     790:	79 1d       	adc	r23, r9
     792:	8a 1d       	adc	r24, r10
     794:	9b 1d       	adc	r25, r11
     796:	a7 01       	movw	r20, r14
     798:	96 01       	movw	r18, r12
     79a:	18 c0       	rjmp	.+48     	; 0x7cc <usart_set_baudrate+0x14a>
		} else {
			baud <<= exp + 3;
     79c:	9c 01       	movw	r18, r24
     79e:	2d 5f       	subi	r18, 0xFD	; 253
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	d7 01       	movw	r26, r14
     7a4:	c6 01       	movw	r24, r12
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <usart_set_baudrate+0x12e>
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	aa 1f       	adc	r26, r26
     7ae:	bb 1f       	adc	r27, r27
     7b0:	2a 95       	dec	r18
     7b2:	d2 f7       	brpl	.-12     	; 0x7a8 <usart_set_baudrate+0x126>
     7b4:	9c 01       	movw	r18, r24
     7b6:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     7b8:	bc 01       	movw	r22, r24
     7ba:	cd 01       	movw	r24, r26
     7bc:	96 95       	lsr	r25
     7be:	87 95       	ror	r24
     7c0:	77 95       	ror	r23
     7c2:	67 95       	ror	r22
     7c4:	68 0d       	add	r22, r8
     7c6:	79 1d       	adc	r23, r9
     7c8:	8a 1d       	adc	r24, r10
     7ca:	9b 1d       	adc	r25, r11
     7cc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
     7d0:	1d c0       	rjmp	.+58     	; 0x80c <usart_set_baudrate+0x18a>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     7d2:	23 e0       	ldi	r18, 0x03	; 3
     7d4:	21 0f       	add	r18, r17
     7d6:	d7 01       	movw	r26, r14
     7d8:	c6 01       	movw	r24, r12
     7da:	04 c0       	rjmp	.+8      	; 0x7e4 <usart_set_baudrate+0x162>
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	aa 1f       	adc	r26, r26
     7e2:	bb 1f       	adc	r27, r27
     7e4:	2a 95       	dec	r18
     7e6:	d2 f7       	brpl	.-12     	; 0x7dc <usart_set_baudrate+0x15a>
     7e8:	9c 01       	movw	r18, r24
     7ea:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     7ec:	bc 01       	movw	r22, r24
     7ee:	cd 01       	movw	r24, r26
     7f0:	96 95       	lsr	r25
     7f2:	87 95       	ror	r24
     7f4:	77 95       	ror	r23
     7f6:	67 95       	ror	r22
     7f8:	68 0d       	add	r22, r8
     7fa:	79 1d       	adc	r23, r9
     7fc:	8a 1d       	adc	r24, r10
     7fe:	9b 1d       	adc	r25, r11
     800:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
     804:	21 50       	subi	r18, 0x01	; 1
     806:	31 09       	sbc	r19, r1
     808:	41 09       	sbc	r20, r1
     80a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     80c:	83 2f       	mov	r24, r19
     80e:	8f 70       	andi	r24, 0x0F	; 15
     810:	12 95       	swap	r17
     812:	10 7f       	andi	r17, 0xF0	; 240
     814:	81 2b       	or	r24, r17
     816:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     818:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	01 c0       	rjmp	.+2      	; 0x820 <usart_set_baudrate+0x19e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     81e:	80 e0       	ldi	r24, 0x00	; 0

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	9f 90       	pop	r9
     836:	8f 90       	pop	r8
     838:	08 95       	ret

0000083a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
     844:	8b 01       	movw	r16, r22
	bool result;
	sysclk_enable_peripheral_clock(usart);
     846:	ad de       	rcall	.-678    	; 0x5a2 <sysclk_enable_peripheral_clock>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     848:	8c 81       	ldd	r24, Y+4	; 0x04
     84a:	8f 73       	andi	r24, 0x3F	; 63
     84c:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     84e:	f8 01       	movw	r30, r16
     850:	84 81       	ldd	r24, Z+4	; 0x04
     852:	95 81       	ldd	r25, Z+5	; 0x05
     854:	89 2b       	or	r24, r25
     856:	96 81       	ldd	r25, Z+6	; 0x06
     858:	99 23       	and	r25, r25
     85a:	11 f0       	breq	.+4      	; 0x860 <usart_init_rs232+0x26>
     85c:	98 e0       	ldi	r25, 0x08	; 8
     85e:	01 c0       	rjmp	.+2      	; 0x862 <usart_init_rs232+0x28>
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	89 2b       	or	r24, r25
     864:	8c 83       	std	Y+4, r24	; 0x04
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     866:	f8 01       	movw	r30, r16
     868:	40 81       	ld	r20, Z
     86a:	51 81       	ldd	r21, Z+1	; 0x01
     86c:	62 81       	ldd	r22, Z+2	; 0x02
     86e:	73 81       	ldd	r23, Z+3	; 0x03
     870:	00 e0       	ldi	r16, 0x00	; 0
     872:	18 e4       	ldi	r17, 0x48	; 72
     874:	28 ee       	ldi	r18, 0xE8	; 232
     876:	31 e0       	ldi	r19, 0x01	; 1
     878:	ce 01       	movw	r24, r28
     87a:	03 df       	rcall	.-506    	; 0x682 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     87c:	9b 81       	ldd	r25, Y+3	; 0x03
     87e:	98 60       	ori	r25, 0x08	; 8
     880:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     882:	9b 81       	ldd	r25, Y+3	; 0x03
     884:	90 61       	ori	r25, 0x10	; 16
     886:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <ioport_set_pin_mode.constprop.0>:
void SW_Reset(void);

void SW_Reset(void)
{
	CCP = CCP_IOREG_gc;
	RST_CTRL =  RST_SWRST_bm;
     892:	e8 2f       	mov	r30, r24
     894:	e6 95       	lsr	r30
     896:	e6 95       	lsr	r30
     898:	e6 95       	lsr	r30
     89a:	90 e2       	ldi	r25, 0x20	; 32
     89c:	e9 9f       	mul	r30, r25
     89e:	f0 01       	movw	r30, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	e0 5f       	subi	r30, 0xF0	; 240
     8a4:	f9 4f       	sbci	r31, 0xF9	; 249
     8a6:	87 70       	andi	r24, 0x07	; 7
     8a8:	e8 0f       	add	r30, r24
     8aa:	f1 1d       	adc	r31, r1
     8ac:	9f b7       	in	r25, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	80 81       	ld	r24, Z
     8b2:	87 70       	andi	r24, 0x07	; 7
     8b4:	80 83       	st	Z, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	88 61       	ori	r24, 0x18	; 24
     8ba:	80 83       	st	Z, r24
     8bc:	9f bf       	out	0x3f, r25	; 63
     8be:	08 95       	ret

000008c0 <__portable_avr_delay_cycles.constprop.2>:
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	93 e2       	ldi	r25, 0x23	; 35
     8c4:	a8 e0       	ldi	r26, 0x08	; 8
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	a1 09       	sbc	r26, r1
     8cc:	b1 09       	sbc	r27, r1
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	a1 05       	cpc	r26, r1
     8d2:	b1 05       	cpc	r27, r1
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <__portable_avr_delay_cycles.constprop.2+0x8>
     8d6:	08 95       	ret

000008d8 <__vector_default>:
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <main>:
}

int main (void)
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	67 97       	sbiw	r28, 0x17	; 23
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	de bf       	out	0x3e, r29	; 62
	uint8_t config=0;
	wiz_NetInfo NetworkConfig = {
     8fa:	87 e1       	ldi	r24, 0x17	; 23
     8fc:	e6 e1       	ldi	r30, 0x16	; 22
     8fe:	f0 e2       	ldi	r31, 0x20	; 32
     900:	de 01       	movw	r26, r28
     902:	11 96       	adiw	r26, 0x01	; 1
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	8a 95       	dec	r24
     90a:	e1 f7       	brne	.-8      	; 0x904 <main+0x18>
		.gw = {192, 168, 1, 1},
		.dns = {0,0,0,0},
	.dhcp = NETINFO_STATIC };
	
	
	board_init();
     90c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <board_init>
	ioport_init();
	sysclk_init();
     910:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <sysclk_init>
	

	
	
	cli();
     914:	f8 94       	cli
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     916:	10 92 f9 21 	sts	0x21F9, r1
     91a:	10 92 fa 21 	sts	0x21FA, r1
     91e:	10 92 fb 21 	sts	0x21FB, r1
     922:	10 92 fc 21 	sts	0x21FC, r1
     926:	10 92 fd 21 	sts	0x21FD, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     92a:	01 e0       	ldi	r16, 0x01	; 1
     92c:	00 93 fe 21 	sts	0x21FE, r16
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	80 93 62 06 	sts	0x0662, r24
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	80 93 62 06 	sts	0x0662, r24
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	80 93 62 06 	sts	0x0662, r24
     942:	00 93 62 06 	sts	0x0662, r16

	ioport_set_pin_dir(CF1, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CF2, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CF3, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CF4, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(CF1, IOPORT_MODE_PULLUP);
     946:	8b e1       	ldi	r24, 0x1B	; 27
     948:	a4 df       	rcall	.-184    	; 0x892 <ioport_set_pin_mode.constprop.0>
	ioport_set_pin_mode(CF2, IOPORT_MODE_PULLUP);
     94a:	8a e1       	ldi	r24, 0x1A	; 26
     94c:	a2 df       	rcall	.-188    	; 0x892 <ioport_set_pin_mode.constprop.0>
	ioport_set_pin_mode(CF3, IOPORT_MODE_PULLUP);
     94e:	89 e1       	ldi	r24, 0x19	; 25
     950:	a0 df       	rcall	.-192    	; 0x892 <ioport_set_pin_mode.constprop.0>
	ioport_set_pin_mode(CF4, IOPORT_MODE_PULLUP);
     952:	88 e1       	ldi	r24, 0x18	; 24
     954:	9e df       	rcall	.-196    	; 0x892 <ioport_set_pin_mode.constprop.0>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	80 93 01 06 	sts	0x0601, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     95c:	80 93 05 06 	sts	0x0605, r24

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     960:	10 91 68 06 	lds	r17, 0x0668
	
	ioport_set_pin_dir(LED, IOPORT_DIR_OUTPUT);
	ioport_set_pin_high(LED);
	
	//Read Input
	if(ioport_get_pin_level(CF1)==0)
     964:	13 fb       	bst	r17, 3
     966:	11 27       	eor	r17, r17
     968:	10 f9       	bld	r17, 0
     96a:	10 27       	eor	r17, r16
     96c:	80 91 68 06 	lds	r24, 0x0668
	{
		config|=0x01;
	}
	
	if(ioport_get_pin_level(CF2)==0)
     970:	82 ff       	sbrs	r24, 2
	{
		config|=0x02;
     972:	12 60       	ori	r17, 0x02	; 2
     974:	80 91 68 06 	lds	r24, 0x0668
	}
	
	if(ioport_get_pin_level(CF3)==0)
     978:	81 ff       	sbrs	r24, 1
	{
		config|=0x04;
     97a:	14 60       	ori	r17, 0x04	; 4
     97c:	80 91 68 06 	lds	r24, 0x0668
	}
	
	if(ioport_get_pin_level(CF4)==0)
     980:	80 ff       	sbrs	r24, 0
	{
		config|=0x08;
     982:	18 60       	ori	r17, 0x08	; 8
	}
		
	delay_ms(100);	
     984:	9d df       	rcall	.-198    	; 0x8c0 <__portable_avr_delay_cycles.constprop.2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     986:	80 e2       	ldi	r24, 0x20	; 32
     988:	80 93 05 06 	sts	0x0605, r24

 	ioport_set_pin_high(LED);
		
	w55500_init(&NetworkConfig);
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	60 d0       	rcall	.+192    	; 0xa52 <w55500_init>
		//-----------------------------------------------------------------
		//
		// This is the LoopBack Demo for TCP/IP
		//TCP_IP_Loopback();
		//usart_sample();
		LAN2Serial(config);
     992:	81 2f       	mov	r24, r17
     994:	cd dd       	rcall	.-1126   	; 0x530 <LAN2Serial>
     996:	fd cf       	rjmp	.-6      	; 0x992 <main+0xa6>

00000998 <chip_deselect_sw>:
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	e0 e4       	ldi	r30, 0x40	; 64
     99c:	f6 e0       	ldi	r31, 0x06	; 6
     99e:	85 83       	std	Z+5, r24	; 0x05
     9a0:	08 95       	ret

000009a2 <chip_select_sw>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	e0 e4       	ldi	r30, 0x40	; 64
     9a6:	f6 e0       	ldi	r31, 0x06	; 6
     9a8:	86 83       	std	Z+6, r24	; 0x06
     9aa:	08 95       	ret

000009ac <spi_write_sw>:
     9ac:	90 e8       	ldi	r25, 0x80	; 128
     9ae:	90 93 46 06 	sts	0x0646, r25
     9b2:	98 e0       	ldi	r25, 0x08	; 8
     9b4:	90 93 46 06 	sts	0x0646, r25
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9b8:	20 e8       	ldi	r18, 0x80	; 128
     9ba:	38 e0       	ldi	r19, 0x08	; 8

	ioport_set_pin_low(MOSI);			//Set MOSI to a defined level
	ioport_set_pin_low(SCK);			//Set Clock to a defined level
	for(uint8_t i=0;i<8;i++)			//8 Bit Transfer
	{
		if((wb&0x80)>0)					//We will shift MSB to LSB out, so lets see if MSB is set
     9bc:	87 fd       	sbrc	r24, 7
     9be:	20 93 45 06 	sts	0x0645, r18
     9c2:	30 93 45 06 	sts	0x0645, r19
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9c6:	30 93 46 06 	sts	0x0646, r19
     9ca:	20 93 46 06 	sts	0x0646, r18
		
		ioport_set_pin_high(SCK);		//Toggle Clock, first High
		ioport_set_pin_low(SCK);		//then Low
		
		ioport_set_pin_low(MOSI);		//Set MOSI to a given Level
		wb=(wb<<1);						//Bitshift for the Datatransfer
     9ce:	88 0f       	add	r24, r24
     9d0:	91 50       	subi	r25, 0x01	; 1
void  spi_write_sw(uint8_t wb)
{

	ioport_set_pin_low(MOSI);			//Set MOSI to a defined level
	ioport_set_pin_low(SCK);			//Set Clock to a defined level
	for(uint8_t i=0;i<8;i++)			//8 Bit Transfer
     9d2:	a1 f7       	brne	.-24     	; 0x9bc <spi_write_sw+0x10>
     9d4:	80 e8       	ldi	r24, 0x80	; 128
     9d6:	80 93 46 06 	sts	0x0646, r24
     9da:	88 e0       	ldi	r24, 0x08	; 8
     9dc:	80 93 46 06 	sts	0x0646, r24
     9e0:	08 95       	ret

000009e2 <spi_read_sw>:
     9e2:	80 e8       	ldi	r24, 0x80	; 128
     9e4:	80 93 46 06 	sts	0x0646, r24
     9e8:	88 e0       	ldi	r24, 0x08	; 8
     9ea:	80 93 46 06 	sts	0x0646, r24
     9ee:	98 e0       	ldi	r25, 0x08	; 8
}

//Ths reads Data and transmitts simply 0x00 to the device, data will be read back and returnd as 8-Bit Transfer
uint8_t spi_read_sw()
{
	uint8_t spi_reg=0;
     9f0:	80 e0       	ldi	r24, 0x00	; 0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9f2:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9f4:	30 e8       	ldi	r19, 0x80	; 128
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9f6:	20 93 45 06 	sts	0x0645, r18
	for(uint8_t i=0;i<8;i++)
	{
		
		
		ioport_set_pin_high(SCK);
		spi_reg=(spi_reg<<1);
     9fa:	88 0f       	add	r24, r24

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     9fc:	40 91 48 06 	lds	r20, 0x0648
		
		
		if(ioport_get_pin_level(MISO)>0)
     a00:	45 fd       	sbrc	r20, 5
		{
			spi_reg|=1;
     a02:	81 60       	ori	r24, 0x01	; 1
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     a04:	30 93 46 06 	sts	0x0646, r19
     a08:	20 93 46 06 	sts	0x0646, r18
     a0c:	91 50       	subi	r25, 0x01	; 1
uint8_t spi_read_sw()
{
	uint8_t spi_reg=0;
	ioport_set_pin_low(MOSI);
	ioport_set_pin_low(SCK);
	for(uint8_t i=0;i<8;i++)
     a0e:	99 f7       	brne	.-26     	; 0x9f6 <spi_read_sw+0x14>
     a10:	90 e8       	ldi	r25, 0x80	; 128
     a12:	90 93 46 06 	sts	0x0646, r25
     a16:	98 e0       	ldi	r25, 0x08	; 8
     a18:	90 93 46 06 	sts	0x0646, r25
		
	}	
	ioport_set_pin_low(MOSI);
	ioport_set_pin_low(SCK);
	return spi_reg;
}
     a1c:	08 95       	ret

00000a1e <init_ports>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     a1e:	e0 e4       	ldi	r30, 0x40	; 64
     a20:	f6 e0       	ldi	r31, 0x06	; 6
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	85 83       	std	Z+5, r24	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     a26:	81 83       	std	Z+1, r24	; 0x01
     a28:	88 e0       	ldi	r24, 0x08	; 8
     a2a:	81 83       	std	Z+1, r24	; 0x01
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     a30:	80 e2       	ldi	r24, 0x20	; 32
     a32:	82 83       	std	Z+2, r24	; 0x02
     a34:	08 95       	ret

00000a36 <spi_init_sw>:
	ioport_set_pin_dir(MISO, IOPORT_DIR_INPUT);
}

void spi_init_sw(void)
{
	init_ports();
     a36:	f3 df       	rcall	.-26     	; 0xa1e <init_ports>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	e0 e4       	ldi	r30, 0x40	; 64
     a3c:	f6 e0       	ldi	r31, 0x06	; 6
     a3e:	85 83       	std	Z+5, r24	; 0x05
     a40:	08 95       	ret

00000a42 <w5500_init_io>:
     a42:	e0 e4       	ldi	r30, 0x40	; 64
     a44:	f6 e0       	ldi	r31, 0x06	; 6
     a46:	80 e4       	ldi	r24, 0x40	; 64
     a48:	81 83       	std	Z+1, r24	; 0x01
     a4a:	90 e1       	ldi	r25, 0x10	; 16
     a4c:	92 83       	std	Z+2, r25	; 0x02
     a4e:	85 83       	std	Z+5, r24	; 0x05
     a50:	08 95       	ret

00000a52 <w55500_init>:
}



InitResult_t w55500_init(wiz_NetInfo* NetworkConfig)
{
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	61 97       	sbiw	r28, 0x11	; 17
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	8c 01       	movw	r16, r24
	uint8_t tmp;
	uint8_t memsize[2][8] = {
     a66:	80 e1       	ldi	r24, 0x10	; 16
     a68:	ed e2       	ldi	r30, 0x2D	; 45
     a6a:	f0 e2       	ldi	r31, 0x20	; 32
     a6c:	de 01       	movw	r26, r28
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	01 90       	ld	r0, Z+
     a72:	0d 92       	st	X+, r0
     a74:	8a 95       	dec	r24
     a76:	e1 f7       	brne	.-8      	; 0xa70 <w55500_init+0x1e>
							 {2,2,2,2,2,2,2,2} /* Configure RX Socket Size in kByte*/
							,{2,2,2,2,2,2,2,2} /* Configure TX Socket Size in kByte*/
							}; 
	
	w5500_init_io();		//Set the additional IOs to the correct value and direction
     a78:	e4 df       	rcall	.-56     	; 0xa42 <w5500_init_io>
	
	spi_init_sw();			//Init the Software SPI Driver
     a7a:	dd df       	rcall	.-70     	; 0xa36 <spi_init_sw>
	/* Critical section callback - No use in this example */
	//reg_wizchip_cris_cbfunc(0, 0);
	/* Chip selection call back */
	#if   _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
	reg_wizchip_cs_cbfunc(chip_select_sw, chip_deselect_sw);		//Register Functionpointer for Chipselect in Driver
     a7c:	6c ec       	ldi	r22, 0xCC	; 204
     a7e:	74 e0       	ldi	r23, 0x04	; 4
     a80:	81 ed       	ldi	r24, 0xD1	; 209
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	ec d6       	rcall	.+3544   	; 0x185e <reg_wizchip_cs_cbfunc>
	#else
	reg_wizchip_cs_cbfunc(chip_select_sw, chip_deselect_sw);		//Register Functionpointer for Chipselect in Driver
	#endif
	#endif
	/* SPI Read & Write callback function */
	reg_wizchip_spi_cbfunc(spi_read_sw, spi_write_sw);				//Register Functionpointer for Datatransfers in Driver
     a86:	66 ed       	ldi	r22, 0xD6	; 214
     a88:	74 e0       	ldi	r23, 0x04	; 4
     a8a:	81 ef       	ldi	r24, 0xF1	; 241
     a8c:	94 e0       	ldi	r25, 0x04	; 4
     a8e:	02 d7       	rcall	.+3588   	; 0x1894 <reg_wizchip_spi_cbfunc>
	//reg_wizchip_cris_cbfunc(enter_critical,exit_critical);		///Use with care !
	////////////////////////////////////////////////////////////////////////

	
	/* WIZCHIP SOCKET Buffer initialize */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
     a90:	be 01       	movw	r22, r28
     a92:	6f 5f       	subi	r22, 0xFF	; 255
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <ctlwizchip>
     a9c:	8f 3f       	cpi	r24, 0xFF	; 255
     a9e:	91 f0       	breq	.+36     	; 0xac4 <w55500_init+0x72>
	{
		return InitError;	//Init went wrong
	}
	
	/* PHY link status check */
	if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
     aa0:	be 01       	movw	r22, r28
     aa2:	6f 5e       	subi	r22, 0xEF	; 239
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8f e0       	ldi	r24, 0x0F	; 15
     aa8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <ctlwizchip>
     aac:	8f 3f       	cpi	r24, 0xFF	; 255
     aae:	61 f0       	breq	.+24     	; 0xac8 <w55500_init+0x76>
		return PhyError;	//Phy in suspect state
	}
	
	//This is wehre the "Black Magic" happens
	//
	ctlnetwork(CN_SET_NETINFO,NetworkConfig);	//Write Config in Chip
     ab0:	b8 01       	movw	r22, r16
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <ctlnetwork>
	ctlnetwork(CN_GET_NETINFO,NetworkConfig);	//Read Config Back
     ab8:	b8 01       	movw	r22, r16
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <ctlnetwork>
	return Okay;								//Return Okay
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <w55500_init+0x78>

	
	/* WIZCHIP SOCKET Buffer initialize */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
	{
		return InitError;	//Init went wrong
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <w55500_init+0x78>
	}
	
	/* PHY link status check */
	if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
	{
		return PhyError;	//Phy in suspect state
     ac8:	81 e0       	ldi	r24, 0x01	; 1
	//
	ctlnetwork(CN_SET_NETINFO,NetworkConfig);	//Write Config in Chip
	ctlnetwork(CN_GET_NETINFO,NetworkConfig);	//Read Config Back
	return Okay;								//Return Okay
	//Black Magic done :-), as you given a pointer to your Network-Config, you'll get the current config back from the chip
     aca:	61 96       	adiw	r28, 0x11	; 17
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <close>:
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   
   return SOCK_OK;
}
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	b8 2e       	mov	r11, r24
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	8b 15       	cp	r24, r11
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <close+0x1c>
     af4:	4b c0       	rjmp	.+150    	; 0xb8c <close+0xb2>
     af6:	0b 2d       	mov	r16, r11
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	e8 01       	movw	r28, r16
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	cc 0f       	add	r28, r28
     b00:	dd 1f       	adc	r29, r29
     b02:	9a 95       	dec	r25
     b04:	e1 f7       	brne	.-8      	; 0xafe <close+0x24>
     b06:	28 96       	adiw	r28, 0x08	; 8
     b08:	6e 01       	movw	r12, r28
     b0a:	d3 94       	inc	r13
     b0c:	ee 24       	eor	r14, r14
     b0e:	d7 fc       	sbrc	r13, 7
     b10:	e0 94       	com	r14
     b12:	fe 2c       	mov	r15, r14
     b14:	40 e1       	ldi	r20, 0x10	; 16
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
     b1a:	04 d4       	rcall	.+2056   	; 0x1324 <WIZCHIP_WRITE>
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	c0 d3       	rcall	.+1920   	; 0x12a2 <WIZCHIP_READ>
     b22:	81 11       	cpse	r24, r1
     b24:	fb cf       	rjmp	.-10     	; 0xb1c <close+0x42>
     b26:	be 01       	movw	r22, r28
     b28:	7e 5f       	subi	r23, 0xFE	; 254
     b2a:	88 27       	eor	r24, r24
     b2c:	77 fd       	sbrc	r23, 7
     b2e:	80 95       	com	r24
     b30:	98 2f       	mov	r25, r24
     b32:	4f e1       	ldi	r20, 0x1F	; 31
     b34:	f7 d3       	rcall	.+2030   	; 0x1324 <WIZCHIP_WRITE>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <close+0x66>
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	ba 94       	dec	r11
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <close+0x62>
     b44:	20 95       	com	r18
     b46:	30 95       	com	r19
     b48:	80 91 e4 20 	lds	r24, 0x20E4
     b4c:	90 91 e5 20 	lds	r25, 0x20E5
     b50:	82 23       	and	r24, r18
     b52:	93 23       	and	r25, r19
     b54:	80 93 e4 20 	sts	0x20E4, r24
     b58:	90 93 e5 20 	sts	0x20E5, r25
     b5c:	f8 01       	movw	r30, r16
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	ec 52       	subi	r30, 0x2C	; 44
     b64:	ff 4d       	sbci	r31, 0xDF	; 223
     b66:	10 82       	st	Z, r1
     b68:	11 82       	std	Z+1, r1	; 0x01
     b6a:	f8 01       	movw	r30, r16
     b6c:	e4 53       	subi	r30, 0x34	; 52
     b6e:	ff 4d       	sbci	r31, 0xDF	; 223
     b70:	10 82       	st	Z, r1
     b72:	6e 01       	movw	r12, r28
     b74:	8d ef       	ldi	r24, 0xFD	; 253
     b76:	d8 1a       	sub	r13, r24
     b78:	ee 24       	eor	r14, r14
     b7a:	d7 fc       	sbrc	r13, 7
     b7c:	e0 94       	com	r14
     b7e:	fe 2c       	mov	r15, r14
     b80:	c7 01       	movw	r24, r14
     b82:	b6 01       	movw	r22, r12
     b84:	8e d3       	rcall	.+1820   	; 0x12a2 <WIZCHIP_READ>
     b86:	81 11       	cpse	r24, r1
     b88:	fb cf       	rjmp	.-10     	; 0xb80 <close+0xa6>
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <close+0xb6>
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <close+0xb8>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	08 95       	ret

00000ba6 <socket>:
     ba6:	6f 92       	push	r6
     ba8:	7f 92       	push	r7
     baa:	8f 92       	push	r8
     bac:	9f 92       	push	r9
     bae:	af 92       	push	r10
     bb0:	bf 92       	push	r11
     bb2:	cf 92       	push	r12
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	1f 92       	push	r1
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	98 2e       	mov	r9, r24
     bca:	7a 01       	movw	r14, r20
     bcc:	82 2e       	mov	r8, r18
     bce:	28 e0       	ldi	r18, 0x08	; 8
     bd0:	28 17       	cp	r18, r24
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <socket+0x30>
     bd4:	a9 c0       	rjmp	.+338    	; 0xd28 <socket+0x182>
     bd6:	61 30       	cpi	r22, 0x01	; 1
     bd8:	08 f4       	brcc	.+2      	; 0xbdc <socket+0x36>
     bda:	a8 c0       	rjmp	.+336    	; 0xd2c <socket+0x186>
     bdc:	63 30       	cpi	r22, 0x03	; 3
     bde:	18 f0       	brcs	.+6      	; 0xbe6 <socket+0x40>
     be0:	64 30       	cpi	r22, 0x04	; 4
     be2:	09 f0       	breq	.+2      	; 0xbe6 <socket+0x40>
     be4:	a3 c0       	rjmp	.+326    	; 0xd2c <socket+0x186>
     be6:	88 2d       	mov	r24, r8
     be8:	86 70       	andi	r24, 0x06	; 6
     bea:	09 f0       	breq	.+2      	; 0xbee <socket+0x48>
     bec:	a1 c0       	rjmp	.+322    	; 0xd30 <socket+0x18a>
     bee:	88 20       	and	r8, r8
     bf0:	89 f0       	breq	.+34     	; 0xc14 <socket+0x6e>
     bf2:	61 30       	cpi	r22, 0x01	; 1
     bf4:	19 f0       	breq	.+6      	; 0xbfc <socket+0x56>
     bf6:	62 30       	cpi	r22, 0x02	; 2
     bf8:	29 f0       	breq	.+10     	; 0xc04 <socket+0x5e>
     bfa:	0c c0       	rjmp	.+24     	; 0xc14 <socket+0x6e>
     bfc:	88 2d       	mov	r24, r8
     bfe:	81 72       	andi	r24, 0x21	; 33
     c00:	49 f4       	brne	.+18     	; 0xc14 <socket+0x6e>
     c02:	96 c0       	rjmp	.+300    	; 0xd30 <socket+0x18a>
     c04:	85 fe       	sbrs	r8, 5
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <socket+0x66>
     c08:	87 fe       	sbrs	r8, 7
     c0a:	92 c0       	rjmp	.+292    	; 0xd30 <socket+0x18a>
     c0c:	84 fe       	sbrs	r8, 4
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <socket+0x6e>
     c10:	87 fe       	sbrs	r8, 7
     c12:	8e c0       	rjmp	.+284    	; 0xd30 <socket+0x18a>
     c14:	89 2d       	mov	r24, r9
     c16:	69 83       	std	Y+1, r22	; 0x01
     c18:	60 df       	rcall	.-320    	; 0xada <close>
     c1a:	a9 2c       	mov	r10, r9
     c1c:	b1 2c       	mov	r11, r1
     c1e:	35 01       	movw	r6, r10
     c20:	35 e0       	ldi	r19, 0x05	; 5
     c22:	66 0c       	add	r6, r6
     c24:	77 1c       	adc	r7, r7
     c26:	3a 95       	dec	r19
     c28:	e1 f7       	brne	.-8      	; 0xc22 <socket+0x7c>
     c2a:	c3 01       	movw	r24, r6
     c2c:	08 96       	adiw	r24, 0x08	; 8
     c2e:	3c 01       	movw	r6, r24
     c30:	48 2d       	mov	r20, r8
     c32:	40 7f       	andi	r20, 0xF0	; 240
     c34:	69 81       	ldd	r22, Y+1	; 0x01
     c36:	46 2b       	or	r20, r22
     c38:	bc 01       	movw	r22, r24
     c3a:	88 27       	eor	r24, r24
     c3c:	77 fd       	sbrc	r23, 7
     c3e:	80 95       	com	r24
     c40:	98 2f       	mov	r25, r24
     c42:	70 d3       	rcall	.+1760   	; 0x1324 <WIZCHIP_WRITE>
     c44:	e1 14       	cp	r14, r1
     c46:	f1 04       	cpc	r15, r1
     c48:	81 f4       	brne	.+32     	; 0xc6a <socket+0xc4>
     c4a:	e0 90 00 20 	lds	r14, 0x2000
     c4e:	f0 90 01 20 	lds	r15, 0x2001
     c52:	c7 01       	movw	r24, r14
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	80 3f       	cpi	r24, 0xF0	; 240
     c58:	ef ef       	ldi	r30, 0xFF	; 255
     c5a:	9e 07       	cpc	r25, r30
     c5c:	11 f4       	brne	.+4      	; 0xc62 <socket+0xbc>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 ec       	ldi	r25, 0xC0	; 192
     c62:	80 93 00 20 	sts	0x2000, r24
     c66:	90 93 01 20 	sts	0x2001, r25
     c6a:	b3 01       	movw	r22, r6
     c6c:	7c 5f       	subi	r23, 0xFC	; 252
     c6e:	88 27       	eor	r24, r24
     c70:	77 fd       	sbrc	r23, 7
     c72:	80 95       	com	r24
     c74:	98 2f       	mov	r25, r24
     c76:	4f 2d       	mov	r20, r15
     c78:	55 d3       	rcall	.+1706   	; 0x1324 <WIZCHIP_WRITE>
     c7a:	b3 01       	movw	r22, r6
     c7c:	7b 5f       	subi	r23, 0xFB	; 251
     c7e:	88 27       	eor	r24, r24
     c80:	77 fd       	sbrc	r23, 7
     c82:	80 95       	com	r24
     c84:	98 2f       	mov	r25, r24
     c86:	4e 2d       	mov	r20, r14
     c88:	4d d3       	rcall	.+1690   	; 0x1324 <WIZCHIP_WRITE>
     c8a:	63 01       	movw	r12, r6
     c8c:	d3 94       	inc	r13
     c8e:	ee 24       	eor	r14, r14
     c90:	d7 fc       	sbrc	r13, 7
     c92:	e0 94       	com	r14
     c94:	fe 2c       	mov	r15, r14
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	c7 01       	movw	r24, r14
     c9a:	b6 01       	movw	r22, r12
     c9c:	43 d3       	rcall	.+1670   	; 0x1324 <WIZCHIP_WRITE>
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	ff d2       	rcall	.+1534   	; 0x12a2 <WIZCHIP_READ>
     ca4:	81 11       	cpse	r24, r1
     ca6:	fb cf       	rjmp	.-10     	; 0xc9e <socket+0xf8>
     ca8:	08 2d       	mov	r16, r8
     caa:	01 70       	andi	r16, 0x01	; 1
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	09 2c       	mov	r0, r9
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <socket+0x110>
     cb2:	00 0f       	add	r16, r16
     cb4:	11 1f       	adc	r17, r17
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <socket+0x10c>
     cba:	80 91 e6 20 	lds	r24, 0x20E6
     cbe:	90 91 e7 20 	lds	r25, 0x20E7
     cc2:	80 2b       	or	r24, r16
     cc4:	91 2b       	or	r25, r17
     cc6:	80 93 e6 20 	sts	0x20E6, r24
     cca:	90 93 e7 20 	sts	0x20E7, r25
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	09 2c       	mov	r0, r9
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <socket+0x134>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <socket+0x130>
     cde:	80 95       	com	r24
     ce0:	90 95       	com	r25
     ce2:	20 91 e4 20 	lds	r18, 0x20E4
     ce6:	30 91 e5 20 	lds	r19, 0x20E5
     cea:	28 23       	and	r18, r24
     cec:	39 23       	and	r19, r25
     cee:	20 93 e4 20 	sts	0x20E4, r18
     cf2:	30 93 e5 20 	sts	0x20E5, r19
     cf6:	f5 01       	movw	r30, r10
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ec 52       	subi	r30, 0x2C	; 44
     cfe:	ff 4d       	sbci	r31, 0xDF	; 223
     d00:	10 82       	st	Z, r1
     d02:	11 82       	std	Z+1, r1	; 0x01
     d04:	f5 01       	movw	r30, r10
     d06:	e4 53       	subi	r30, 0x34	; 52
     d08:	ff 4d       	sbci	r31, 0xDF	; 223
     d0a:	10 82       	st	Z, r1
     d0c:	63 01       	movw	r12, r6
     d0e:	2d ef       	ldi	r18, 0xFD	; 253
     d10:	d2 1a       	sub	r13, r18
     d12:	ee 24       	eor	r14, r14
     d14:	d7 fc       	sbrc	r13, 7
     d16:	e0 94       	com	r14
     d18:	fe 2c       	mov	r15, r14
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	c1 d2       	rcall	.+1410   	; 0x12a2 <WIZCHIP_READ>
     d20:	88 23       	and	r24, r24
     d22:	d9 f3       	breq	.-10     	; 0xd1a <socket+0x174>
     d24:	89 2d       	mov	r24, r9
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <socket+0x18c>
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <socket+0x18c>
     d2c:	8b ef       	ldi	r24, 0xFB	; 251
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <socket+0x18c>
     d30:	8a ef       	ldi	r24, 0xFA	; 250
     d32:	0f 90       	pop	r0
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	8f 90       	pop	r8
     d4c:	7f 90       	pop	r7
     d4e:	6f 90       	pop	r6
     d50:	08 95       	ret

00000d52 <listen>:
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	cf 93       	push	r28
     d64:	c8 2f       	mov	r28, r24
     d66:	89 30       	cpi	r24, 0x09	; 9
     d68:	08 f0       	brcs	.+2      	; 0xd6c <listen+0x1a>
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <listen+0x98>
     d6c:	84 e0       	ldi	r24, 0x04	; 4
     d6e:	c8 9f       	mul	r28, r24
     d70:	60 01       	movw	r12, r0
     d72:	11 24       	eor	r1, r1
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	c8 1a       	sub	r12, r24
     d78:	d8 0a       	sbc	r13, r24
     d7a:	43 e0       	ldi	r20, 0x03	; 3
     d7c:	cc 0c       	add	r12, r12
     d7e:	dd 1c       	adc	r13, r13
     d80:	4a 95       	dec	r20
     d82:	e1 f7       	brne	.-8      	; 0xd7c <listen+0x2a>
     d84:	b6 01       	movw	r22, r12
     d86:	88 27       	eor	r24, r24
     d88:	77 fd       	sbrc	r23, 7
     d8a:	80 95       	com	r24
     d8c:	98 2f       	mov	r25, r24
     d8e:	89 d2       	rcall	.+1298   	; 0x12a2 <WIZCHIP_READ>
     d90:	8f 70       	andi	r24, 0x0F	; 15
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	61 f5       	brne	.+88     	; 0xdee <listen+0x9c>
     d96:	46 01       	movw	r8, r12
     d98:	8d ef       	ldi	r24, 0xFD	; 253
     d9a:	98 1a       	sub	r9, r24
     d9c:	aa 24       	eor	r10, r10
     d9e:	97 fc       	sbrc	r9, 7
     da0:	a0 94       	com	r10
     da2:	ba 2c       	mov	r11, r10
     da4:	c5 01       	movw	r24, r10
     da6:	b4 01       	movw	r22, r8
     da8:	7c d2       	rcall	.+1272   	; 0x12a2 <WIZCHIP_READ>
     daa:	83 31       	cpi	r24, 0x13	; 19
     dac:	11 f5       	brne	.+68     	; 0xdf2 <listen+0xa0>
     dae:	d3 94       	inc	r13
     db0:	ee 24       	eor	r14, r14
     db2:	d7 fc       	sbrc	r13, 7
     db4:	e0 94       	com	r14
     db6:	fe 2c       	mov	r15, r14
     db8:	42 e0       	ldi	r20, 0x02	; 2
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	b2 d2       	rcall	.+1380   	; 0x1324 <WIZCHIP_WRITE>
     dc0:	c7 01       	movw	r24, r14
     dc2:	b6 01       	movw	r22, r12
     dc4:	6e d2       	rcall	.+1244   	; 0x12a2 <WIZCHIP_READ>
     dc6:	81 11       	cpse	r24, r1
     dc8:	fb cf       	rjmp	.-10     	; 0xdc0 <listen+0x6e>
     dca:	c5 01       	movw	r24, r10
     dcc:	b4 01       	movw	r22, r8
     dce:	69 d2       	rcall	.+1234   	; 0x12a2 <WIZCHIP_READ>
     dd0:	84 31       	cpi	r24, 0x14	; 20
     dd2:	49 f0       	breq	.+18     	; 0xde6 <listen+0x94>
     dd4:	c7 01       	movw	r24, r14
     dd6:	b6 01       	movw	r22, r12
     dd8:	64 d2       	rcall	.+1224   	; 0x12a2 <WIZCHIP_READ>
     dda:	81 11       	cpse	r24, r1
     ddc:	f6 cf       	rjmp	.-20     	; 0xdca <listen+0x78>
     dde:	8c 2f       	mov	r24, r28
     de0:	7c de       	rcall	.-776    	; 0xada <close>
     de2:	8c ef       	ldi	r24, 0xFC	; 252
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <listen+0xa2>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <listen+0xa2>
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <listen+0xa2>
     dee:	8b ef       	ldi	r24, 0xFB	; 251
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <listen+0xa2>
     df2:	8d ef       	ldi	r24, 0xFD	; 253
     df4:	cf 91       	pop	r28
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	08 95       	ret

00000e08 <disconnect>:

int8_t disconnect(uint8_t sn)
{
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	cf 93       	push	r28
     e1a:	c8 2f       	mov	r28, r24
   CHECK_SOCKNUM();
     e1c:	89 30       	cpi	r24, 0x09	; 9
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <disconnect+0x1a>
     e20:	5f c0       	rjmp	.+190    	; 0xee0 <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	c8 9f       	mul	r28, r24
     e26:	40 01       	movw	r8, r0
     e28:	11 24       	eor	r1, r1
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	88 1a       	sub	r8, r24
     e2e:	98 0a       	sbc	r9, r24
     e30:	63 e0       	ldi	r22, 0x03	; 3
     e32:	88 0c       	add	r8, r8
     e34:	99 1c       	adc	r9, r9
     e36:	6a 95       	dec	r22
     e38:	e1 f7       	brne	.-8      	; 0xe32 <disconnect+0x2a>
     e3a:	b4 01       	movw	r22, r8
     e3c:	88 27       	eor	r24, r24
     e3e:	77 fd       	sbrc	r23, 7
     e40:	80 95       	com	r24
     e42:	98 2f       	mov	r25, r24
     e44:	2e d2       	rcall	.+1116   	; 0x12a2 <WIZCHIP_READ>
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <disconnect+0x46>
     e4c:	4b c0       	rjmp	.+150    	; 0xee4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
     e4e:	64 01       	movw	r12, r8
     e50:	d3 94       	inc	r13
     e52:	ee 24       	eor	r14, r14
     e54:	d7 fc       	sbrc	r13, 7
     e56:	e0 94       	com	r14
     e58:	fe 2c       	mov	r15, r14
     e5a:	48 e0       	ldi	r20, 0x08	; 8
     e5c:	c7 01       	movw	r24, r14
     e5e:	b6 01       	movw	r22, r12
     e60:	61 d2       	rcall	.+1218   	; 0x1324 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	1d d2       	rcall	.+1082   	; 0x12a2 <WIZCHIP_READ>
     e68:	81 11       	cpse	r24, r1
     e6a:	fb cf       	rjmp	.-10     	; 0xe62 <disconnect+0x5a>
	sock_is_sending &= ~(1<<sn);
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0c 2e       	mov	r0, r28
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <disconnect+0x70>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <disconnect+0x6c>
     e7c:	ac 01       	movw	r20, r24
     e7e:	40 95       	com	r20
     e80:	50 95       	com	r21
     e82:	20 91 e4 20 	lds	r18, 0x20E4
     e86:	30 91 e5 20 	lds	r19, 0x20E5
     e8a:	24 23       	and	r18, r20
     e8c:	35 23       	and	r19, r21
     e8e:	20 93 e4 20 	sts	0x20E4, r18
     e92:	30 93 e5 20 	sts	0x20E5, r19
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     e96:	20 91 e6 20 	lds	r18, 0x20E6
     e9a:	30 91 e7 20 	lds	r19, 0x20E7
     e9e:	28 23       	and	r18, r24
     ea0:	39 23       	and	r19, r25
     ea2:	23 2b       	or	r18, r19
     ea4:	09 f5       	brne	.+66     	; 0xee8 <disconnect+0xe0>
	while(getSn_SR(sn) != SOCK_CLOSED)
     ea6:	64 01       	movw	r12, r8
     ea8:	8d ef       	ldi	r24, 0xFD	; 253
     eaa:	d8 1a       	sub	r13, r24
     eac:	ee 24       	eor	r14, r14
     eae:	d7 fc       	sbrc	r13, 7
     eb0:	e0 94       	com	r14
     eb2:	fe 2c       	mov	r15, r14
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     eb4:	8e ef       	ldi	r24, 0xFE	; 254
     eb6:	98 1a       	sub	r9, r24
     eb8:	aa 24       	eor	r10, r10
     eba:	97 fc       	sbrc	r9, 7
     ebc:	a0 94       	com	r10
     ebe:	ba 2c       	mov	r11, r10
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	ee d1       	rcall	.+988    	; 0x12a2 <WIZCHIP_READ>
     ec6:	88 23       	and	r24, r24
     ec8:	49 f0       	breq	.+18     	; 0xedc <disconnect+0xd4>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     eca:	c5 01       	movw	r24, r10
     ecc:	b4 01       	movw	r22, r8
     ece:	e9 d1       	rcall	.+978    	; 0x12a2 <WIZCHIP_READ>
     ed0:	83 ff       	sbrs	r24, 3
     ed2:	f6 cf       	rjmp	.-20     	; 0xec0 <disconnect+0xb8>
	   {
	      close(sn);
     ed4:	8c 2f       	mov	r24, r28
     ed6:	01 de       	rcall	.-1022   	; 0xada <close>
	      return SOCKERR_TIMEOUT;
     ed8:	83 ef       	ldi	r24, 0xF3	; 243
     eda:	07 c0       	rjmp	.+14     	; 0xeea <disconnect+0xe2>
	   }
	}
	return SOCK_OK;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	05 c0       	rjmp	.+10     	; 0xeea <disconnect+0xe2>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <disconnect+0xe2>
   CHECK_SOCKMODE(Sn_MR_TCP);
     ee4:	8b ef       	ldi	r24, 0xFB	; 251
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <disconnect+0xe2>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     eea:	cf 91       	pop	r28
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	af 90       	pop	r10
     ef8:	9f 90       	pop	r9
     efa:	8f 90       	pop	r8
     efc:	08 95       	ret

00000efe <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     efe:	2f 92       	push	r2
     f00:	3f 92       	push	r3
     f02:	4f 92       	push	r4
     f04:	5f 92       	push	r5
     f06:	6f 92       	push	r6
     f08:	7f 92       	push	r7
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	1f 92       	push	r1
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	1b 01       	movw	r2, r22
     f2c:	7a 01       	movw	r14, r20
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     f2e:	89 30       	cpi	r24, 0x09	; 9
     f30:	08 f0       	brcs	.+2      	; 0xf34 <send+0x36>
     f32:	af c0       	rjmp	.+350    	; 0x1092 <send+0x194>
   CHECK_SOCKMODE(Sn_MR_TCP);
     f34:	94 e0       	ldi	r25, 0x04	; 4
     f36:	89 9f       	mul	r24, r25
     f38:	60 01       	movw	r12, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	ef ef       	ldi	r30, 0xFF	; 255
     f3e:	ce 1a       	sub	r12, r30
     f40:	de 0a       	sbc	r13, r30
     f42:	73 e0       	ldi	r23, 0x03	; 3
     f44:	cc 0c       	add	r12, r12
     f46:	dd 1c       	adc	r13, r13
     f48:	7a 95       	dec	r23
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <send+0x46>
     f4c:	b6 01       	movw	r22, r12
     f4e:	88 27       	eor	r24, r24
     f50:	77 fd       	sbrc	r23, 7
     f52:	80 95       	com	r24
     f54:	98 2f       	mov	r25, r24
     f56:	a5 d1       	rcall	.+842    	; 0x12a2 <WIZCHIP_READ>
     f58:	8f 70       	andi	r24, 0x0F	; 15
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	09 f0       	breq	.+2      	; 0xf60 <send+0x62>
     f5e:	9d c0       	rjmp	.+314    	; 0x109a <send+0x19c>
   CHECK_SOCKDATA();
     f60:	e1 14       	cp	r14, r1
     f62:	f1 04       	cpc	r15, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <send+0x6a>
     f66:	9e c0       	rjmp	.+316    	; 0x10a4 <send+0x1a6>
   tmp = getSn_SR(sn);
     f68:	26 01       	movw	r4, r12
     f6a:	fd ef       	ldi	r31, 0xFD	; 253
     f6c:	5f 1a       	sub	r5, r31
     f6e:	66 24       	eor	r6, r6
     f70:	57 fc       	sbrc	r5, 7
     f72:	60 94       	com	r6
     f74:	76 2c       	mov	r7, r6
     f76:	c3 01       	movw	r24, r6
     f78:	b2 01       	movw	r22, r4
     f7a:	93 d1       	rcall	.+806    	; 0x12a2 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     f7c:	87 31       	cpi	r24, 0x17	; 23
     f7e:	19 f0       	breq	.+6      	; 0xf86 <send+0x88>
     f80:	8c 31       	cpi	r24, 0x1C	; 28
     f82:	09 f0       	breq	.+2      	; 0xf86 <send+0x88>
     f84:	94 c0       	rjmp	.+296    	; 0x10ae <send+0x1b0>
   if( sock_is_sending & (1<<sn) )
     f86:	01 e0       	ldi	r16, 0x01	; 1
     f88:	10 e0       	ldi	r17, 0x00	; 0
     f8a:	09 80       	ldd	r0, Y+1	; 0x01
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <send+0x94>
     f8e:	00 0f       	add	r16, r16
     f90:	11 1f       	adc	r17, r17
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <send+0x90>
     f96:	80 91 e4 20 	lds	r24, 0x20E4
     f9a:	90 91 e5 20 	lds	r25, 0x20E5
     f9e:	80 23       	and	r24, r16
     fa0:	91 23       	and	r25, r17
     fa2:	89 2b       	or	r24, r25
     fa4:	59 f1       	breq	.+86     	; 0xffc <send+0xfe>
   {
      tmp = getSn_IR(sn);
     fa6:	c6 01       	movw	r24, r12
     fa8:	9e 5f       	subi	r25, 0xFE	; 254
     faa:	4c 01       	movw	r8, r24
     fac:	aa 24       	eor	r10, r10
     fae:	97 fc       	sbrc	r9, 7
     fb0:	a0 94       	com	r10
     fb2:	ba 2c       	mov	r11, r10
     fb4:	c5 01       	movw	r24, r10
     fb6:	b4 01       	movw	r22, r8
     fb8:	74 d1       	rcall	.+744    	; 0x12a2 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     fba:	84 ff       	sbrs	r24, 4
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <send+0xe4>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     fbe:	40 e1       	ldi	r20, 0x10	; 16
     fc0:	c5 01       	movw	r24, r10
     fc2:	b4 01       	movw	r22, r8
     fc4:	af d1       	rcall	.+862    	; 0x1324 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
     fc6:	80 91 e4 20 	lds	r24, 0x20E4
     fca:	90 91 e5 20 	lds	r25, 0x20E5
     fce:	98 01       	movw	r18, r16
     fd0:	20 95       	com	r18
     fd2:	30 95       	com	r19
     fd4:	82 23       	and	r24, r18
     fd6:	93 23       	and	r25, r19
     fd8:	80 93 e4 20 	sts	0x20E4, r24
     fdc:	90 93 e5 20 	sts	0x20E5, r25
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
     fe2:	83 fd       	sbrc	r24, 3
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <send+0xf0>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	cb 01       	movw	r24, r22
     fec:	64 c0       	rjmp	.+200    	; 0x10b6 <send+0x1b8>
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	74 dd       	rcall	.-1304   	; 0xada <close>
         return SOCKERR_TIMEOUT;
     ff2:	63 ef       	ldi	r22, 0xF3	; 243
     ff4:	7f ef       	ldi	r23, 0xFF	; 255
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	5d c0       	rjmp	.+186    	; 0x10b6 <send+0x1b8>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
     ffc:	b6 01       	movw	r22, r12
     ffe:	71 5e       	subi	r23, 0xE1	; 225
    1000:	88 27       	eor	r24, r24
    1002:	77 fd       	sbrc	r23, 7
    1004:	80 95       	com	r24
    1006:	98 2f       	mov	r25, r24
    1008:	4c d1       	rcall	.+664    	; 0x12a2 <WIZCHIP_READ>
    100a:	a1 2c       	mov	r10, r1
    100c:	b8 2e       	mov	r11, r24
    100e:	bb 0c       	add	r11, r11
    1010:	bb 0c       	add	r11, r11
    1012:	ea 14       	cp	r14, r10
    1014:	fb 04       	cpc	r15, r11
    1016:	08 f4       	brcc	.+2      	; 0x101a <send+0x11c>
    1018:	57 01       	movw	r10, r14
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	6d d2       	rcall	.+1242   	; 0x14f8 <getSn_TX_FSR>
    101e:	7c 01       	movw	r14, r24
      tmp = getSn_SR(sn);
    1020:	c3 01       	movw	r24, r6
    1022:	b2 01       	movw	r22, r4
    1024:	3e d1       	rcall	.+636    	; 0x12a2 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    1026:	87 31       	cpi	r24, 0x17	; 23
    1028:	29 f0       	breq	.+10     	; 0x1034 <send+0x136>
    102a:	8c 31       	cpi	r24, 0x1C	; 28
    102c:	19 f0       	breq	.+6      	; 0x1034 <send+0x136>
      {
         close(sn);
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	54 dd       	rcall	.-1368   	; 0xada <close>
    1032:	3d c0       	rjmp	.+122    	; 0x10ae <send+0x1b0>
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    1034:	80 91 e6 20 	lds	r24, 0x20E6
    1038:	90 91 e7 20 	lds	r25, 0x20E7
    103c:	80 23       	and	r24, r16
    103e:	91 23       	and	r25, r17
    1040:	89 2b       	or	r24, r25
    1042:	21 f0       	breq	.+8      	; 0x104c <send+0x14e>
    1044:	ea 14       	cp	r14, r10
    1046:	fb 04       	cpc	r15, r11
    1048:	20 f4       	brcc	.+8      	; 0x1052 <send+0x154>
    104a:	cd cf       	rjmp	.-102    	; 0xfe6 <send+0xe8>
      if(len <= freesize) break;
    104c:	ea 14       	cp	r14, r10
    104e:	fb 04       	cpc	r15, r11
    1050:	20 f3       	brcs	.-56     	; 0x101a <send+0x11c>
   }
   wiz_send_data(sn, buf, len);
    1052:	a5 01       	movw	r20, r10
    1054:	b1 01       	movw	r22, r2
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	f1 d2       	rcall	.+1506   	; 0x163c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
    105a:	d3 94       	inc	r13
    105c:	ee 24       	eor	r14, r14
    105e:	d7 fc       	sbrc	r13, 7
    1060:	e0 94       	com	r14
    1062:	fe 2c       	mov	r15, r14
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	c7 01       	movw	r24, r14
    1068:	b6 01       	movw	r22, r12
    106a:	5c d1       	rcall	.+696    	; 0x1324 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
    106c:	c7 01       	movw	r24, r14
    106e:	b6 01       	movw	r22, r12
    1070:	18 d1       	rcall	.+560    	; 0x12a2 <WIZCHIP_READ>
    1072:	81 11       	cpse	r24, r1
    1074:	fb cf       	rjmp	.-10     	; 0x106c <send+0x16e>
   sock_is_sending |= (1 << sn);
    1076:	80 91 e4 20 	lds	r24, 0x20E4
    107a:	90 91 e5 20 	lds	r25, 0x20E5
    107e:	80 2b       	or	r24, r16
    1080:	91 2b       	or	r25, r17
    1082:	80 93 e4 20 	sts	0x20E4, r24
    1086:	90 93 e5 20 	sts	0x20E5, r25
   return len;
    108a:	b5 01       	movw	r22, r10
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	12 c0       	rjmp	.+36     	; 0x10b6 <send+0x1b8>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    1092:	6f ef       	ldi	r22, 0xFF	; 255
    1094:	7f ef       	ldi	r23, 0xFF	; 255
    1096:	cb 01       	movw	r24, r22
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <send+0x1b8>
   CHECK_SOCKMODE(Sn_MR_TCP);
    109a:	6b ef       	ldi	r22, 0xFB	; 251
    109c:	7f ef       	ldi	r23, 0xFF	; 255
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	09 c0       	rjmp	.+18     	; 0x10b6 <send+0x1b8>
   CHECK_SOCKDATA();
    10a4:	62 ef       	ldi	r22, 0xF2	; 242
    10a6:	7f ef       	ldi	r23, 0xFF	; 255
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <send+0x1b8>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    10ae:	69 ef       	ldi	r22, 0xF9	; 249
    10b0:	7f ef       	ldi	r23, 0xFF	; 255
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
   setSn_CR(sn,Sn_CR_SEND);
   /* wait to process the command... */
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   return len;
}
    10b6:	0f 90       	pop	r0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	bf 90       	pop	r11
    10ca:	af 90       	pop	r10
    10cc:	9f 90       	pop	r9
    10ce:	8f 90       	pop	r8
    10d0:	7f 90       	pop	r7
    10d2:	6f 90       	pop	r6
    10d4:	5f 90       	pop	r5
    10d6:	4f 90       	pop	r4
    10d8:	3f 90       	pop	r3
    10da:	2f 90       	pop	r2
    10dc:	08 95       	ret

000010de <recv>:

int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    10de:	2f 92       	push	r2
    10e0:	3f 92       	push	r3
    10e2:	4f 92       	push	r4
    10e4:	5f 92       	push	r5
    10e6:	6f 92       	push	r6
    10e8:	7f 92       	push	r7
    10ea:	8f 92       	push	r8
    10ec:	9f 92       	push	r9
    10ee:	af 92       	push	r10
    10f0:	bf 92       	push	r11
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	26 97       	sbiw	r28, 0x06	; 6
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	98 2e       	mov	r9, r24
    110e:	69 83       	std	Y+1, r22	; 0x01
    1110:	7a 83       	std	Y+2, r23	; 0x02
    1112:	1a 01       	movw	r2, r20
   uint8_t  tmp = 0;
   uint16_t recvsize = 0;
   CHECK_SOCKNUM();
    1114:	28 e0       	ldi	r18, 0x08	; 8
    1116:	28 17       	cp	r18, r24
    1118:	08 f4       	brcc	.+2      	; 0x111c <recv+0x3e>
    111a:	a0 c0       	rjmp	.+320    	; 0x125c <recv+0x17e>
   CHECK_SOCKMODE(Sn_MR_TCP);
    111c:	84 e0       	ldi	r24, 0x04	; 4
    111e:	98 9e       	mul	r9, r24
    1120:	90 01       	movw	r18, r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 5f       	subi	r18, 0xFF	; 255
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	a3 e0       	ldi	r26, 0x03	; 3
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	aa 95       	dec	r26
    1130:	e1 f7       	brne	.-8      	; 0x112a <recv+0x4c>
    1132:	2d 83       	std	Y+5, r18	; 0x05
    1134:	3e 83       	std	Y+6, r19	; 0x06
    1136:	b9 01       	movw	r22, r18
    1138:	88 27       	eor	r24, r24
    113a:	77 fd       	sbrc	r23, 7
    113c:	80 95       	com	r24
    113e:	98 2f       	mov	r25, r24
    1140:	b0 d0       	rcall	.+352    	; 0x12a2 <WIZCHIP_READ>
    1142:	8f 70       	andi	r24, 0x0F	; 15
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	09 f0       	breq	.+2      	; 0x114a <recv+0x6c>
    1148:	8d c0       	rjmp	.+282    	; 0x1264 <recv+0x186>
   CHECK_SOCKDATA();
    114a:	21 14       	cp	r2, r1
    114c:	31 04       	cpc	r3, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <recv+0x74>
    1150:	8e c0       	rjmp	.+284    	; 0x126e <recv+0x190>
   
   recvsize = getSn_RxMAX(sn);
    1152:	6d 81       	ldd	r22, Y+5	; 0x05
    1154:	7e 81       	ldd	r23, Y+6	; 0x06
    1156:	72 5e       	subi	r23, 0xE2	; 226
    1158:	88 27       	eor	r24, r24
    115a:	77 fd       	sbrc	r23, 7
    115c:	80 95       	com	r24
    115e:	98 2f       	mov	r25, r24
    1160:	a0 d0       	rcall	.+320    	; 0x12a2 <WIZCHIP_READ>
    1162:	88 2e       	mov	r8, r24
         {
            close(sn);
            return SOCKERR_SOCKSTATUS;
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    1164:	aa 24       	eor	r10, r10
    1166:	a3 94       	inc	r10
    1168:	b1 2c       	mov	r11, r1
    116a:	09 2c       	mov	r0, r9
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <recv+0x94>
    116e:	aa 0c       	add	r10, r10
    1170:	bb 1c       	adc	r11, r11
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <recv+0x90>
   recvsize = getSn_RxMAX(sn);
   if(recvsize < len) len = recvsize;
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
      tmp = getSn_SR(sn);
    1176:	cd 80       	ldd	r12, Y+5	; 0x05
    1178:	de 80       	ldd	r13, Y+6	; 0x06
    117a:	9d ef       	ldi	r25, 0xFD	; 253
    117c:	d9 1a       	sub	r13, r25
    117e:	ee 24       	eor	r14, r14
    1180:	d7 fc       	sbrc	r13, 7
    1182:	e0 94       	com	r14
    1184:	fe 2c       	mov	r15, r14
      if (tmp != SOCK_ESTABLISHED)
      {
         if(tmp == SOCK_CLOSE_WAIT)
         {
            if(recvsize != 0) break;
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    1186:	4d 80       	ldd	r4, Y+5	; 0x05
    1188:	5e 80       	ldd	r5, Y+6	; 0x06
    118a:	e1 ee       	ldi	r30, 0xE1	; 225
    118c:	5e 1a       	sub	r5, r30
    118e:	66 24       	eor	r6, r6
    1190:	57 fc       	sbrc	r5, 7
    1192:	60 94       	com	r6
    1194:	76 2c       	mov	r7, r6
   
   recvsize = getSn_RxMAX(sn);
   if(recvsize < len) len = recvsize;
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
    1196:	89 2d       	mov	r24, r9
    1198:	00 d2       	rcall	.+1024   	; 0x159a <getSn_RX_RSR>
    119a:	8c 01       	movw	r16, r24
      tmp = getSn_SR(sn);
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	80 d0       	rcall	.+256    	; 0x12a2 <WIZCHIP_READ>
      if (tmp != SOCK_ESTABLISHED)
    11a2:	87 31       	cpi	r24, 0x17	; 23
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <recv+0xca>
    11a6:	3c c0       	rjmp	.+120    	; 0x1220 <recv+0x142>
      {
         if(tmp == SOCK_CLOSE_WAIT)
    11a8:	8c 31       	cpi	r24, 0x1C	; 28
    11aa:	99 f5       	brne	.+102    	; 0x1212 <recv+0x134>
         {
            if(recvsize != 0) break;
    11ac:	01 15       	cp	r16, r1
    11ae:	11 05       	cpc	r17, r1
    11b0:	e9 f0       	breq	.+58     	; 0x11ec <recv+0x10e>
    11b2:	e1 2c       	mov	r14, r1
    11b4:	f8 2c       	mov	r15, r8
    11b6:	ff 0c       	add	r15, r15
    11b8:	ff 0c       	add	r15, r15
    11ba:	2e 14       	cp	r2, r14
    11bc:	3f 04       	cpc	r3, r15
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <recv+0xe4>
    11c0:	71 01       	movw	r14, r2
    11c2:	0e 15       	cp	r16, r14
    11c4:	1f 05       	cpc	r17, r15
    11c6:	08 f4       	brcc	.+2      	; 0x11ca <recv+0xec>
    11c8:	78 01       	movw	r14, r16
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
      if(recvsize != 0) break;
   };
   if(recvsize < len) len = recvsize;
   wiz_recv_data(sn, buf, len);
    11ca:	a7 01       	movw	r20, r14
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	89 2d       	mov	r24, r9
    11d2:	b6 d2       	rcall	.+1388   	; 0x1740 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
    11d4:	8d 80       	ldd	r8, Y+5	; 0x05
    11d6:	9e 80       	ldd	r9, Y+6	; 0x06
    11d8:	93 94       	inc	r9
    11da:	aa 24       	eor	r10, r10
    11dc:	97 fc       	sbrc	r9, 7
    11de:	a0 94       	com	r10
    11e0:	ba 2c       	mov	r11, r10
    11e2:	40 e4       	ldi	r20, 0x40	; 64
    11e4:	c5 01       	movw	r24, r10
    11e6:	b4 01       	movw	r22, r8
    11e8:	9d d0       	rcall	.+314    	; 0x1324 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    11ea:	2f c0       	rjmp	.+94     	; 0x124a <recv+0x16c>
      if (tmp != SOCK_ESTABLISHED)
      {
         if(tmp == SOCK_CLOSE_WAIT)
         {
            if(recvsize != 0) break;
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    11ec:	89 2d       	mov	r24, r9
    11ee:	84 d1       	rcall	.+776    	; 0x14f8 <getSn_TX_FSR>
    11f0:	ac 01       	movw	r20, r24
    11f2:	c3 01       	movw	r24, r6
    11f4:	b2 01       	movw	r22, r4
    11f6:	4b 83       	std	Y+3, r20	; 0x03
    11f8:	5c 83       	std	Y+4, r21	; 0x04
    11fa:	53 d0       	rcall	.+166    	; 0x12a2 <WIZCHIP_READ>
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	32 2f       	mov	r19, r18
    1202:	22 27       	eor	r18, r18
    1204:	33 0f       	add	r19, r19
    1206:	33 0f       	add	r19, r19
    1208:	4b 81       	ldd	r20, Y+3	; 0x03
    120a:	5c 81       	ldd	r21, Y+4	; 0x04
    120c:	42 17       	cp	r20, r18
    120e:	53 07       	cpc	r21, r19
    1210:	39 f4       	brne	.+14     	; 0x1220 <recv+0x142>
            {
               close(sn);
    1212:	89 2d       	mov	r24, r9
    1214:	62 dc       	rcall	.-1852   	; 0xada <close>
               return SOCKERR_SOCKSTATUS;
    1216:	69 ef       	ldi	r22, 0xF9	; 249
    1218:	7f ef       	ldi	r23, 0xFF	; 255
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	9f ef       	ldi	r25, 0xFF	; 255
    121e:	2b c0       	rjmp	.+86     	; 0x1276 <recv+0x198>
         {
            close(sn);
            return SOCKERR_SOCKSTATUS;
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    1220:	20 91 e6 20 	lds	r18, 0x20E6
    1224:	30 91 e7 20 	lds	r19, 0x20E7
    1228:	2a 21       	and	r18, r10
    122a:	3b 21       	and	r19, r11
    122c:	23 2b       	or	r18, r19
    122e:	41 f0       	breq	.+16     	; 0x1240 <recv+0x162>
    1230:	01 15       	cp	r16, r1
    1232:	11 05       	cpc	r17, r1
    1234:	09 f0       	breq	.+2      	; 0x1238 <recv+0x15a>
    1236:	bd cf       	rjmp	.-134    	; 0x11b2 <recv+0xd4>
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	cb 01       	movw	r24, r22
    123e:	1b c0       	rjmp	.+54     	; 0x1276 <recv+0x198>
      if(recvsize != 0) break;
    1240:	01 15       	cp	r16, r1
    1242:	11 05       	cpc	r17, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <recv+0x16a>
    1246:	a7 cf       	rjmp	.-178    	; 0x1196 <recv+0xb8>
    1248:	b4 cf       	rjmp	.-152    	; 0x11b2 <recv+0xd4>
   };
   if(recvsize < len) len = recvsize;
   wiz_recv_data(sn, buf, len);
   setSn_CR(sn,Sn_CR_RECV);
   while(getSn_CR(sn));
    124a:	c5 01       	movw	r24, r10
    124c:	b4 01       	movw	r22, r8
    124e:	29 d0       	rcall	.+82     	; 0x12a2 <WIZCHIP_READ>
    1250:	81 11       	cpse	r24, r1
    1252:	fb cf       	rjmp	.-10     	; 0x124a <recv+0x16c>
   return len;
    1254:	b7 01       	movw	r22, r14
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <recv+0x198>

int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t  tmp = 0;
   uint16_t recvsize = 0;
   CHECK_SOCKNUM();
    125c:	6f ef       	ldi	r22, 0xFF	; 255
    125e:	7f ef       	ldi	r23, 0xFF	; 255
    1260:	cb 01       	movw	r24, r22
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <recv+0x198>
   CHECK_SOCKMODE(Sn_MR_TCP);
    1264:	6b ef       	ldi	r22, 0xFB	; 251
    1266:	7f ef       	ldi	r23, 0xFF	; 255
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	9f ef       	ldi	r25, 0xFF	; 255
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <recv+0x198>
   CHECK_SOCKDATA();
    126e:	62 ef       	ldi	r22, 0xF2	; 242
    1270:	7f ef       	ldi	r23, 0xFF	; 255
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	9f ef       	ldi	r25, 0xFF	; 255
   if(recvsize < len) len = recvsize;
   wiz_recv_data(sn, buf, len);
   setSn_CR(sn,Sn_CR_RECV);
   while(getSn_CR(sn));
   return len;
}
    1276:	26 96       	adiw	r28, 0x06	; 6
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	9f 90       	pop	r9
    1292:	8f 90       	pop	r8
    1294:	7f 90       	pop	r7
    1296:	6f 90       	pop	r6
    1298:	5f 90       	pop	r5
    129a:	4f 90       	pop	r4
    129c:	3f 90       	pop	r3
    129e:	2f 90       	pop	r2
    12a0:	08 95       	ret

000012a2 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <WIZCHIP_READ+0xa>
    12ac:	1f 92       	push	r1
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
    12b2:	e0 91 0a 20 	lds	r30, 0x200A
    12b6:	f0 91 0b 20 	lds	r31, 0x200B
    12ba:	6a 83       	std	Y+2, r22	; 0x02
    12bc:	79 83       	std	Y+1, r23	; 0x01
    12be:	8b 83       	std	Y+3, r24	; 0x03
    12c0:	09 95       	icall
   WIZCHIP.CS._select();
    12c2:	e0 91 0e 20 	lds	r30, 0x200E
    12c6:	f0 91 0f 20 	lds	r31, 0x200F
    12ca:	09 95       	icall
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    12cc:	04 e1       	ldi	r16, 0x14	; 20
    12ce:	10 e2       	ldi	r17, 0x20	; 32
    12d0:	d8 01       	movw	r26, r16
    12d2:	ed 91       	ld	r30, X+
    12d4:	fc 91       	ld	r31, X
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	09 95       	icall
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    12da:	d8 01       	movw	r26, r16
    12dc:	ed 91       	ld	r30, X+
    12de:	fc 91       	ld	r31, X
    12e0:	79 81       	ldd	r23, Y+1	; 0x01
    12e2:	87 2f       	mov	r24, r23
    12e4:	09 95       	icall
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    12e6:	d8 01       	movw	r26, r16
    12e8:	ed 91       	ld	r30, X+
    12ea:	fc 91       	ld	r31, X
    12ec:	6a 81       	ldd	r22, Y+2	; 0x02
    12ee:	86 2f       	mov	r24, r22
    12f0:	09 95       	icall
   ret = WIZCHIP.IF.SPI._read_byte();
    12f2:	e0 91 12 20 	lds	r30, 0x2012
    12f6:	f0 91 13 20 	lds	r31, 0x2013
    12fa:	09 95       	icall
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"   
#endif

   WIZCHIP.CS._deselect();
    12fc:	e0 91 10 20 	lds	r30, 0x2010
    1300:	f0 91 11 20 	lds	r31, 0x2011
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
    1308:	e0 91 0c 20 	lds	r30, 0x200C
    130c:	f0 91 0d 20 	lds	r31, 0x200D
    1310:	09 95       	icall
   return ret;
}
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	23 96       	adiw	r28, 0x03	; 3
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <WIZCHIP_WRITE>:


void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	00 d0       	rcall	.+0      	; 0x132e <WIZCHIP_WRITE+0xa>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <WIZCHIP_WRITE+0xc>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    WIZCHIP_CRITICAL_ENTER();
    1334:	e0 91 0a 20 	lds	r30, 0x200A
    1338:	f0 91 0b 20 	lds	r31, 0x200B
    133c:	4c 83       	std	Y+4, r20	; 0x04
    133e:	6b 83       	std	Y+3, r22	; 0x03
    1340:	7a 83       	std	Y+2, r23	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	09 95       	icall
    WIZCHIP.CS._select();
    1346:	e0 91 0e 20 	lds	r30, 0x200E
    134a:	f0 91 0f 20 	lds	r31, 0x200F
    134e:	09 95       	icall
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1350:	04 e1       	ldi	r16, 0x14	; 20
    1352:	10 e2       	ldi	r17, 0x20	; 32
    1354:	d8 01       	movw	r26, r16
    1356:	ed 91       	ld	r30, X+
    1358:	fc 91       	ld	r31, X
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    135e:	d8 01       	movw	r26, r16
    1360:	ed 91       	ld	r30, X+
    1362:	fc 91       	ld	r31, X
    1364:	7a 81       	ldd	r23, Y+2	; 0x02
    1366:	87 2f       	mov	r24, r23
    1368:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    136a:	d8 01       	movw	r26, r16
    136c:	ed 91       	ld	r30, X+
    136e:	fc 91       	ld	r31, X
    1370:	6b 81       	ldd	r22, Y+3	; 0x03
    1372:	86 2f       	mov	r24, r22
    1374:	84 60       	ori	r24, 0x04	; 4
    1376:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte(wb);
    1378:	d8 01       	movw	r26, r16
    137a:	ed 91       	ld	r30, X+
    137c:	fc 91       	ld	r31, X
    137e:	4c 81       	ldd	r20, Y+4	; 0x04
    1380:	84 2f       	mov	r24, r20
    1382:	09 95       	icall
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
    1384:	e0 91 10 20 	lds	r30, 0x2010
    1388:	f0 91 11 20 	lds	r31, 0x2011
    138c:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
    138e:	e0 91 0c 20 	lds	r30, 0x200C
    1392:	f0 91 0d 20 	lds	r31, 0x200D
}
    1396:	24 96       	adiw	r28, 0x04	; 4
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
    13a4:	09 94       	ijmp

000013a6 <WIZCHIP_READ_BUF>:
}


void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	25 97       	sbiw	r28, 0x05	; 5
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	89 01       	movw	r16, r18
   uint16_t i = 0;
   uint16_t j = 0;
   WIZCHIP_CRITICAL_ENTER();
    13be:	e0 91 0a 20 	lds	r30, 0x200A
    13c2:	f0 91 0b 20 	lds	r31, 0x200B
    13c6:	4c 83       	std	Y+4, r20	; 0x04
    13c8:	5d 83       	std	Y+5, r21	; 0x05
    13ca:	6b 83       	std	Y+3, r22	; 0x03
    13cc:	7a 83       	std	Y+2, r23	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	09 95       	icall
   WIZCHIP.CS._select();
    13d2:	e0 91 0e 20 	lds	r30, 0x200E
    13d6:	f0 91 0f 20 	lds	r31, 0x200F
    13da:	09 95       	icall
#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
	  //Ugly Byte access, 8Bit micros get sick by this, an even 16Bit ones don't like it
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    13dc:	e0 91 14 20 	lds	r30, 0x2014
    13e0:	f0 91 15 20 	lds	r31, 0x2015
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    13e8:	e0 91 14 20 	lds	r30, 0x2014
    13ec:	f0 91 15 20 	lds	r31, 0x2015
    13f0:	7a 81       	ldd	r23, Y+2	; 0x02
    13f2:	87 2f       	mov	r24, r23
    13f4:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    13f6:	e0 91 14 20 	lds	r30, 0x2014
    13fa:	f0 91 15 20 	lds	r31, 0x2015
    13fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1400:	86 2f       	mov	r24, r22
    1402:	09 95       	icall
    1404:	4c 81       	ldd	r20, Y+4	; 0x04
    1406:	e4 2e       	mov	r14, r20
    1408:	5d 81       	ldd	r21, Y+5	; 0x05
    140a:	f5 2e       	mov	r15, r21
    140c:	0e 0d       	add	r16, r14
    140e:	1f 1d       	adc	r17, r15
      //After address is set read datat out
	  for(i = 0; i < len; i++,j)
    1410:	e0 16       	cp	r14, r16
    1412:	f1 06       	cpc	r15, r17
    1414:	49 f0       	breq	.+18     	; 0x1428 <WIZCHIP_READ_BUF+0x82>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte(); //Enter DMA Transfer here
    1416:	e0 91 12 20 	lds	r30, 0x2012
    141a:	f0 91 13 20 	lds	r31, 0x2013
    141e:	09 95       	icall
    1420:	d7 01       	movw	r26, r14
    1422:	8d 93       	st	X+, r24
    1424:	7d 01       	movw	r14, r26
    1426:	f4 cf       	rjmp	.-24     	; 0x1410 <WIZCHIP_READ_BUF+0x6a>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
    1428:	e0 91 10 20 	lds	r30, 0x2010
    142c:	f0 91 11 20 	lds	r31, 0x2011
    1430:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
    1432:	e0 91 0c 20 	lds	r30, 0x200C
    1436:	f0 91 0d 20 	lds	r31, 0x200D
}
    143a:	25 96       	adiw	r28, 0x05	; 5
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
    144c:	09 94       	ijmp

0000144e <WIZCHIP_WRITE_BUF>:
}

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	25 97       	sbiw	r28, 0x05	; 5
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	89 01       	movw	r16, r18
   uint16_t i = 0;
   uint16_t j = 0;
   WIZCHIP_CRITICAL_ENTER();
    1466:	e0 91 0a 20 	lds	r30, 0x200A
    146a:	f0 91 0b 20 	lds	r31, 0x200B
    146e:	4c 83       	std	Y+4, r20	; 0x04
    1470:	5d 83       	std	Y+5, r21	; 0x05
    1472:	6b 83       	std	Y+3, r22	; 0x03
    1474:	7a 83       	std	Y+2, r23	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	09 95       	icall
   WIZCHIP.CS._select();
    147a:	e0 91 0e 20 	lds	r30, 0x200E
    147e:	f0 91 0f 20 	lds	r31, 0x200F
    1482:	09 95       	icall

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1484:	e0 91 14 20 	lds	r30, 0x2014
    1488:	f0 91 15 20 	lds	r31, 0x2015
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1490:	e0 91 14 20 	lds	r30, 0x2014
    1494:	f0 91 15 20 	lds	r31, 0x2015
    1498:	7a 81       	ldd	r23, Y+2	; 0x02
    149a:	87 2f       	mov	r24, r23
    149c:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    149e:	e0 91 14 20 	lds	r30, 0x2014
    14a2:	f0 91 15 20 	lds	r31, 0x2015
    14a6:	6b 81       	ldd	r22, Y+3	; 0x03
    14a8:	86 2f       	mov	r24, r22
    14aa:	84 60       	ori	r24, 0x04	; 4
    14ac:	09 95       	icall
    14ae:	4c 81       	ldd	r20, Y+4	; 0x04
    14b0:	e4 2e       	mov	r14, r20
    14b2:	5d 81       	ldd	r21, Y+5	; 0x05
    14b4:	f5 2e       	mov	r15, r21
    14b6:	0e 0d       	add	r16, r14
    14b8:	1f 1d       	adc	r17, r15
      for(i = 0; i < len; i++,j)
    14ba:	e0 16       	cp	r14, r16
    14bc:	f1 06       	cpc	r15, r17
    14be:	49 f0       	breq	.+18     	; 0x14d2 <WIZCHIP_WRITE_BUF+0x84>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    14c0:	e0 91 14 20 	lds	r30, 0x2014
    14c4:	f0 91 15 20 	lds	r31, 0x2015
    14c8:	d7 01       	movw	r26, r14
    14ca:	8d 91       	ld	r24, X+
    14cc:	7d 01       	movw	r14, r26
    14ce:	09 95       	icall
    14d0:	f4 cf       	rjmp	.-24     	; 0x14ba <WIZCHIP_WRITE_BUF+0x6c>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
    14d2:	e0 91 10 20 	lds	r30, 0x2010
    14d6:	f0 91 11 20 	lds	r31, 0x2011
    14da:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
    14dc:	e0 91 0c 20 	lds	r30, 0x200C
    14e0:	f0 91 0d 20 	lds	r31, 0x200D
}
    14e4:	25 96       	adiw	r28, 0x05	; 5
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
    14f6:	09 94       	ijmp

000014f8 <getSn_TX_FSR>:
}


uint16_t getSn_TX_FSR(uint8_t sn)
{
    14f8:	8f 92       	push	r8
    14fa:	9f 92       	push	r9
    14fc:	af 92       	push	r10
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    1510:	24 e0       	ldi	r18, 0x04	; 4
    1512:	82 9f       	mul	r24, r18
    1514:	c0 01       	movw	r24, r0
    1516:	11 24       	eor	r1, r1
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	23 e0       	ldi	r18, 0x03	; 3
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	2a 95       	dec	r18
    1522:	e1 f7       	brne	.-8      	; 0x151c <getSn_TX_FSR+0x24>
    1524:	6c 01       	movw	r12, r24
    1526:	20 ee       	ldi	r18, 0xE0	; 224
    1528:	d2 1a       	sub	r13, r18
    152a:	ee 24       	eor	r14, r14
    152c:	d7 fc       	sbrc	r13, 7
    152e:	e0 94       	com	r14
    1530:	fe 2c       	mov	r15, r14
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1532:	4c 01       	movw	r8, r24
    1534:	2f ed       	ldi	r18, 0xDF	; 223
    1536:	92 1a       	sub	r9, r18
    1538:	aa 24       	eor	r10, r10
    153a:	97 fc       	sbrc	r9, 7
    153c:	a0 94       	com	r10
    153e:	ba 2c       	mov	r11, r10
}


uint16_t getSn_TX_FSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    1540:	00 e0       	ldi	r16, 0x00	; 0
    1542:	10 e0       	ldi	r17, 0x00	; 0
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    1544:	c7 01       	movw	r24, r14
    1546:	b6 01       	movw	r22, r12
    1548:	ac de       	rcall	.-680    	; 0x12a2 <WIZCHIP_READ>
    154a:	c8 2f       	mov	r28, r24
    154c:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    154e:	dc 2f       	mov	r29, r28
    1550:	cc 27       	eor	r28, r28
    1552:	c5 01       	movw	r24, r10
    1554:	b4 01       	movw	r22, r8
    1556:	a5 de       	rcall	.-694    	; 0x12a2 <WIZCHIP_READ>
    1558:	c8 0f       	add	r28, r24
    155a:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    155c:	20 97       	sbiw	r28, 0x00	; 0
    155e:	61 f0       	breq	.+24     	; 0x1578 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1560:	c7 01       	movw	r24, r14
    1562:	b6 01       	movw	r22, r12
    1564:	9e de       	rcall	.-708    	; 0x12a2 <WIZCHIP_READ>
    1566:	08 2f       	mov	r16, r24
    1568:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    156a:	10 2f       	mov	r17, r16
    156c:	00 27       	eor	r16, r16
    156e:	c5 01       	movw	r24, r10
    1570:	b4 01       	movw	r22, r8
    1572:	97 de       	rcall	.-722    	; 0x12a2 <WIZCHIP_READ>
    1574:	08 0f       	add	r16, r24
    1576:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1578:	0c 17       	cp	r16, r28
    157a:	1d 07       	cpc	r17, r29
    157c:	19 f7       	brne	.-58     	; 0x1544 <getSn_TX_FSR+0x4c>
   return val;
}
    157e:	c8 01       	movw	r24, r16
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	9f 90       	pop	r9
    1596:	8f 90       	pop	r8
    1598:	08 95       	ret

0000159a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    159a:	8f 92       	push	r8
    159c:	9f 92       	push	r9
    159e:	af 92       	push	r10
    15a0:	bf 92       	push	r11
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    15b2:	24 e0       	ldi	r18, 0x04	; 4
    15b4:	82 9f       	mul	r24, r18
    15b6:	c0 01       	movw	r24, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	53 e0       	ldi	r21, 0x03	; 3
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	5a 95       	dec	r21
    15c4:	e1 f7       	brne	.-8      	; 0x15be <getSn_RX_RSR+0x24>
    15c6:	6c 01       	movw	r12, r24
    15c8:	2a ed       	ldi	r18, 0xDA	; 218
    15ca:	d2 1a       	sub	r13, r18
    15cc:	ee 24       	eor	r14, r14
    15ce:	d7 fc       	sbrc	r13, 7
    15d0:	e0 94       	com	r14
    15d2:	fe 2c       	mov	r15, r14
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    15d4:	4c 01       	movw	r8, r24
    15d6:	29 ed       	ldi	r18, 0xD9	; 217
    15d8:	92 1a       	sub	r9, r18
    15da:	aa 24       	eor	r10, r10
    15dc:	97 fc       	sbrc	r9, 7
    15de:	a0 94       	com	r10
    15e0:	ba 2c       	mov	r11, r10
}


uint16_t getSn_RX_RSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    15e2:	00 e0       	ldi	r16, 0x00	; 0
    15e4:	10 e0       	ldi	r17, 0x00	; 0
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	5b de       	rcall	.-842    	; 0x12a2 <WIZCHIP_READ>
    15ec:	c8 2f       	mov	r28, r24
    15ee:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    15f0:	dc 2f       	mov	r29, r28
    15f2:	cc 27       	eor	r28, r28
    15f4:	c5 01       	movw	r24, r10
    15f6:	b4 01       	movw	r22, r8
    15f8:	54 de       	rcall	.-856    	; 0x12a2 <WIZCHIP_READ>
    15fa:	c8 0f       	add	r28, r24
    15fc:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    15fe:	20 97       	sbiw	r28, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    1602:	c7 01       	movw	r24, r14
    1604:	b6 01       	movw	r22, r12
    1606:	4d de       	rcall	.-870    	; 0x12a2 <WIZCHIP_READ>
    1608:	08 2f       	mov	r16, r24
    160a:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    160c:	10 2f       	mov	r17, r16
    160e:	00 27       	eor	r16, r16
    1610:	c5 01       	movw	r24, r10
    1612:	b4 01       	movw	r22, r8
    1614:	46 de       	rcall	.-884    	; 0x12a2 <WIZCHIP_READ>
    1616:	08 0f       	add	r16, r24
    1618:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    161a:	0c 17       	cp	r16, r28
    161c:	1d 07       	cpc	r17, r29
    161e:	19 f7       	brne	.-58     	; 0x15e6 <getSn_RX_RSR+0x4c>
   return val;
}
    1620:	c8 01       	movw	r24, r16
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	af 90       	pop	r10
    1636:	9f 90       	pop	r9
    1638:	8f 90       	pop	r8
    163a:	08 95       	ret

0000163c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    163c:	4f 92       	push	r4
    163e:	5f 92       	push	r5
    1640:	6f 92       	push	r6
    1642:	7f 92       	push	r7
    1644:	8f 92       	push	r8
    1646:	9f 92       	push	r9
    1648:	af 92       	push	r10
    164a:	bf 92       	push	r11
    164c:	cf 92       	push	r12
    164e:	df 92       	push	r13
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	4b 01       	movw	r8, r22
    165e:	8a 01       	movw	r16, r20
   uint16_t ptr = 0;
   uint32_t addrsel = 0; //Replace addrsel by 24Bit union for smaler footprint and faster access!
   uint32_t offset_wiz =0;
   if(len == 0)  return;
    1660:	41 15       	cp	r20, r1
    1662:	51 05       	cpc	r21, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <wiz_send_data+0x2c>
    1666:	5b c0       	rjmp	.+182    	; 0x171e <wiz_send_data+0xe2>
   ptr = getSn_TX_WR(sn);
    1668:	24 e0       	ldi	r18, 0x04	; 4
    166a:	82 9f       	mul	r24, r18
    166c:	50 01       	movw	r10, r0
    166e:	11 24       	eor	r1, r1
    1670:	65 01       	movw	r12, r10
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	c8 1a       	sub	r12, r24
    1676:	d8 0a       	sbc	r13, r24
    1678:	63 e0       	ldi	r22, 0x03	; 3
    167a:	cc 0c       	add	r12, r12
    167c:	dd 1c       	adc	r13, r13
    167e:	6a 95       	dec	r22
    1680:	e1 f7       	brne	.-8      	; 0x167a <wiz_send_data+0x3e>
    1682:	26 01       	movw	r4, r12
    1684:	9c ed       	ldi	r25, 0xDC	; 220
    1686:	59 1a       	sub	r5, r25
    1688:	66 24       	eor	r6, r6
    168a:	57 fc       	sbrc	r5, 7
    168c:	60 94       	com	r6
    168e:	76 2c       	mov	r7, r6
    1690:	c3 01       	movw	r24, r6
    1692:	b2 01       	movw	r22, r4
    1694:	06 de       	rcall	.-1012   	; 0x12a2 <WIZCHIP_READ>
    1696:	c8 2f       	mov	r28, r24
    1698:	2b ed       	ldi	r18, 0xDB	; 219
    169a:	d2 1a       	sub	r13, r18
    169c:	ee 24       	eor	r14, r14
    169e:	d7 fc       	sbrc	r13, 7
    16a0:	e0 94       	com	r14
    16a2:	fe 2c       	mov	r15, r14
    16a4:	c7 01       	movw	r24, r14
    16a6:	b6 01       	movw	r22, r12
    16a8:	fc dd       	rcall	.-1032   	; 0x12a2 <WIZCHIP_READ>
    16aa:	d0 e0       	ldi	r29, 0x00	; 0
    16ac:	dc 2f       	mov	r29, r28
    16ae:	cc 27       	eor	r28, r28
    16b0:	c8 0f       	add	r28, r24
    16b2:	d1 1d       	adc	r29, r1
   
   //addrsel = (((uint32_t)ptr)<<8);
   addrsel = ptr;
    16b4:	ce 01       	movw	r24, r28
    16b6:	a0 e0       	ldi	r26, 0x00	; 0
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
   addrsel = addrsel <<8;
    16ba:	66 27       	eor	r22, r22
    16bc:	78 2f       	mov	r23, r24
    16be:	89 2f       	mov	r24, r25
    16c0:	9a 2f       	mov	r25, r26
   
   
   offset_wiz = (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    16c2:	22 e0       	ldi	r18, 0x02	; 2
    16c4:	a2 0e       	add	r10, r18
    16c6:	b1 1c       	adc	r11, r1
    16c8:	f3 e0       	ldi	r31, 0x03	; 3
    16ca:	aa 0c       	add	r10, r10
    16cc:	bb 1c       	adc	r11, r11
    16ce:	fa 95       	dec	r31
    16d0:	e1 f7       	brne	.-8      	; 0x16ca <wiz_send_data+0x8e>
    16d2:	95 01       	movw	r18, r10
    16d4:	44 27       	eor	r20, r20
    16d6:	37 fd       	sbrc	r19, 7
    16d8:	40 95       	com	r20
    16da:	54 2f       	mov	r21, r20
   addrsel = addrsel  + offset_wiz;
    16dc:	62 0f       	add	r22, r18
    16de:	73 1f       	adc	r23, r19
    16e0:	84 1f       	adc	r24, r20
    16e2:	95 1f       	adc	r25, r21
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    16e4:	98 01       	movw	r18, r16
    16e6:	a4 01       	movw	r20, r8
    16e8:	b2 de       	rcall	.-668    	; 0x144e <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    16ea:	c0 0f       	add	r28, r16
    16ec:	d1 1f       	adc	r29, r17
   setSn_TX_WR(sn,ptr);
    16ee:	4d 2f       	mov	r20, r29
    16f0:	c3 01       	movw	r24, r6
    16f2:	b2 01       	movw	r22, r4
    16f4:	17 de       	rcall	.-978    	; 0x1324 <WIZCHIP_WRITE>
    16f6:	4c 2f       	mov	r20, r28
    16f8:	c7 01       	movw	r24, r14
    16fa:	b6 01       	movw	r22, r12
}
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	9f 90       	pop	r9
    1712:	8f 90       	pop	r8
    1714:	7f 90       	pop	r7
    1716:	6f 90       	pop	r6
    1718:	5f 90       	pop	r5
    171a:	4f 90       	pop	r4
   offset_wiz = (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = addrsel  + offset_wiz;
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
   
   ptr += len;
   setSn_TX_WR(sn,ptr);
    171c:	03 ce       	rjmp	.-1018   	; 0x1324 <WIZCHIP_WRITE>
}
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	5f 90       	pop	r5
    173c:	4f 90       	pop	r4
    173e:	08 95       	ret

00001740 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1740:	4f 92       	push	r4
    1742:	5f 92       	push	r5
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	4b 01       	movw	r8, r22
    1762:	8a 01       	movw	r16, r20
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   uint32_t RX_Buffer_Add=0;
   if(len == 0) return;
    1764:	41 15       	cp	r20, r1
    1766:	51 05       	cpc	r21, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <wiz_recv_data+0x2c>
    176a:	5b c0       	rjmp	.+182    	; 0x1822 <wiz_recv_data+0xe2>
   ptr = getSn_RX_RD(sn);
    176c:	24 e0       	ldi	r18, 0x04	; 4
    176e:	82 9f       	mul	r24, r18
    1770:	50 01       	movw	r10, r0
    1772:	11 24       	eor	r1, r1
    1774:	65 01       	movw	r12, r10
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	c8 1a       	sub	r12, r24
    177a:	d8 0a       	sbc	r13, r24
    177c:	a3 e0       	ldi	r26, 0x03	; 3
    177e:	cc 0c       	add	r12, r12
    1780:	dd 1c       	adc	r13, r13
    1782:	aa 95       	dec	r26
    1784:	e1 f7       	brne	.-8      	; 0x177e <wiz_recv_data+0x3e>
    1786:	26 01       	movw	r4, r12
    1788:	98 ed       	ldi	r25, 0xD8	; 216
    178a:	59 1a       	sub	r5, r25
    178c:	66 24       	eor	r6, r6
    178e:	57 fc       	sbrc	r5, 7
    1790:	60 94       	com	r6
    1792:	76 2c       	mov	r7, r6
    1794:	c3 01       	movw	r24, r6
    1796:	b2 01       	movw	r22, r4
    1798:	84 dd       	rcall	.-1272   	; 0x12a2 <WIZCHIP_READ>
    179a:	c8 2f       	mov	r28, r24
    179c:	27 ed       	ldi	r18, 0xD7	; 215
    179e:	d2 1a       	sub	r13, r18
    17a0:	ee 24       	eor	r14, r14
    17a2:	d7 fc       	sbrc	r13, 7
    17a4:	e0 94       	com	r14
    17a6:	fe 2c       	mov	r15, r14
    17a8:	c7 01       	movw	r24, r14
    17aa:	b6 01       	movw	r22, r12
    17ac:	7a dd       	rcall	.-1292   	; 0x12a2 <WIZCHIP_READ>
    17ae:	d0 e0       	ldi	r29, 0x00	; 0
    17b0:	dc 2f       	mov	r29, r28
    17b2:	cc 27       	eor	r28, r28
    17b4:	c8 0f       	add	r28, r24
    17b6:	d1 1d       	adc	r29, r1
   
   //addrsel = (((uint32_t)ptr)<<8);
   addrsel = ptr;
    17b8:	ce 01       	movw	r24, r28
    17ba:	a0 e0       	ldi	r26, 0x00	; 0
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
   addrsel = addrsel <<8;
    17be:	66 27       	eor	r22, r22
    17c0:	78 2f       	mov	r23, r24
    17c2:	89 2f       	mov	r24, r25
    17c4:	9a 2f       	mov	r25, r26
 
   RX_Buffer_Add = (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    17c6:	23 e0       	ldi	r18, 0x03	; 3
    17c8:	a2 0e       	add	r10, r18
    17ca:	b1 1c       	adc	r11, r1
    17cc:	33 e0       	ldi	r19, 0x03	; 3
    17ce:	aa 0c       	add	r10, r10
    17d0:	bb 1c       	adc	r11, r11
    17d2:	3a 95       	dec	r19
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <wiz_recv_data+0x8e>
    17d6:	95 01       	movw	r18, r10
    17d8:	44 27       	eor	r20, r20
    17da:	37 fd       	sbrc	r19, 7
    17dc:	40 95       	com	r20
    17de:	54 2f       	mov	r21, r20
   addrsel = addrsel+RX_Buffer_Add;
    17e0:	62 0f       	add	r22, r18
    17e2:	73 1f       	adc	r23, r19
    17e4:	84 1f       	adc	r24, r20
    17e6:	95 1f       	adc	r25, r21
   
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    17e8:	98 01       	movw	r18, r16
    17ea:	a4 01       	movw	r20, r8
    17ec:	dc dd       	rcall	.-1096   	; 0x13a6 <WIZCHIP_READ_BUF>
   ptr += len;
    17ee:	c0 0f       	add	r28, r16
    17f0:	d1 1f       	adc	r29, r17
   
   setSn_RX_RD(sn,ptr);
    17f2:	4d 2f       	mov	r20, r29
    17f4:	c3 01       	movw	r24, r6
    17f6:	b2 01       	movw	r22, r4
    17f8:	95 dd       	rcall	.-1238   	; 0x1324 <WIZCHIP_WRITE>
    17fa:	4c 2f       	mov	r20, r28
    17fc:	c7 01       	movw	r24, r14
    17fe:	b6 01       	movw	r22, r12
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	df 90       	pop	r13
    180e:	cf 90       	pop	r12
    1810:	bf 90       	pop	r11
    1812:	af 90       	pop	r10
    1814:	9f 90       	pop	r9
    1816:	8f 90       	pop	r8
    1818:	7f 90       	pop	r7
    181a:	6f 90       	pop	r6
    181c:	5f 90       	pop	r5
    181e:	4f 90       	pop	r4
   addrsel = addrsel+RX_Buffer_Add;
   
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
   ptr += len;
   
   setSn_RX_RD(sn,ptr);
    1820:	81 cd       	rjmp	.-1278   	; 0x1324 <WIZCHIP_WRITE>
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	6f 90       	pop	r6
    183e:	5f 90       	pop	r5
    1840:	4f 90       	pop	r4
    1842:	08 95       	ret

00001844 <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
    1844:	08 95       	ret

00001846 <wizchip_cris_exit>:
    1846:	08 95       	ret

00001848 <wizchip_cs_select>:
    1848:	08 95       	ret

0000184a <wizchip_cs_deselect>:
    184a:	08 95       	ret

0000184c <wizchip_bus_readbyte>:
    184c:	fb 01       	movw	r30, r22
    184e:	80 81       	ld	r24, Z
    1850:	08 95       	ret

00001852 <wizchip_bus_writebyte>:
    1852:	fb 01       	movw	r30, r22
    1854:	40 83       	st	Z, r20
    1856:	08 95       	ret

00001858 <wizchip_spi_readbyte>:
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	08 95       	ret

0000185c <wizchip_spi_writebyte>:
    185c:	08 95       	ret

0000185e <reg_wizchip_cs_cbfunc>:
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	19 f0       	breq	.+6      	; 0x1868 <reg_wizchip_cs_cbfunc+0xa>
    1862:	61 15       	cp	r22, r1
    1864:	71 05       	cpc	r23, r1
    1866:	69 f4       	brne	.+26     	; 0x1882 <reg_wizchip_cs_cbfunc+0x24>
    1868:	84 e2       	ldi	r24, 0x24	; 36
    186a:	9c e0       	ldi	r25, 0x0C	; 12
    186c:	80 93 0e 20 	sts	0x200E, r24
    1870:	90 93 0f 20 	sts	0x200F, r25
    1874:	85 e2       	ldi	r24, 0x25	; 37
    1876:	9c e0       	ldi	r25, 0x0C	; 12
    1878:	80 93 10 20 	sts	0x2010, r24
    187c:	90 93 11 20 	sts	0x2011, r25
    1880:	08 95       	ret
    1882:	80 93 0e 20 	sts	0x200E, r24
    1886:	90 93 0f 20 	sts	0x200F, r25
    188a:	60 93 10 20 	sts	0x2010, r22
    188e:	70 93 11 20 	sts	0x2011, r23
    1892:	08 95       	ret

00001894 <reg_wizchip_spi_cbfunc>:
    1894:	20 91 02 20 	lds	r18, 0x2002
    1898:	30 91 03 20 	lds	r19, 0x2003
    189c:	31 ff       	sbrs	r19, 1
    189e:	ff cf       	rjmp	.-2      	; 0x189e <reg_wizchip_spi_cbfunc+0xa>
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	19 f0       	breq	.+6      	; 0x18aa <reg_wizchip_spi_cbfunc+0x16>
    18a4:	61 15       	cp	r22, r1
    18a6:	71 05       	cpc	r23, r1
    18a8:	69 f4       	brne	.+26     	; 0x18c4 <reg_wizchip_spi_cbfunc+0x30>
    18aa:	8c e2       	ldi	r24, 0x2C	; 44
    18ac:	9c e0       	ldi	r25, 0x0C	; 12
    18ae:	80 93 12 20 	sts	0x2012, r24
    18b2:	90 93 13 20 	sts	0x2013, r25
    18b6:	8e e2       	ldi	r24, 0x2E	; 46
    18b8:	9c e0       	ldi	r25, 0x0C	; 12
    18ba:	80 93 14 20 	sts	0x2014, r24
    18be:	90 93 15 20 	sts	0x2015, r25
    18c2:	08 95       	ret
    18c4:	80 93 12 20 	sts	0x2012, r24
    18c8:	90 93 13 20 	sts	0x2013, r25
    18cc:	60 93 14 20 	sts	0x2014, r22
    18d0:	70 93 15 20 	sts	0x2015, r23
    18d4:	08 95       	ret

000018d6 <wizchip_sw_reset>:
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	62 97       	sbiw	r28, 0x12	; 18
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	26 e0       	ldi	r18, 0x06	; 6
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	ae 01       	movw	r20, r28
    18ea:	4f 5f       	subi	r20, 0xFF	; 255
    18ec:	5f 4f       	sbci	r21, 0xFF	; 255
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	79 e0       	ldi	r23, 0x09	; 9
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	57 dd       	rcall	.-1362   	; 0x13a6 <WIZCHIP_READ_BUF>
    18f8:	24 e0       	ldi	r18, 0x04	; 4
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	ae 01       	movw	r20, r28
    18fe:	41 5f       	subi	r20, 0xF1	; 241
    1900:	5f 4f       	sbci	r21, 0xFF	; 255
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	71 e0       	ldi	r23, 0x01	; 1
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	4d dd       	rcall	.-1382   	; 0x13a6 <WIZCHIP_READ_BUF>
    190c:	24 e0       	ldi	r18, 0x04	; 4
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ae 01       	movw	r20, r28
    1912:	45 5f       	subi	r20, 0xF5	; 245
    1914:	5f 4f       	sbci	r21, 0xFF	; 255
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	75 e0       	ldi	r23, 0x05	; 5
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	43 dd       	rcall	.-1402   	; 0x13a6 <WIZCHIP_READ_BUF>
    1920:	24 e0       	ldi	r18, 0x04	; 4
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	ae 01       	movw	r20, r28
    1926:	49 5f       	subi	r20, 0xF9	; 249
    1928:	5f 4f       	sbci	r21, 0xFF	; 255
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	7f e0       	ldi	r23, 0x0F	; 15
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	39 dd       	rcall	.-1422   	; 0x13a6 <WIZCHIP_READ_BUF>
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	cb 01       	movw	r24, r22
    193c:	f3 dc       	rcall	.-1562   	; 0x1324 <WIZCHIP_WRITE>
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	cb 01       	movw	r24, r22
    1944:	ae dc       	rcall	.-1700   	; 0x12a2 <WIZCHIP_READ>
    1946:	26 e0       	ldi	r18, 0x06	; 6
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	ae 01       	movw	r20, r28
    194c:	4f 5f       	subi	r20, 0xFF	; 255
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	79 e0       	ldi	r23, 0x09	; 9
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	7a dd       	rcall	.-1292   	; 0x144e <WIZCHIP_WRITE_BUF>
    195a:	24 e0       	ldi	r18, 0x04	; 4
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	ae 01       	movw	r20, r28
    1960:	41 5f       	subi	r20, 0xF1	; 241
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	71 e0       	ldi	r23, 0x01	; 1
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	70 dd       	rcall	.-1312   	; 0x144e <WIZCHIP_WRITE_BUF>
    196e:	24 e0       	ldi	r18, 0x04	; 4
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	ae 01       	movw	r20, r28
    1974:	45 5f       	subi	r20, 0xF5	; 245
    1976:	5f 4f       	sbci	r21, 0xFF	; 255
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	75 e0       	ldi	r23, 0x05	; 5
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	66 dd       	rcall	.-1332   	; 0x144e <WIZCHIP_WRITE_BUF>
    1982:	24 e0       	ldi	r18, 0x04	; 4
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	ae 01       	movw	r20, r28
    1988:	49 5f       	subi	r20, 0xF9	; 249
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	7f e0       	ldi	r23, 0x0F	; 15
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	5c dd       	rcall	.-1352   	; 0x144e <WIZCHIP_WRITE_BUF>
    1996:	62 96       	adiw	r28, 0x12	; 18
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <wizchip_init>:
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	ec 01       	movw	r28, r24
    19b0:	8b 01       	movw	r16, r22
    19b2:	91 df       	rcall	.-222    	; 0x18d6 <wizchip_sw_reset>
    19b4:	20 97       	sbiw	r28, 0x00	; 0
    19b6:	21 f4       	brne	.+8      	; 0x19c0 <wizchip_init+0x1e>
    19b8:	01 15       	cp	r16, r1
    19ba:	11 05       	cpc	r17, r1
    19bc:	19 f5       	brne	.+70     	; 0x1a04 <wizchip_init+0x62>
    19be:	41 c0       	rjmp	.+130    	; 0x1a42 <wizchip_init+0xa0>
    19c0:	fe 01       	movw	r30, r28
    19c2:	98 e0       	ldi	r25, 0x08	; 8
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	21 91       	ld	r18, Z+
    19c8:	82 0f       	add	r24, r18
    19ca:	91 50       	subi	r25, 0x01	; 1
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <wizchip_init+0x24>
    19ce:	81 31       	cpi	r24, 0x11	; 17
    19d0:	14 f0       	brlt	.+4      	; 0x19d6 <wizchip_init+0x34>
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	37 c0       	rjmp	.+110    	; 0x1a44 <wizchip_init+0xa2>
    19d6:	7e 01       	movw	r14, r28
    19d8:	c1 e0       	ldi	r28, 0x01	; 1
    19da:	d0 e0       	ldi	r29, 0x00	; 0
    19dc:	f7 01       	movw	r30, r14
    19de:	41 91       	ld	r20, Z+
    19e0:	7f 01       	movw	r14, r30
    19e2:	be 01       	movw	r22, r28
    19e4:	93 e0       	ldi	r25, 0x03	; 3
    19e6:	66 0f       	add	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	9a 95       	dec	r25
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <wizchip_init+0x44>
    19ee:	71 5e       	subi	r23, 0xE1	; 225
    19f0:	88 27       	eor	r24, r24
    19f2:	77 fd       	sbrc	r23, 7
    19f4:	80 95       	com	r24
    19f6:	98 2f       	mov	r25, r24
    19f8:	95 dc       	rcall	.-1750   	; 0x1324 <WIZCHIP_WRITE>
    19fa:	24 96       	adiw	r28, 0x04	; 4
    19fc:	c1 32       	cpi	r28, 0x21	; 33
    19fe:	d1 05       	cpc	r29, r1
    1a00:	69 f7       	brne	.-38     	; 0x19dc <wizchip_init+0x3a>
    1a02:	da cf       	rjmp	.-76     	; 0x19b8 <wizchip_init+0x16>
    1a04:	f8 01       	movw	r30, r16
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	21 91       	ld	r18, Z+
    1a0c:	82 0f       	add	r24, r18
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	98 30       	cpi	r25, 0x08	; 8
    1a12:	d9 f7       	brne	.-10     	; 0x1a0a <wizchip_init+0x68>
    1a14:	81 31       	cpi	r24, 0x11	; 17
    1a16:	ec f6       	brge	.-70     	; 0x19d2 <wizchip_init+0x30>
    1a18:	c1 e0       	ldi	r28, 0x01	; 1
    1a1a:	d0 e0       	ldi	r29, 0x00	; 0
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	41 91       	ld	r20, Z+
    1a20:	8f 01       	movw	r16, r30
    1a22:	be 01       	movw	r22, r28
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	8a 95       	dec	r24
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <wizchip_init+0x84>
    1a2e:	72 5e       	subi	r23, 0xE2	; 226
    1a30:	88 27       	eor	r24, r24
    1a32:	77 fd       	sbrc	r23, 7
    1a34:	80 95       	com	r24
    1a36:	98 2f       	mov	r25, r24
    1a38:	75 dc       	rcall	.-1814   	; 0x1324 <WIZCHIP_WRITE>
    1a3a:	24 96       	adiw	r28, 0x04	; 4
    1a3c:	c1 32       	cpi	r28, 0x21	; 33
    1a3e:	d1 05       	cpc	r29, r1
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <wizchip_init+0x7a>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	08 95       	ret

00001a52 <wizchip_clrinterrupt>:
    1a52:	cf 93       	push	r28
    1a54:	c9 2f       	mov	r28, r25
    1a56:	48 2f       	mov	r20, r24
    1a58:	40 7f       	andi	r20, 0xF0	; 240
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	75 e1       	ldi	r23, 0x15	; 21
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	60 dc       	rcall	.-1856   	; 0x1324 <WIZCHIP_WRITE>
    1a64:	4c 2f       	mov	r20, r28
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	77 e1       	ldi	r23, 0x17	; 23
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	cf 91       	pop	r28
    1a70:	59 cc       	rjmp	.-1870   	; 0x1324 <WIZCHIP_WRITE>

00001a72 <wizchip_getinterrupt>:
    1a72:	cf 93       	push	r28
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	75 e1       	ldi	r23, 0x15	; 21
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	12 dc       	rcall	.-2012   	; 0x12a2 <WIZCHIP_READ>
    1a7e:	c8 2f       	mov	r28, r24
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	77 e1       	ldi	r23, 0x17	; 23
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0c dc       	rcall	.-2024   	; 0x12a2 <WIZCHIP_READ>
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	92 2f       	mov	r25, r18
    1a90:	88 27       	eor	r24, r24
    1a92:	c0 7f       	andi	r28, 0xF0	; 240
    1a94:	8c 0f       	add	r24, r28
    1a96:	91 1d       	adc	r25, r1
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <wizchip_setinterruptmask>:
    1a9c:	cf 93       	push	r28
    1a9e:	c9 2f       	mov	r28, r25
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	76 e1       	ldi	r23, 0x16	; 22
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	3c dc       	rcall	.-1928   	; 0x1324 <WIZCHIP_WRITE>
    1aac:	4c 2f       	mov	r20, r28
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	78 e1       	ldi	r23, 0x18	; 24
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	cf 91       	pop	r28
    1ab8:	35 cc       	rjmp	.-1942   	; 0x1324 <WIZCHIP_WRITE>

00001aba <wizchip_getinterruptmask>:
    1aba:	cf 93       	push	r28
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	76 e1       	ldi	r23, 0x16	; 22
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	ee db       	rcall	.-2084   	; 0x12a2 <WIZCHIP_READ>
    1ac6:	c8 2f       	mov	r28, r24
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	78 e1       	ldi	r23, 0x18	; 24
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	e8 db       	rcall	.-2096   	; 0x12a2 <WIZCHIP_READ>
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	92 2f       	mov	r25, r18
    1ad8:	88 27       	eor	r24, r24
    1ada:	8c 0f       	add	r24, r28
    1adc:	91 1d       	adc	r25, r1
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <wizphy_getphylink>:
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	7e e2       	ldi	r23, 0x2E	; 46
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	db db       	rcall	.-2122   	; 0x12a2 <WIZCHIP_READ>
    1aec:	81 70       	andi	r24, 0x01	; 1
    1aee:	08 95       	ret

00001af0 <wizphy_getphypmode>:
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	7e e2       	ldi	r23, 0x2E	; 46
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	d4 db       	rcall	.-2136   	; 0x12a2 <WIZCHIP_READ>
    1afa:	98 2f       	mov	r25, r24
    1afc:	90 73       	andi	r25, 0x30	; 48
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <wizphy_getphypmode+0x14>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	08 95       	ret

00001b06 <wizphy_reset>:
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	7e e2       	ldi	r23, 0x2E	; 46
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	c9 db       	rcall	.-2158   	; 0x12a2 <WIZCHIP_READ>
    1b10:	48 2f       	mov	r20, r24
    1b12:	4f 77       	andi	r20, 0x7F	; 127
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	7e e2       	ldi	r23, 0x2E	; 46
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	03 dc       	rcall	.-2042   	; 0x1324 <WIZCHIP_WRITE>
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	7e e2       	ldi	r23, 0x2E	; 46
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	bd db       	rcall	.-2182   	; 0x12a2 <WIZCHIP_READ>
    1b28:	48 2f       	mov	r20, r24
    1b2a:	40 68       	ori	r20, 0x80	; 128
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	7e e2       	ldi	r23, 0x2E	; 46
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	f7 cb       	rjmp	.-2066   	; 0x1324 <WIZCHIP_WRITE>

00001b36 <wizphy_setphyconf>:
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <wizphy_setphyconf+0xc>
    1b3e:	40 e4       	ldi	r20, 0x40	; 64
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <wizphy_setphyconf+0xe>
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	81 81       	ldd	r24, Z+1	; 0x01
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	11 f4       	brne	.+4      	; 0x1b4e <wizphy_setphyconf+0x18>
    1b4a:	48 63       	ori	r20, 0x38	; 56
    1b4c:	0d c0       	rjmp	.+26     	; 0x1b68 <wizphy_setphyconf+0x32>
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	91 30       	cpi	r25, 0x01	; 1
    1b54:	31 f4       	brne	.+12     	; 0x1b62 <wizphy_setphyconf+0x2c>
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <wizphy_setphyconf+0x28>
    1b5a:	48 61       	ori	r20, 0x18	; 24
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <wizphy_setphyconf+0x32>
    1b5e:	48 60       	ori	r20, 0x08	; 8
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <wizphy_setphyconf+0x32>
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <wizphy_setphyconf+0x32>
    1b66:	40 61       	ori	r20, 0x10	; 16
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	7e e2       	ldi	r23, 0x2E	; 46
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	d9 db       	rcall	.-2126   	; 0x1324 <WIZCHIP_WRITE>
    1b72:	c9 cf       	rjmp	.-110    	; 0x1b06 <wizphy_reset>

00001b74 <wizphy_getphyconf>:
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	ec 01       	movw	r28, r24
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	7e e2       	ldi	r23, 0x2E	; 46
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	8f db       	rcall	.-2274   	; 0x12a2 <WIZCHIP_READ>
    1b84:	86 fb       	bst	r24, 6
    1b86:	99 27       	eor	r25, r25
    1b88:	90 f9       	bld	r25, 0
    1b8a:	98 83       	st	Y, r25
    1b8c:	88 73       	andi	r24, 0x38	; 56
    1b8e:	80 32       	cpi	r24, 0x20	; 32
    1b90:	11 f0       	breq	.+4      	; 0x1b96 <wizphy_getphyconf+0x22>
    1b92:	88 33       	cpi	r24, 0x38	; 56
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <wizphy_getphyconf+0x28>
    1b96:	91 e0       	ldi	r25, 0x01	; 1
    1b98:	99 83       	std	Y+1, r25	; 0x01
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <wizphy_getphyconf+0x2a>
    1b9c:	19 82       	std	Y+1, r1	; 0x01
    1b9e:	88 31       	cpi	r24, 0x18	; 24
    1ba0:	21 f0       	breq	.+8      	; 0x1baa <wizphy_getphyconf+0x36>
    1ba2:	80 32       	cpi	r24, 0x20	; 32
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <wizphy_getphyconf+0x36>
    1ba6:	80 31       	cpi	r24, 0x10	; 16
    1ba8:	19 f4       	brne	.+6      	; 0x1bb0 <wizphy_getphyconf+0x3c>
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <wizphy_getphyconf+0x3e>
    1bb0:	1a 82       	std	Y+2, r1	; 0x02
    1bb2:	88 31       	cpi	r24, 0x18	; 24
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <wizphy_getphyconf+0x4a>
    1bb6:	80 32       	cpi	r24, 0x20	; 32
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <wizphy_getphyconf+0x4a>
    1bba:	88 30       	cpi	r24, 0x08	; 8
    1bbc:	19 f4       	brne	.+6      	; 0x1bc4 <wizphy_getphyconf+0x50>
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <wizphy_getphyconf+0x52>
    1bc4:	1b 82       	std	Y+3, r1	; 0x03
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	08 95       	ret

00001bcc <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    1bcc:	cf 93       	push	r28
    1bce:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	7e e2       	ldi	r23, 0x2E	; 46
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	64 db       	rcall	.-2360   	; 0x12a2 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    1bda:	86 ff       	sbrs	r24, 6
    1bdc:	1d c0       	rjmp	.+58     	; 0x1c18 <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    1bde:	48 2f       	mov	r20, r24
    1be0:	47 7c       	andi	r20, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    1be2:	c1 30       	cpi	r28, 0x01	; 1
    1be4:	11 f4       	brne	.+4      	; 0x1bea <wizphy_setphypmode+0x1e>
      tmp |= PHYCFGR_OPMDC_PDOWN;
    1be6:	40 63       	ori	r20, 0x30	; 48
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <wizphy_setphypmode+0x20>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    1bea:	48 63       	ori	r20, 0x38	; 56
   setPHYCFGR(tmp);
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	7e e2       	ldi	r23, 0x2E	; 46
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	97 db       	rcall	.-2258   	; 0x1324 <WIZCHIP_WRITE>
   wizphy_reset();
    1bf6:	87 df       	rcall	.-242    	; 0x1b06 <wizphy_reset>
   tmp = getPHYCFGR();
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	7e e2       	ldi	r23, 0x2E	; 46
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	50 db       	rcall	.-2400   	; 0x12a2 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    1c02:	98 2f       	mov	r25, r24
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
    1c04:	c1 30       	cpi	r28, 0x01	; 1
    1c06:	11 f4       	brne	.+4      	; 0x1c0c <wizphy_setphypmode+0x40>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    1c08:	90 73       	andi	r25, 0x30	; 48
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <wizphy_setphypmode+0x42>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    1c0c:	98 73       	andi	r25, 0x38	; 56
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	91 11       	cpse	r25, r1
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	81 95       	neg	r24
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <wizphy_setphypmode+0x4e>

int8_t wizphy_setphypmode(uint8_t pmode)
{
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
   }
   return -1;
}
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <ctlwizchip>:
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	eb 01       	movw	r28, r22
   uint8_t tmp = 0;
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
    1c26:	48 2f       	mov	r20, r24
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	40 31       	cpi	r20, 0x10	; 16
    1c2c:	51 05       	cpc	r21, r1
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <ctlwizchip+0x14>
    1c30:	62 c0       	rjmp	.+196    	; 0x1cf6 <ctlwizchip+0xd8>
    1c32:	fa 01       	movw	r30, r20
    1c34:	ea 5a       	subi	r30, 0xAA	; 170
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	ba c1       	rjmp	.+884    	; 0x1fae <__tablejump2__>
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    1c3a:	4d de       	rcall	.-870    	; 0x18d6 <wizchip_sw_reset>
    1c3c:	61 c0       	rjmp	.+194    	; 0x1d00 <ctlwizchip+0xe2>
         break;
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    1c3e:	20 97       	sbiw	r28, 0x00	; 0
    1c40:	19 f0       	breq	.+6      	; 0x1c48 <ctlwizchip+0x2a>
         {
            ptmp[0] = (uint8_t*)arg;
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    1c42:	68 5f       	subi	r22, 0xF8	; 248
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <ctlwizchip+0x2e>
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
   uint8_t tmp = 0;
   uint8_t* ptmp[2] = {0,0};
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
         if(arg != 0) 
         {
            ptmp[0] = (uint8_t*)arg;
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);;
    1c4c:	ce 01       	movw	r24, r28
         break;
      default:
         return -1;
   }
   return 0;
}
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
         if(arg != 0) 
         {
            ptmp[0] = (uint8_t*)arg;
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);;
    1c54:	a6 ce       	rjmp	.-692    	; 0x19a2 <wizchip_init>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    1c56:	88 81       	ld	r24, Y
    1c58:	99 81       	ldd	r25, Y+1	; 0x01
    1c5a:	fb de       	rcall	.-522    	; 0x1a52 <wizchip_clrinterrupt>
    1c5c:	51 c0       	rjmp	.+162    	; 0x1d00 <ctlwizchip+0xe2>
         break;
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    1c5e:	09 df       	rcall	.-494    	; 0x1a72 <wizchip_getinterrupt>
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <ctlwizchip+0x4e>
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    1c62:	88 81       	ld	r24, Y
    1c64:	99 81       	ldd	r25, Y+1	; 0x01
    1c66:	1a df       	rcall	.-460    	; 0x1a9c <wizchip_setinterruptmask>
    1c68:	4b c0       	rjmp	.+150    	; 0x1d00 <ctlwizchip+0xe2>
         break;         
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    1c6a:	27 df       	rcall	.-434    	; 0x1aba <wizchip_getinterruptmask>
    1c6c:	88 83       	st	Y, r24
    1c6e:	99 83       	std	Y+1, r25	; 0x01
    1c70:	47 c0       	rjmp	.+142    	; 0x1d00 <ctlwizchip+0xe2>
         break;
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    1c72:	49 81       	ldd	r20, Y+1	; 0x01
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	73 e1       	ldi	r23, 0x13	; 19
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	53 db       	rcall	.-2394   	; 0x1324 <WIZCHIP_WRITE>
    1c7e:	48 81       	ld	r20, Y
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	74 e1       	ldi	r23, 0x14	; 20
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	4d db       	rcall	.-2406   	; 0x1324 <WIZCHIP_WRITE>
    1c8a:	3a c0       	rjmp	.+116    	; 0x1d00 <ctlwizchip+0xe2>
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	73 e1       	ldi	r23, 0x13	; 19
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	06 db       	rcall	.-2548   	; 0x12a2 <WIZCHIP_READ>
    1c96:	18 2f       	mov	r17, r24
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	74 e1       	ldi	r23, 0x14	; 20
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	00 db       	rcall	.-2560   	; 0x12a2 <WIZCHIP_READ>
    1ca2:	21 2f       	mov	r18, r17
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	32 2f       	mov	r19, r18
    1ca8:	22 27       	eor	r18, r18
    1caa:	28 0f       	add	r18, r24
    1cac:	31 1d       	adc	r19, r1
    1cae:	28 83       	st	Y, r18
    1cb0:	39 83       	std	Y+1, r19	; 0x01
    1cb2:	26 c0       	rjmp	.+76     	; 0x1d00 <ctlwizchip+0xe2>
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    1cb4:	80 91 04 20 	lds	r24, 0x2004
    1cb8:	88 83       	st	Y, r24
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    1cba:	80 91 05 20 	lds	r24, 0x2005
    1cbe:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    1cc0:	80 91 06 20 	lds	r24, 0x2006
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    1cc6:	80 91 07 20 	lds	r24, 0x2007
    1cca:	8b 83       	std	Y+3, r24	; 0x03
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    1ccc:	80 91 08 20 	lds	r24, 0x2008
    1cd0:	8c 83       	std	Y+4, r24	; 0x04
         ((uint8_t*)arg)[5] = 0;
    1cd2:	1d 82       	std	Y+5, r1	; 0x05
    1cd4:	15 c0       	rjmp	.+42     	; 0x1d00 <ctlwizchip+0xe2>
         break;
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
    1cd6:	17 df       	rcall	.-466    	; 0x1b06 <wizphy_reset>
    1cd8:	13 c0       	rjmp	.+38     	; 0x1d00 <ctlwizchip+0xe2>
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    1cda:	cb 01       	movw	r24, r22
    1cdc:	2c df       	rcall	.-424    	; 0x1b36 <wizphy_setphyconf>
    1cde:	10 c0       	rjmp	.+32     	; 0x1d00 <ctlwizchip+0xe2>
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	48 df       	rcall	.-368    	; 0x1b74 <wizphy_getphyconf>
    1ce4:	0d c0       	rjmp	.+26     	; 0x1d00 <ctlwizchip+0xe2>
         break;
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    1ce6:	88 81       	ld	r24, Y
         break;
      default:
         return -1;
   }
   return 0;
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    1cee:	6e cf       	rjmp	.-292    	; 0x1bcc <wizphy_setphypmode>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    1cf0:	ff de       	rcall	.-514    	; 0x1af0 <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    1cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf4:	21 f4       	brne	.+8      	; 0x1cfe <ctlwizchip+0xe0>
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <ctlwizchip+0xe4>
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    1cfa:	f3 de       	rcall	.-538    	; 0x1ae2 <wizphy_getphylink>
    1cfc:	fa cf       	rjmp	.-12     	; 0x1cf2 <ctlwizchip+0xd4>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
    1cfe:	88 83       	st	Y, r24
         break;
      default:
         return -1;
   }
   return 0;
    1d00:	80 e0       	ldi	r24, 0x00	; 0
}
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	08 95       	ret

00001d0a <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    1d10:	26 e0       	ldi	r18, 0x06	; 6
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	ac 01       	movw	r20, r24
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	79 e0       	ldi	r23, 0x09	; 9
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	97 db       	rcall	.-2258   	; 0x144e <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    1d20:	ae 01       	movw	r20, r28
    1d22:	42 5f       	subi	r20, 0xF2	; 242
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	24 e0       	ldi	r18, 0x04	; 4
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	71 e0       	ldi	r23, 0x01	; 1
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	8d db       	rcall	.-2278   	; 0x144e <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    1d34:	ae 01       	movw	r20, r28
    1d36:	46 5f       	subi	r20, 0xF6	; 246
    1d38:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3a:	24 e0       	ldi	r18, 0x04	; 4
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	75 e0       	ldi	r23, 0x05	; 5
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	83 db       	rcall	.-2298   	; 0x144e <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    1d48:	ae 01       	movw	r20, r28
    1d4a:	4a 5f       	subi	r20, 0xFA	; 250
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	24 e0       	ldi	r18, 0x04	; 4
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	7f e0       	ldi	r23, 0x0F	; 15
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	79 db       	rcall	.-2318   	; 0x144e <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    1d5c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d5e:	80 93 e9 20 	sts	0x20E9, r24
   _DNS_[1] = pnetinfo->dns[1];
    1d62:	8b 89       	ldd	r24, Y+19	; 0x13
    1d64:	80 93 ea 20 	sts	0x20EA, r24
   _DNS_[2] = pnetinfo->dns[2];
    1d68:	8c 89       	ldd	r24, Y+20	; 0x14
    1d6a:	80 93 eb 20 	sts	0x20EB, r24
   _DNS_[3] = pnetinfo->dns[3];
    1d6e:	8d 89       	ldd	r24, Y+21	; 0x15
    1d70:	80 93 ec 20 	sts	0x20EC, r24
   _DHCP_   = pnetinfo->dhcp;
    1d74:	8e 89       	ldd	r24, Y+22	; 0x16
    1d76:	80 93 e8 20 	sts	0x20E8, r24
}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    1d86:	26 e0       	ldi	r18, 0x06	; 6
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	ac 01       	movw	r20, r24
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	79 e0       	ldi	r23, 0x09	; 9
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	08 db       	rcall	.-2544   	; 0x13a6 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    1d96:	ae 01       	movw	r20, r28
    1d98:	42 5f       	subi	r20, 0xF2	; 242
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9c:	24 e0       	ldi	r18, 0x04	; 4
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	71 e0       	ldi	r23, 0x01	; 1
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	fe da       	rcall	.-2564   	; 0x13a6 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    1daa:	ae 01       	movw	r20, r28
    1dac:	46 5f       	subi	r20, 0xF6	; 246
    1dae:	5f 4f       	sbci	r21, 0xFF	; 255
    1db0:	24 e0       	ldi	r18, 0x04	; 4
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	75 e0       	ldi	r23, 0x05	; 5
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	f4 da       	rcall	.-2584   	; 0x13a6 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    1dbe:	ae 01       	movw	r20, r28
    1dc0:	4a 5f       	subi	r20, 0xFA	; 250
    1dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc4:	24 e0       	ldi	r18, 0x04	; 4
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	7f e0       	ldi	r23, 0x0F	; 15
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	ea da       	rcall	.-2604   	; 0x13a6 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    1dd2:	80 91 e9 20 	lds	r24, 0x20E9
    1dd6:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    1dd8:	80 91 ea 20 	lds	r24, 0x20EA
    1ddc:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    1dde:	80 91 eb 20 	lds	r24, 0x20EB
    1de2:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    1de4:	80 91 ec 20 	lds	r24, 0x20EC
    1de8:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    1dea:	80 91 e8 20 	lds	r24, 0x20E8
    1dee:	8e 8b       	std	Y+22, r24	; 0x16
}
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret

00001df6 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
    1df6:	cf 93       	push	r28
    1df8:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
#if _WIZCHIP_ != 5500   
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    1dfa:	85 7c       	andi	r24, 0xC5	; 197
    1dfc:	61 f4       	brne	.+24     	; 0x1e16 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	cb 01       	movw	r24, r22
    1e04:	4e da       	rcall	.-2916   	; 0x12a2 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
    1e06:	48 2f       	mov	r20, r24
    1e08:	4c 2b       	or	r20, r28
   setMR(tmp);
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	cb 01       	movw	r24, r22
    1e10:	89 da       	rcall	.-2798   	; 0x1324 <WIZCHIP_WRITE>
   return 0;
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <wizchip_setnetmode+0x22>
{
   uint8_t tmp = 0;
#if _WIZCHIP_ != 5500   
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
#endif      
   tmp = getMR();
   tmp |= (uint8_t)netmode;
   setMR(tmp);
   return 0;
}
    1e18:	cf 91       	pop	r28
    1e1a:	08 95       	ret

00001e1c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	cb 01       	movw	r24, r22
    1e22:	3f ca       	rjmp	.-2946   	; 0x12a2 <WIZCHIP_READ>

00001e24 <wizchip_settimeout>:
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	ec 01       	movw	r28, r24
   setRCR(nettime->retry_cnt);
    1e2a:	48 81       	ld	r20, Y
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	7b e1       	ldi	r23, 0x1B	; 27
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	77 da       	rcall	.-2834   	; 0x1324 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
    1e36:	4a 81       	ldd	r20, Y+2	; 0x02
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	79 e1       	ldi	r23, 0x19	; 25
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	71 da       	rcall	.-2846   	; 0x1324 <WIZCHIP_WRITE>
    1e42:	49 81       	ldd	r20, Y+1	; 0x01
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	7a e1       	ldi	r23, 0x1A	; 26
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
}
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
   setRCR(nettime->retry_cnt);
   setRTR(nettime->time_100us);
    1e50:	69 ca       	rjmp	.-2862   	; 0x1324 <WIZCHIP_WRITE>

00001e52 <wizchip_gettimeout>:
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
    1e52:	1f 93       	push	r17
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	ec 01       	movw	r28, r24
   nettime->retry_cnt = getRCR();
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	7b e1       	ldi	r23, 0x1B	; 27
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	1f da       	rcall	.-3010   	; 0x12a2 <WIZCHIP_READ>
    1e64:	88 83       	st	Y, r24
   nettime->time_100us = getRTR();
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	79 e1       	ldi	r23, 0x19	; 25
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	19 da       	rcall	.-3022   	; 0x12a2 <WIZCHIP_READ>
    1e70:	18 2f       	mov	r17, r24
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	7a e1       	ldi	r23, 0x1A	; 26
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	13 da       	rcall	.-3034   	; 0x12a2 <WIZCHIP_READ>
    1e7c:	21 2f       	mov	r18, r17
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	32 2f       	mov	r19, r18
    1e82:	22 27       	eor	r18, r18
    1e84:	28 0f       	add	r18, r24
    1e86:	31 1d       	adc	r19, r1
    1e88:	29 83       	std	Y+1, r18	; 0x01
    1e8a:	3a 83       	std	Y+2, r19	; 0x02
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	08 95       	ret

00001e94 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	eb 01       	movw	r28, r22
   
   switch(cntype)
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	99 f0       	breq	.+38     	; 0x1ec4 <ctlnetwork+0x30>
    1e9e:	38 f4       	brcc	.+14     	; 0x1eae <ctlnetwork+0x1a>
    1ea0:	88 23       	and	r24, r24
    1ea2:	69 f0       	breq	.+26     	; 0x1ebe <ctlnetwork+0x2a>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	c9 f4       	brne	.+50     	; 0x1eda <ctlnetwork+0x46>
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
         break;
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	6a df       	rcall	.-300    	; 0x1d80 <wizchip_getnetinfo>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <ctlnetwork+0x42>


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
   
   switch(cntype)
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	81 f0       	breq	.+32     	; 0x1ed2 <ctlnetwork+0x3e>
    1eb2:	60 f0       	brcs	.+24     	; 0x1ecc <ctlnetwork+0x38>
    1eb4:	85 30       	cpi	r24, 0x05	; 5
    1eb6:	89 f4       	brne	.+34     	; 0x1eda <ctlnetwork+0x46>
         break;
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
         break;
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
    1eb8:	cb 01       	movw	r24, r22
    1eba:	cb df       	rcall	.-106    	; 0x1e52 <wizchip_gettimeout>
    1ebc:	0c c0       	rjmp	.+24     	; 0x1ed6 <ctlnetwork+0x42>
{
   
   switch(cntype)
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	24 df       	rcall	.-440    	; 0x1d0a <wizchip_setnetinfo>
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <ctlnetwork+0x42>
         break;
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
         break;
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
    1ec4:	88 81       	ld	r24, Y
         break;
      default:
         return -1;
   }
   return 0;
}
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
         break;
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
         break;
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
    1eca:	95 cf       	rjmp	.-214    	; 0x1df6 <wizchip_setnetmode>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
    1ecc:	a7 df       	rcall	.-178    	; 0x1e1c <wizchip_getnetmode>
    1ece:	88 83       	st	Y, r24
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <ctlnetwork+0x42>
         break;
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	a7 df       	rcall	.-178    	; 0x1e24 <wizchip_settimeout>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
      default:
         return -1;
   }
   return 0;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
         break;
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
         break;
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <ctlnetwork+0x48>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
      default:
         return -1;
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
   }
   return 0;
}
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	80 93 70 00 	sts	0x0070, r24
    1ee8:	80 93 71 00 	sts	0x0071, r24
    1eec:	80 93 72 00 	sts	0x0072, r24
    1ef0:	80 93 73 00 	sts	0x0073, r24
    1ef4:	80 93 74 00 	sts	0x0074, r24
    1ef8:	80 93 75 00 	sts	0x0075, r24
    1efc:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1f00:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1f02:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1f04:	80 91 50 00 	lds	r24, 0x0050
    1f08:	82 60       	ori	r24, 0x02	; 2
    1f0a:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f0e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1f10:	80 91 51 00 	lds	r24, 0x0051
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1f14:	81 ff       	sbrs	r24, 1
    1f16:	fc cf       	rjmp	.-8      	; 0x1f10 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	80 e4       	ldi	r24, 0x40	; 64
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	15 d0       	rcall	.+42     	; 0x1f4a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1f20:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1f22:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1f24:	80 91 50 00 	lds	r24, 0x0050
    1f28:	8e 7f       	andi	r24, 0xFE	; 254
    1f2a:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f2e:	9f bf       	out	0x3f, r25	; 63
    1f30:	08 95       	ret

00001f32 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1f32:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1f34:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1f36:	e8 2f       	mov	r30, r24
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	e0 59       	subi	r30, 0x90	; 144
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	60 95       	com	r22
    1f40:	80 81       	ld	r24, Z
    1f42:	86 23       	and	r24, r22
    1f44:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f46:	9f bf       	out	0x3f, r25	; 63
    1f48:	08 95       	ret

00001f4a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f4a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1f4c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1f4e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1f50:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1f52:	60 83       	st	Z, r22
	ret                             // Return to caller
    1f54:	08 95       	ret

00001f56 <board_init>:

void board_init(void)
{
	// LED ein:
	 
	PORTA.OUTCLR = PIN5_bm;
    1f56:	e0 e0       	ldi	r30, 0x00	; 0
    1f58:	f6 e0       	ldi	r31, 0x06	; 6
    1f5a:	80 e2       	ldi	r24, 0x20	; 32
    1f5c:	86 83       	std	Z+6, r24	; 0x06
	PORTA.DIRSET = PIN5_bm;
    1f5e:	81 83       	std	Z+1, r24	; 0x01
	
	// Pullups der Config-Jumper ein:
	PORTD.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);
    1f60:	8f e0       	ldi	r24, 0x0F	; 15
    1f62:	e0 e6       	ldi	r30, 0x60	; 96
    1f64:	f6 e0       	ldi	r31, 0x06	; 6
    1f66:	85 83       	std	Z+5, r24	; 0x05
    1f68:	08 95       	ret

00001f6a <__udivmodsi4>:
    1f6a:	a1 e2       	ldi	r26, 0x21	; 33
    1f6c:	1a 2e       	mov	r1, r26
    1f6e:	aa 1b       	sub	r26, r26
    1f70:	bb 1b       	sub	r27, r27
    1f72:	fd 01       	movw	r30, r26
    1f74:	0d c0       	rjmp	.+26     	; 0x1f90 <__udivmodsi4_ep>

00001f76 <__udivmodsi4_loop>:
    1f76:	aa 1f       	adc	r26, r26
    1f78:	bb 1f       	adc	r27, r27
    1f7a:	ee 1f       	adc	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	a2 17       	cp	r26, r18
    1f80:	b3 07       	cpc	r27, r19
    1f82:	e4 07       	cpc	r30, r20
    1f84:	f5 07       	cpc	r31, r21
    1f86:	20 f0       	brcs	.+8      	; 0x1f90 <__udivmodsi4_ep>
    1f88:	a2 1b       	sub	r26, r18
    1f8a:	b3 0b       	sbc	r27, r19
    1f8c:	e4 0b       	sbc	r30, r20
    1f8e:	f5 0b       	sbc	r31, r21

00001f90 <__udivmodsi4_ep>:
    1f90:	66 1f       	adc	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	88 1f       	adc	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	1a 94       	dec	r1
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <__udivmodsi4_loop>
    1f9c:	60 95       	com	r22
    1f9e:	70 95       	com	r23
    1fa0:	80 95       	com	r24
    1fa2:	90 95       	com	r25
    1fa4:	9b 01       	movw	r18, r22
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	bd 01       	movw	r22, r26
    1faa:	cf 01       	movw	r24, r30
    1fac:	08 95       	ret

00001fae <__tablejump2__>:
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31

00001fb2 <__tablejump__>:
    1fb2:	05 90       	lpm	r0, Z+
    1fb4:	f4 91       	lpm	r31, Z
    1fb6:	e0 2d       	mov	r30, r0
    1fb8:	09 94       	ijmp

00001fba <_exit>:
    1fba:	f8 94       	cli

00001fbc <__stop_program>:
    1fbc:	ff cf       	rjmp	.-2      	; 0x1fbc <__stop_program>
