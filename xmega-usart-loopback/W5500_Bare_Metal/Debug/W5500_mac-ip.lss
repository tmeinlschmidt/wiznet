
W5500_mac-ip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00802000  00002274  00002308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000167  0080205a  0080205a  00002362  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00002364  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002bbf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000548  00000000  00000000  00002bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000092ef  00000000  00000000  00003138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001df1  00000000  00000000  0000c427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006ba8  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001218  00000000  00000000  00014dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00029b40  00000000  00000000  00015fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000070dc  00000000  00000000  0003fb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  00046bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a998  00000000  00000000  000471f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c0       	rjmp	.+204    	; 0xce <__ctors_end>
       2:	00 00       	nop
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
      96:	00 00       	nop
      98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	a2 0e       	add	r10, r18
      ae:	ab 0e       	add	r10, r27
      b0:	b5 0e       	add	r11, r21
      b2:	d3 0e       	add	r13, r19
      b4:	ee 0e       	add	r14, r30
      b6:	09 0f       	add	r16, r25
      b8:	24 0f       	add	r18, r20
      ba:	3f 0f       	add	r19, r31
      bc:	5a 0f       	add	r21, r26
      be:	68 0f       	add	r22, r24
      c0:	83 0f       	add	r24, r19
      c2:	9e 0f       	add	r25, r30
      c4:	b9 0f       	add	r27, r25
      c6:	d3 0f       	add	r29, r19
      c8:	dc 0f       	add	r29, r28
      ca:	e6 0f       	add	r30, r22
      cc:	98 0e       	add	r9, r24

000000ce <__ctors_end>:
      ce:	11 24       	eor	r1, r1
      d0:	1f be       	out	0x3f, r1	; 63
      d2:	cf ef       	ldi	r28, 0xFF	; 255
      d4:	d3 e2       	ldi	r29, 0x23	; 35
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
      da:	10 e2       	ldi	r17, 0x20	; 32
      dc:	a0 e0       	ldi	r26, 0x00	; 0
      de:	b0 e2       	ldi	r27, 0x20	; 32
      e0:	e4 e7       	ldi	r30, 0x74	; 116
      e2:	f2 e2       	ldi	r31, 0x22	; 34
      e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
      e6:	05 90       	lpm	r0, Z+
      e8:	0d 92       	st	X+, r0
      ea:	aa 35       	cpi	r26, 0x5A	; 90
      ec:	b1 07       	cpc	r27, r17
      ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
      f0:	21 e2       	ldi	r18, 0x21	; 33
      f2:	aa e5       	ldi	r26, 0x5A	; 90
      f4:	b0 e2       	ldi	r27, 0x20	; 32
      f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
      f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
      fa:	a1 3c       	cpi	r26, 0xC1	; 193
      fc:	b2 07       	cpc	r27, r18
      fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
     100:	0e 94 b6 10 	call	0x216c	; 0x216c <main>
     104:	0c 94 38 11 	jmp	0x2270	; 0x2270 <_exit>

00000108 <__bad_interrupt>:
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <chip_deselect_sw>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     10a:	82 e0       	ldi	r24, 0x02	; 2
     10c:	e0 e4       	ldi	r30, 0x40	; 64
     10e:	f6 e0       	ldi	r31, 0x06	; 6
     110:	85 83       	std	Z+5, r24	; 0x05
     112:	08 95       	ret

00000114 <chip_select_sw>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     114:	82 e0       	ldi	r24, 0x02	; 2
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	f6 e0       	ldi	r31, 0x06	; 6
     11a:	86 83       	std	Z+6, r24	; 0x06
     11c:	08 95       	ret

0000011e <spi_write_sw>:
     11e:	90 e8       	ldi	r25, 0x80	; 128
     120:	90 93 46 06 	sts	0x0646, r25
     124:	98 e0       	ldi	r25, 0x08	; 8
     126:	90 93 46 06 	sts	0x0646, r25
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     12a:	20 e8       	ldi	r18, 0x80	; 128
     12c:	38 e0       	ldi	r19, 0x08	; 8
	*/
	ioport_set_pin_low(MOSI);
	ioport_set_pin_low(SCK);
	for(uint8_t i=0;i<8;i++)
	{
		if((wb&0x80)>0)
     12e:	87 fd       	sbrc	r24, 7
     130:	20 93 45 06 	sts	0x0645, r18
     134:	30 93 45 06 	sts	0x0645, r19
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     138:	30 93 46 06 	sts	0x0646, r19
     13c:	20 93 46 06 	sts	0x0646, r18
		//PORTB&=~(1<<SCK_PIN); //Den Clock einmal Low-Setzen
		ioport_set_pin_low(SCK);
		
		//PORTB&=~(1<<MOSI_PIN); //Den Output einmal Low-Setzen
		ioport_set_pin_low(MOSI);
		wb=(wb<<1);
     140:	88 0f       	add	r24, r24
     142:	91 50       	subi	r25, 0x01	; 1
	PORTB&=~(1<<MOSI_PIN); //Den Output einmal Low-Setzen
	PORTB&=~(1<<SCK_PIN); //Den Clock einmal Low-Setzen
	*/
	ioport_set_pin_low(MOSI);
	ioport_set_pin_low(SCK);
	for(uint8_t i=0;i<8;i++)
     144:	a1 f7       	brne	.-24     	; 0x12e <spi_write_sw+0x10>
     146:	80 e8       	ldi	r24, 0x80	; 128
     148:	80 93 46 06 	sts	0x0646, r24
     14c:	88 e0       	ldi	r24, 0x08	; 8
     14e:	80 93 46 06 	sts	0x0646, r24
     152:	08 95       	ret

00000154 <spi_read_sw>:
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	80 93 46 06 	sts	0x0646, r24
     15a:	88 e0       	ldi	r24, 0x08	; 8
     15c:	80 93 46 06 	sts	0x0646, r24
     160:	98 e0       	ldi	r25, 0x08	; 8
	
}

uint8_t spi_read_sw()
{
	uint8_t spi_reg=0;
     162:	80 e0       	ldi	r24, 0x00	; 0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     164:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     166:	30 e8       	ldi	r19, 0x80	; 128
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     168:	20 93 45 06 	sts	0x0645, r18
	for(uint8_t i=0;i<8;i++)
	{
		
		//PORTB|=(1<<SCK_PIN);
		ioport_set_pin_high(SCK);
		spi_reg=(spi_reg<<1);
     16c:	88 0f       	add	r24, r24

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     16e:	40 91 48 06 	lds	r20, 0x0648
		
		//if( (PINB&(1<<MISO_PIN))>0)
		if(ioport_get_pin_level(MISO)>0)
     172:	45 fd       	sbrc	r20, 5
		{
			spi_reg|=1;
     174:	81 60       	ori	r24, 0x01	; 1
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     176:	30 93 46 06 	sts	0x0646, r19
     17a:	20 93 46 06 	sts	0x0646, r18
     17e:	91 50       	subi	r25, 0x01	; 1
	uint8_t spi_reg=0;
	//PORTB&=~(1<<MOSI_PIN); //Den Output einmal Low-Setzen
	//PORTB&=~(1<<SCK_PIN); //Den Clock einmal Low-Setzen
	ioport_set_pin_low(MOSI);
	ioport_set_pin_low(SCK);
	for(uint8_t i=0;i<8;i++)
     180:	99 f7       	brne	.-26     	; 0x168 <spi_read_sw+0x14>
     182:	90 e8       	ldi	r25, 0x80	; 128
     184:	90 93 46 06 	sts	0x0646, r25
     188:	98 e0       	ldi	r25, 0x08	; 8
     18a:	90 93 46 06 	sts	0x0646, r25
	ioport_set_pin_low(SCK);
	//PORTB&=~(1<<MOSI_PIN); //Den Output einmal Low-Setzen
	//PORTB&=~(1<<SCK_PIN); //Den Clock einmal Low-Setzen

	return spi_reg;
}
     18e:	08 95       	ret

00000190 <init_ports>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     190:	e0 e4       	ldi	r30, 0x40	; 64
     192:	f6 e0       	ldi	r31, 0x06	; 6
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	85 83       	std	Z+5, r24	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	81 83       	std	Z+1, r24	; 0x01
     19e:	80 e8       	ldi	r24, 0x80	; 128
     1a0:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     1a2:	80 e2       	ldi	r24, 0x20	; 32
     1a4:	82 83       	std	Z+2, r24	; 0x02
     1a6:	08 95       	ret

000001a8 <spi_init_sw>:
	ioport_set_pin_dir(MISO, IOPORT_DIR_INPUT);
}

void spi_init_sw(void)
{
	init_ports();
     1a8:	f3 df       	rcall	.-26     	; 0x190 <init_ports>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	e0 e4       	ldi	r30, 0x40	; 64
     1ae:	f6 e0       	ldi	r31, 0x06	; 6
     1b0:	85 83       	std	Z+5, r24	; 0x05
     1b2:	08 95       	ret

000001b4 <w5500_init_io>:
     1b4:	e0 e4       	ldi	r30, 0x40	; 64
     1b6:	f6 e0       	ldi	r31, 0x06	; 6
     1b8:	80 e4       	ldi	r24, 0x40	; 64
     1ba:	81 83       	std	Z+1, r24	; 0x01
     1bc:	90 e1       	ldi	r25, 0x10	; 16
     1be:	92 83       	std	Z+2, r25	; 0x02
     1c0:	85 83       	std	Z+5, r24	; 0x05
     1c2:	08 95       	ret

000001c4 <w55500_init>:
		_delay_ms(3);
		ioport_set_pin_high(RSTN);
}

void w55500_init(wiz_NetInfo* NetworkConfig)
{
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	61 97       	sbiw	r28, 0x11	; 17
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	8c 01       	movw	r16, r24
	uint8_t tmp;
	uint8_t memsize[2][8] = {{8,1,1,1,1,1,1,1},{8,1,1,1,1,1,1,1}};
     1d8:	80 e1       	ldi	r24, 0x10	; 16
     1da:	e9 e4       	ldi	r30, 0x49	; 73
     1dc:	f0 e2       	ldi	r31, 0x20	; 32
     1de:	de 01       	movw	r26, r28
     1e0:	11 96       	adiw	r26, 0x01	; 1
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	8a 95       	dec	r24
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <w55500_init+0x1e>
	
	w5500_init_io();
     1ea:	e4 df       	rcall	.-56     	; 0x1b4 <w5500_init_io>
	
	#endif
		
	#if USE_SW_SPI > 0
	#warning "Wiznet with SoftSPI Mode"
	spi_init_sw();
     1ec:	dd df       	rcall	.-70     	; 0x1a8 <spi_init_sw>
	/* Critical section callback - No use in this example */
	//reg_wizchip_cris_cbfunc(0, 0);
	/* Chip selection call back */
	#if   _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
	reg_wizchip_cs_cbfunc(chip_select_sw, chip_deselect_sw);
     1ee:	65 e8       	ldi	r22, 0x85	; 133
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	8a e8       	ldi	r24, 0x8A	; 138
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	00 d7       	rcall	.+3584   	; 0xff8 <reg_wizchip_cs_cbfunc>
	#else
	reg_wizchip_cs_cbfunc(chip_select_sw, chip_deselect_sw);
	#endif
	#endif
	/* SPI Read & Write callback function */
	reg_wizchip_spi_cbfunc(spi_read_sw, spi_write_sw);
     1f8:	6f e8       	ldi	r22, 0x8F	; 143
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	8a ea       	ldi	r24, 0xAA	; 170
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	16 d7       	rcall	.+3628   	; 0x102e <reg_wizchip_spi_cbfunc>
	
	////////////////////////////////////////////////////////////////////////

	
	/* WIZCHIP SOCKET Buffer initialize */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
     202:	be 01       	movw	r22, r28
     204:	6f 5f       	subi	r22, 0xFF	; 255
     206:	7f 4f       	sbci	r23, 0xFF	; 255
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 df 09 	call	0x13be	; 0x13be <ctlwizchip>
     210:	8f 3f       	cpi	r24, 0xFF	; 255
     212:	09 f4       	brne	.+2      	; 0x216 <w55500_init+0x52>
     214:	ff cf       	rjmp	.-2      	; 0x214 <w55500_init+0x50>
	
	/* PHY link status check */
	do
	{
		
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
     216:	be 01       	movw	r22, r28
     218:	6f 5e       	subi	r22, 0xEF	; 239
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	8f e0       	ldi	r24, 0x0F	; 15
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 df 09 	call	0x13be	; 0x13be <ctlwizchip>
		{
			//printf("Unknown PHY Link stauts.\r\n");
			
		}
		
	}while(tmp == PHY_LINK_OFF);
     224:	89 89       	ldd	r24, Y+17	; 0x11
     226:	88 23       	and	r24, r24
     228:	b1 f3       	breq	.-20     	; 0x216 <w55500_init+0x52>
	ctlnetwork(CN_SET_NETINFO,NetworkConfig);
     22a:	b8 01       	movw	r22, r16
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 47 0b 	call	0x168e	; 0x168e <ctlnetwork>
	ctlnetwork(CN_GET_NETINFO,NetworkConfig);
     234:	b8 01       	movw	r22, r16
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 47 0b 	call	0x168e	; 0x168e <ctlnetwork>
	
     23e:	61 96       	adiw	r28, 0x11	; 17
     240:	cd bf       	out	0x3d, r28	; 61
     242:	de bf       	out	0x3e, r29	; 62
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <close>:
   if(recvsize < len) len = recvsize;
   wiz_recv_data(sn, buf, len);
   setSn_CR(sn,Sn_CR_RECV);
   while(getSn_CR(sn));
   return len;
}
     24e:	bf 92       	push	r11
     250:	cf 92       	push	r12
     252:	df 92       	push	r13
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	b8 2e       	mov	r11, r24
     262:	88 e0       	ldi	r24, 0x08	; 8
     264:	8b 15       	cp	r24, r11
     266:	08 f4       	brcc	.+2      	; 0x26a <close+0x1c>
     268:	4c c0       	rjmp	.+152    	; 0x302 <close+0xb4>
     26a:	0b 2d       	mov	r16, r11
     26c:	10 e0       	ldi	r17, 0x00	; 0
     26e:	e8 01       	movw	r28, r16
     270:	95 e0       	ldi	r25, 0x05	; 5
     272:	cc 0f       	add	r28, r28
     274:	dd 1f       	adc	r29, r29
     276:	9a 95       	dec	r25
     278:	e1 f7       	brne	.-8      	; 0x272 <close+0x24>
     27a:	28 96       	adiw	r28, 0x08	; 8
     27c:	6e 01       	movw	r12, r28
     27e:	d3 94       	inc	r13
     280:	ee 24       	eor	r14, r14
     282:	d7 fc       	sbrc	r13, 7
     284:	e0 94       	com	r14
     286:	fe 2c       	mov	r15, r14
     288:	40 e1       	ldi	r20, 0x10	; 16
     28a:	c7 01       	movw	r24, r14
     28c:	b6 01       	movw	r22, r12
     28e:	c0 d3       	rcall	.+1920   	; 0xa10 <WIZCHIP_WRITE>
     290:	c7 01       	movw	r24, r14
     292:	b6 01       	movw	r22, r12
     294:	7c d3       	rcall	.+1784   	; 0x98e <WIZCHIP_READ>
     296:	81 11       	cpse	r24, r1
     298:	fb cf       	rjmp	.-10     	; 0x290 <close+0x42>
     29a:	be 01       	movw	r22, r28
     29c:	7e 5f       	subi	r23, 0xFE	; 254
     29e:	88 27       	eor	r24, r24
     2a0:	77 fd       	sbrc	r23, 7
     2a2:	80 95       	com	r24
     2a4:	98 2f       	mov	r25, r24
     2a6:	4f e1       	ldi	r20, 0x1F	; 31
     2a8:	b3 d3       	rcall	.+1894   	; 0xa10 <WIZCHIP_WRITE>
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <close+0x66>
     2b0:	22 0f       	add	r18, r18
     2b2:	33 1f       	adc	r19, r19
     2b4:	ba 94       	dec	r11
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <close+0x62>
     2b8:	20 95       	com	r18
     2ba:	30 95       	com	r19
     2bc:	80 91 5c 20 	lds	r24, 0x205C
     2c0:	90 91 5d 20 	lds	r25, 0x205D
     2c4:	82 23       	and	r24, r18
     2c6:	93 23       	and	r25, r19
     2c8:	80 93 5c 20 	sts	0x205C, r24
     2cc:	90 93 5d 20 	sts	0x205D, r25
     2d0:	f8 01       	movw	r30, r16
     2d2:	ee 0f       	add	r30, r30
     2d4:	ff 1f       	adc	r31, r31
     2d6:	e2 5a       	subi	r30, 0xA2	; 162
     2d8:	ff 4d       	sbci	r31, 0xDF	; 223
     2da:	10 82       	st	Z, r1
     2dc:	11 82       	std	Z+1, r1	; 0x01
     2de:	f8 01       	movw	r30, r16
     2e0:	e2 59       	subi	r30, 0x92	; 146
     2e2:	ff 4d       	sbci	r31, 0xDF	; 223
     2e4:	10 82       	st	Z, r1
     2e6:	6e 01       	movw	r12, r28
     2e8:	8d ef       	ldi	r24, 0xFD	; 253
     2ea:	d8 1a       	sub	r13, r24
     2ec:	ee 24       	eor	r14, r14
     2ee:	d7 fc       	sbrc	r13, 7
     2f0:	e0 94       	com	r14
     2f2:	fe 2c       	mov	r15, r14
     2f4:	c7 01       	movw	r24, r14
     2f6:	b6 01       	movw	r22, r12
     2f8:	4a d3       	rcall	.+1684   	; 0x98e <WIZCHIP_READ>
     2fa:	81 11       	cpse	r24, r1
     2fc:	fb cf       	rjmp	.-10     	; 0x2f4 <close+0xa6>
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	01 c0       	rjmp	.+2      	; 0x304 <close+0xb6>
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	bf 90       	pop	r11
     316:	08 95       	ret

00000318 <socket>:
     318:	6f 92       	push	r6
     31a:	7f 92       	push	r7
     31c:	8f 92       	push	r8
     31e:	9f 92       	push	r9
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	98 2e       	mov	r9, r24
     33c:	7a 01       	movw	r14, r20
     33e:	82 2e       	mov	r8, r18
     340:	28 e0       	ldi	r18, 0x08	; 8
     342:	28 17       	cp	r18, r24
     344:	08 f4       	brcc	.+2      	; 0x348 <socket+0x30>
     346:	aa c0       	rjmp	.+340    	; 0x49c <socket+0x184>
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	08 f4       	brcc	.+2      	; 0x34e <socket+0x36>
     34c:	a9 c0       	rjmp	.+338    	; 0x4a0 <socket+0x188>
     34e:	63 30       	cpi	r22, 0x03	; 3
     350:	18 f0       	brcs	.+6      	; 0x358 <socket+0x40>
     352:	64 30       	cpi	r22, 0x04	; 4
     354:	09 f0       	breq	.+2      	; 0x358 <socket+0x40>
     356:	a4 c0       	rjmp	.+328    	; 0x4a0 <socket+0x188>
     358:	88 2d       	mov	r24, r8
     35a:	86 70       	andi	r24, 0x06	; 6
     35c:	09 f0       	breq	.+2      	; 0x360 <socket+0x48>
     35e:	a2 c0       	rjmp	.+324    	; 0x4a4 <socket+0x18c>
     360:	88 20       	and	r8, r8
     362:	89 f0       	breq	.+34     	; 0x386 <socket+0x6e>
     364:	61 30       	cpi	r22, 0x01	; 1
     366:	19 f0       	breq	.+6      	; 0x36e <socket+0x56>
     368:	62 30       	cpi	r22, 0x02	; 2
     36a:	69 f4       	brne	.+26     	; 0x386 <socket+0x6e>
     36c:	04 c0       	rjmp	.+8      	; 0x376 <socket+0x5e>
     36e:	88 2d       	mov	r24, r8
     370:	81 72       	andi	r24, 0x21	; 33
     372:	49 f4       	brne	.+18     	; 0x386 <socket+0x6e>
     374:	97 c0       	rjmp	.+302    	; 0x4a4 <socket+0x18c>
     376:	85 fe       	sbrs	r8, 5
     378:	02 c0       	rjmp	.+4      	; 0x37e <socket+0x66>
     37a:	87 fe       	sbrs	r8, 7
     37c:	93 c0       	rjmp	.+294    	; 0x4a4 <socket+0x18c>
     37e:	84 fe       	sbrs	r8, 4
     380:	02 c0       	rjmp	.+4      	; 0x386 <socket+0x6e>
     382:	87 fe       	sbrs	r8, 7
     384:	8f c0       	rjmp	.+286    	; 0x4a4 <socket+0x18c>
     386:	89 2d       	mov	r24, r9
     388:	69 83       	std	Y+1, r22	; 0x01
     38a:	61 df       	rcall	.-318    	; 0x24e <close>
     38c:	a9 2c       	mov	r10, r9
     38e:	b1 2c       	mov	r11, r1
     390:	35 01       	movw	r6, r10
     392:	35 e0       	ldi	r19, 0x05	; 5
     394:	66 0c       	add	r6, r6
     396:	77 1c       	adc	r7, r7
     398:	3a 95       	dec	r19
     39a:	e1 f7       	brne	.-8      	; 0x394 <socket+0x7c>
     39c:	88 e0       	ldi	r24, 0x08	; 8
     39e:	68 0e       	add	r6, r24
     3a0:	71 1c       	adc	r7, r1
     3a2:	48 2d       	mov	r20, r8
     3a4:	40 7f       	andi	r20, 0xF0	; 240
     3a6:	69 81       	ldd	r22, Y+1	; 0x01
     3a8:	46 2b       	or	r20, r22
     3aa:	b3 01       	movw	r22, r6
     3ac:	88 27       	eor	r24, r24
     3ae:	77 fd       	sbrc	r23, 7
     3b0:	80 95       	com	r24
     3b2:	98 2f       	mov	r25, r24
     3b4:	2d d3       	rcall	.+1626   	; 0xa10 <WIZCHIP_WRITE>
     3b6:	e1 14       	cp	r14, r1
     3b8:	f1 04       	cpc	r15, r1
     3ba:	89 f4       	brne	.+34     	; 0x3de <socket+0xc6>
     3bc:	e0 90 00 20 	lds	r14, 0x2000
     3c0:	f0 90 01 20 	lds	r15, 0x2001
     3c4:	c7 01       	movw	r24, r14
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	80 3f       	cpi	r24, 0xF0	; 240
     3ca:	ef ef       	ldi	r30, 0xFF	; 255
     3cc:	9e 07       	cpc	r25, r30
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <socket+0xba>
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <socket+0xbe>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 ec       	ldi	r25, 0xC0	; 192
     3d6:	80 93 00 20 	sts	0x2000, r24
     3da:	90 93 01 20 	sts	0x2001, r25
     3de:	b3 01       	movw	r22, r6
     3e0:	7c 5f       	subi	r23, 0xFC	; 252
     3e2:	88 27       	eor	r24, r24
     3e4:	77 fd       	sbrc	r23, 7
     3e6:	80 95       	com	r24
     3e8:	98 2f       	mov	r25, r24
     3ea:	4f 2d       	mov	r20, r15
     3ec:	11 d3       	rcall	.+1570   	; 0xa10 <WIZCHIP_WRITE>
     3ee:	b3 01       	movw	r22, r6
     3f0:	7b 5f       	subi	r23, 0xFB	; 251
     3f2:	88 27       	eor	r24, r24
     3f4:	77 fd       	sbrc	r23, 7
     3f6:	80 95       	com	r24
     3f8:	98 2f       	mov	r25, r24
     3fa:	4e 2d       	mov	r20, r14
     3fc:	09 d3       	rcall	.+1554   	; 0xa10 <WIZCHIP_WRITE>
     3fe:	63 01       	movw	r12, r6
     400:	d3 94       	inc	r13
     402:	ee 24       	eor	r14, r14
     404:	d7 fc       	sbrc	r13, 7
     406:	e0 94       	com	r14
     408:	fe 2c       	mov	r15, r14
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	c7 01       	movw	r24, r14
     40e:	b6 01       	movw	r22, r12
     410:	ff d2       	rcall	.+1534   	; 0xa10 <WIZCHIP_WRITE>
     412:	c7 01       	movw	r24, r14
     414:	b6 01       	movw	r22, r12
     416:	bb d2       	rcall	.+1398   	; 0x98e <WIZCHIP_READ>
     418:	81 11       	cpse	r24, r1
     41a:	fb cf       	rjmp	.-10     	; 0x412 <socket+0xfa>
     41c:	08 2d       	mov	r16, r8
     41e:	01 70       	andi	r16, 0x01	; 1
     420:	10 e0       	ldi	r17, 0x00	; 0
     422:	09 2c       	mov	r0, r9
     424:	02 c0       	rjmp	.+4      	; 0x42a <socket+0x112>
     426:	00 0f       	add	r16, r16
     428:	11 1f       	adc	r17, r17
     42a:	0a 94       	dec	r0
     42c:	e2 f7       	brpl	.-8      	; 0x426 <socket+0x10e>
     42e:	80 91 5a 20 	lds	r24, 0x205A
     432:	90 91 5b 20 	lds	r25, 0x205B
     436:	80 2b       	or	r24, r16
     438:	91 2b       	or	r25, r17
     43a:	80 93 5a 20 	sts	0x205A, r24
     43e:	90 93 5b 20 	sts	0x205B, r25
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	09 2c       	mov	r0, r9
     448:	02 c0       	rjmp	.+4      	; 0x44e <socket+0x136>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	0a 94       	dec	r0
     450:	e2 f7       	brpl	.-8      	; 0x44a <socket+0x132>
     452:	80 95       	com	r24
     454:	90 95       	com	r25
     456:	20 91 5c 20 	lds	r18, 0x205C
     45a:	30 91 5d 20 	lds	r19, 0x205D
     45e:	28 23       	and	r18, r24
     460:	39 23       	and	r19, r25
     462:	20 93 5c 20 	sts	0x205C, r18
     466:	30 93 5d 20 	sts	0x205D, r19
     46a:	f5 01       	movw	r30, r10
     46c:	ee 0f       	add	r30, r30
     46e:	ff 1f       	adc	r31, r31
     470:	e2 5a       	subi	r30, 0xA2	; 162
     472:	ff 4d       	sbci	r31, 0xDF	; 223
     474:	10 82       	st	Z, r1
     476:	11 82       	std	Z+1, r1	; 0x01
     478:	f5 01       	movw	r30, r10
     47a:	e2 59       	subi	r30, 0x92	; 146
     47c:	ff 4d       	sbci	r31, 0xDF	; 223
     47e:	10 82       	st	Z, r1
     480:	63 01       	movw	r12, r6
     482:	2d ef       	ldi	r18, 0xFD	; 253
     484:	d2 1a       	sub	r13, r18
     486:	ee 24       	eor	r14, r14
     488:	d7 fc       	sbrc	r13, 7
     48a:	e0 94       	com	r14
     48c:	fe 2c       	mov	r15, r14
     48e:	c7 01       	movw	r24, r14
     490:	b6 01       	movw	r22, r12
     492:	7d d2       	rcall	.+1274   	; 0x98e <WIZCHIP_READ>
     494:	88 23       	and	r24, r24
     496:	d9 f3       	breq	.-10     	; 0x48e <socket+0x176>
     498:	89 2d       	mov	r24, r9
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <socket+0x18e>
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	03 c0       	rjmp	.+6      	; 0x4a6 <socket+0x18e>
     4a0:	8b ef       	ldi	r24, 0xFB	; 251
     4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <socket+0x18e>
     4a4:	8a ef       	ldi	r24, 0xFA	; 250
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
     4b8:	bf 90       	pop	r11
     4ba:	af 90       	pop	r10
     4bc:	9f 90       	pop	r9
     4be:	8f 90       	pop	r8
     4c0:	7f 90       	pop	r7
     4c2:	6f 90       	pop	r6
     4c4:	08 95       	ret

000004c6 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
     4c6:	4f 92       	push	r4
     4c8:	5f 92       	push	r5
     4ca:	6f 92       	push	r6
     4cc:	7f 92       	push	r7
     4ce:	9f 92       	push	r9
     4d0:	af 92       	push	r10
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	98 2e       	mov	r9, r24
     4e6:	2b 01       	movw	r4, r22
     4e8:	5a 01       	movw	r10, r20
     4ea:	39 01       	movw	r6, r18
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   CHECK_SOCKNUM();
     4ec:	88 e0       	ldi	r24, 0x08	; 8
     4ee:	89 15       	cp	r24, r9
     4f0:	08 f4       	brcc	.+2      	; 0x4f4 <sendto+0x2e>
     4f2:	b2 c0       	rjmp	.+356    	; 0x658 <sendto+0x192>
   switch(getSn_MR(sn) & 0x0F)
     4f4:	e4 e0       	ldi	r30, 0x04	; 4
     4f6:	9e 9e       	mul	r9, r30
     4f8:	e0 01       	movw	r28, r0
     4fa:	11 24       	eor	r1, r1
     4fc:	21 96       	adiw	r28, 0x01	; 1
     4fe:	b3 e0       	ldi	r27, 0x03	; 3
     500:	cc 0f       	add	r28, r28
     502:	dd 1f       	adc	r29, r29
     504:	ba 95       	dec	r27
     506:	e1 f7       	brne	.-8      	; 0x500 <sendto+0x3a>
     508:	be 01       	movw	r22, r28
     50a:	88 27       	eor	r24, r24
     50c:	77 fd       	sbrc	r23, 7
     50e:	80 95       	com	r24
     510:	98 2f       	mov	r25, r24
     512:	3d d2       	rcall	.+1146   	; 0x98e <WIZCHIP_READ>
     514:	8f 70       	andi	r24, 0x0F	; 15
     516:	82 30       	cpi	r24, 0x02	; 2
     518:	19 f0       	breq	.+6      	; 0x520 <sendto+0x5a>
     51a:	84 30       	cpi	r24, 0x04	; 4
     51c:	09 f0       	breq	.+2      	; 0x520 <sendto+0x5a>
     51e:	a0 c0       	rjmp	.+320    	; 0x660 <sendto+0x19a>
      case Sn_MR_MACRAW:
         break;
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
     520:	a1 14       	cp	r10, r1
     522:	b1 04       	cpc	r11, r1
     524:	09 f4       	brne	.+2      	; 0x528 <sendto+0x62>
     526:	a1 c0       	rjmp	.+322    	; 0x66a <sendto+0x1a4>
   if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
     528:	f3 01       	movw	r30, r6
     52a:	80 81       	ld	r24, Z
     52c:	91 81       	ldd	r25, Z+1	; 0x01
     52e:	a2 81       	ldd	r26, Z+2	; 0x02
     530:	b3 81       	ldd	r27, Z+3	; 0x03
     532:	89 2b       	or	r24, r25
     534:	8a 2b       	or	r24, r26
     536:	8b 2b       	or	r24, r27
     538:	09 f4       	brne	.+2      	; 0x53c <sendto+0x76>
     53a:	9c c0       	rjmp	.+312    	; 0x674 <sendto+0x1ae>
   if(port == 0)               return SOCKERR_PORTZERO;
     53c:	01 15       	cp	r16, r1
     53e:	11 05       	cpc	r17, r1
     540:	09 f4       	brne	.+2      	; 0x544 <sendto+0x7e>
     542:	9d c0       	rjmp	.+314    	; 0x67e <sendto+0x1b8>
   tmp = getSn_SR(sn);
     544:	6e 01       	movw	r12, r28
     546:	fd ef       	ldi	r31, 0xFD	; 253
     548:	df 1a       	sub	r13, r31
     54a:	ee 24       	eor	r14, r14
     54c:	d7 fc       	sbrc	r13, 7
     54e:	e0 94       	com	r14
     550:	fe 2c       	mov	r15, r14
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	1b d2       	rcall	.+1078   	; 0x98e <WIZCHIP_READ>
   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
     558:	82 34       	cpi	r24, 0x42	; 66
     55a:	19 f0       	breq	.+6      	; 0x562 <sendto+0x9c>
     55c:	82 32       	cpi	r24, 0x22	; 34
     55e:	09 f0       	breq	.+2      	; 0x562 <sendto+0x9c>
     560:	93 c0       	rjmp	.+294    	; 0x688 <sendto+0x1c2>
      
   setSn_DIPR(sn,addr);
     562:	be 01       	movw	r22, r28
     564:	74 5f       	subi	r23, 0xF4	; 244
     566:	88 27       	eor	r24, r24
     568:	77 fd       	sbrc	r23, 7
     56a:	80 95       	com	r24
     56c:	98 2f       	mov	r25, r24
     56e:	24 e0       	ldi	r18, 0x04	; 4
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	a3 01       	movw	r20, r6
     574:	e2 d2       	rcall	.+1476   	; 0xb3a <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
     576:	be 01       	movw	r22, r28
     578:	70 5f       	subi	r23, 0xF0	; 240
     57a:	88 27       	eor	r24, r24
     57c:	77 fd       	sbrc	r23, 7
     57e:	80 95       	com	r24
     580:	98 2f       	mov	r25, r24
     582:	41 2f       	mov	r20, r17
     584:	45 d2       	rcall	.+1162   	; 0xa10 <WIZCHIP_WRITE>
     586:	be 01       	movw	r22, r28
     588:	7f 5e       	subi	r23, 0xEF	; 239
     58a:	88 27       	eor	r24, r24
     58c:	77 fd       	sbrc	r23, 7
     58e:	80 95       	com	r24
     590:	98 2f       	mov	r25, r24
     592:	40 2f       	mov	r20, r16
     594:	3d d2       	rcall	.+1146   	; 0xa10 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
     596:	be 01       	movw	r22, r28
     598:	71 5e       	subi	r23, 0xE1	; 225
     59a:	88 27       	eor	r24, r24
     59c:	77 fd       	sbrc	r23, 7
     59e:	80 95       	com	r24
     5a0:	98 2f       	mov	r25, r24
     5a2:	f5 d1       	rcall	.+1002   	; 0x98e <WIZCHIP_READ>
     5a4:	00 e0       	ldi	r16, 0x00	; 0
     5a6:	18 2f       	mov	r17, r24
     5a8:	11 0f       	add	r17, r17
     5aa:	11 0f       	add	r17, r17
     5ac:	a0 16       	cp	r10, r16
     5ae:	b1 06       	cpc	r11, r17
     5b0:	08 f4       	brcc	.+2      	; 0x5b4 <sendto+0xee>
     5b2:	85 01       	movw	r16, r10
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     5b4:	aa 24       	eor	r10, r10
     5b6:	a3 94       	inc	r10
     5b8:	b1 2c       	mov	r11, r1
     5ba:	09 2c       	mov	r0, r9
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <sendto+0xfc>
     5be:	aa 0c       	add	r10, r10
     5c0:	bb 1c       	adc	r11, r11
     5c2:	0a 94       	dec	r0
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <sendto+0xf8>
   setSn_DPORT(sn,port);      
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     5c6:	89 2d       	mov	r24, r9
     5c8:	0d d3       	rcall	.+1562   	; 0xbe4 <getSn_TX_FSR>
     5ca:	3c 01       	movw	r6, r24
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	de d1       	rcall	.+956    	; 0x98e <WIZCHIP_READ>
     5d2:	88 23       	and	r24, r24
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <sendto+0x112>
     5d6:	5d c0       	rjmp	.+186    	; 0x692 <sendto+0x1cc>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     5d8:	80 91 5a 20 	lds	r24, 0x205A
     5dc:	90 91 5b 20 	lds	r25, 0x205B
     5e0:	8a 21       	and	r24, r10
     5e2:	9b 21       	and	r25, r11
     5e4:	89 2b       	or	r24, r25
     5e6:	21 f0       	breq	.+8      	; 0x5f0 <sendto+0x12a>
     5e8:	60 16       	cp	r6, r16
     5ea:	71 06       	cpc	r7, r17
     5ec:	20 f4       	brcc	.+8      	; 0x5f6 <sendto+0x130>
     5ee:	56 c0       	rjmp	.+172    	; 0x69c <sendto+0x1d6>
      if(len <= freesize) break;
     5f0:	60 16       	cp	r6, r16
     5f2:	71 06       	cpc	r7, r17
     5f4:	40 f3       	brcs	.-48     	; 0x5c6 <sendto+0x100>
   };
	wiz_send_data(sn, buf, len);
     5f6:	a8 01       	movw	r20, r16
     5f8:	b2 01       	movw	r22, r4
     5fa:	89 2d       	mov	r24, r9
     5fc:	a3 d3       	rcall	.+1862   	; 0xd44 <wiz_send_data>

   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR(0);
   #endif

	setSn_CR(sn,Sn_CR_SEND);
     5fe:	6e 01       	movw	r12, r28
     600:	d3 94       	inc	r13
     602:	ee 24       	eor	r14, r14
     604:	d7 fc       	sbrc	r13, 7
     606:	e0 94       	com	r14
     608:	fe 2c       	mov	r15, r14
     60a:	40 e2       	ldi	r20, 0x20	; 32
     60c:	c7 01       	movw	r24, r14
     60e:	b6 01       	movw	r22, r12
     610:	ff d1       	rcall	.+1022   	; 0xa10 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	bb d1       	rcall	.+886    	; 0x98e <WIZCHIP_READ>
     618:	81 11       	cpse	r24, r1
     61a:	fb cf       	rjmp	.-10     	; 0x612 <sendto+0x14c>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   while(1)
   {
      tmp = getSn_IR(sn);
     61c:	6e 01       	movw	r12, r28
     61e:	ee ef       	ldi	r30, 0xFE	; 254
     620:	de 1a       	sub	r13, r30
     622:	ee 24       	eor	r14, r14
     624:	d7 fc       	sbrc	r13, 7
     626:	e0 94       	com	r14
     628:	fe 2c       	mov	r15, r14
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	af d1       	rcall	.+862    	; 0x98e <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     630:	84 ff       	sbrs	r24, 4
     632:	07 c0       	rjmp	.+14     	; 0x642 <sendto+0x17c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     634:	40 e1       	ldi	r20, 0x10	; 16
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	ea d1       	rcall	.+980    	; 0xa10 <WIZCHIP_WRITE>
         setSn_IR(sn, Sn_IR_TIMEOUT);
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
	return len;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	30 c0       	rjmp	.+96     	; 0x6a2 <sendto+0x1dc>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
     642:	83 ff       	sbrs	r24, 3
     644:	f2 cf       	rjmp	.-28     	; 0x62a <sendto+0x164>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
     646:	48 e0       	ldi	r20, 0x08	; 8
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	e1 d1       	rcall	.+962    	; 0xa10 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
     64e:	03 ef       	ldi	r16, 0xF3	; 243
     650:	1f ef       	ldi	r17, 0xFF	; 255
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	3f ef       	ldi	r19, 0xFF	; 255
     656:	25 c0       	rjmp	.+74     	; 0x6a2 <sendto+0x1dc>

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   CHECK_SOCKNUM();
     658:	0f ef       	ldi	r16, 0xFF	; 255
     65a:	1f ef       	ldi	r17, 0xFF	; 255
     65c:	98 01       	movw	r18, r16
     65e:	21 c0       	rjmp	.+66     	; 0x6a2 <sendto+0x1dc>
   {
      case Sn_MR_UDP:
      case Sn_MR_MACRAW:
         break;
      default:
         return SOCKERR_SOCKMODE;
     660:	0b ef       	ldi	r16, 0xFB	; 251
     662:	1f ef       	ldi	r17, 0xFF	; 255
     664:	2f ef       	ldi	r18, 0xFF	; 255
     666:	3f ef       	ldi	r19, 0xFF	; 255
     668:	1c c0       	rjmp	.+56     	; 0x6a2 <sendto+0x1dc>
   }
   CHECK_SOCKDATA();
     66a:	02 ef       	ldi	r16, 0xF2	; 242
     66c:	1f ef       	ldi	r17, 0xFF	; 255
     66e:	2f ef       	ldi	r18, 0xFF	; 255
     670:	3f ef       	ldi	r19, 0xFF	; 255
     672:	17 c0       	rjmp	.+46     	; 0x6a2 <sendto+0x1dc>
   if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
     674:	04 ef       	ldi	r16, 0xF4	; 244
     676:	1f ef       	ldi	r17, 0xFF	; 255
     678:	2f ef       	ldi	r18, 0xFF	; 255
     67a:	3f ef       	ldi	r19, 0xFF	; 255
     67c:	12 c0       	rjmp	.+36     	; 0x6a2 <sendto+0x1dc>
   if(port == 0)               return SOCKERR_PORTZERO;
     67e:	05 ef       	ldi	r16, 0xF5	; 245
     680:	1f ef       	ldi	r17, 0xFF	; 255
     682:	2f ef       	ldi	r18, 0xFF	; 255
     684:	3f ef       	ldi	r19, 0xFF	; 255
     686:	0d c0       	rjmp	.+26     	; 0x6a2 <sendto+0x1dc>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
     688:	09 ef       	ldi	r16, 0xF9	; 249
     68a:	1f ef       	ldi	r17, 0xFF	; 255
     68c:	2f ef       	ldi	r18, 0xFF	; 255
     68e:	3f ef       	ldi	r19, 0xFF	; 255
     690:	08 c0       	rjmp	.+16     	; 0x6a2 <sendto+0x1dc>
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     692:	0c ef       	ldi	r16, 0xFC	; 252
     694:	1f ef       	ldi	r17, 0xFF	; 255
     696:	2f ef       	ldi	r18, 0xFF	; 255
     698:	3f ef       	ldi	r19, 0xFF	; 255
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <sendto+0x1dc>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     69c:	00 e0       	ldi	r16, 0x00	; 0
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	98 01       	movw	r18, r16
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
	return len;
}
     6a2:	b8 01       	movw	r22, r16
     6a4:	c9 01       	movw	r24, r18
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	9f 90       	pop	r9
     6bc:	7f 90       	pop	r7
     6be:	6f 90       	pop	r6
     6c0:	5f 90       	pop	r5
     6c2:	4f 90       	pop	r4
     6c4:	08 95       	ret

000006c6 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
     6c6:	2f 92       	push	r2
     6c8:	3f 92       	push	r3
     6ca:	4f 92       	push	r4
     6cc:	5f 92       	push	r5
     6ce:	7f 92       	push	r7
     6d0:	8f 92       	push	r8
     6d2:	9f 92       	push	r9
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	2f 97       	sbiw	r28, 0x0f	; 15
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	78 2e       	mov	r7, r24
     6f4:	4b 01       	movw	r8, r22
     6f6:	5a 01       	movw	r10, r20
     6f8:	29 87       	std	Y+9, r18	; 0x09
     6fa:	3a 87       	std	Y+10, r19	; 0x0a
     6fc:	0b 87       	std	Y+11, r16	; 0x0b
     6fe:	1c 87       	std	Y+12, r17	; 0x0c
   uint8_t  mr;
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     700:	28 e0       	ldi	r18, 0x08	; 8
     702:	28 17       	cp	r18, r24
     704:	08 f4       	brcc	.+2      	; 0x708 <recvfrom+0x42>
     706:	16 c1       	rjmp	.+556    	; 0x934 <recvfrom+0x26e>
   //CHECK_SOCKMODE(Sn_MR_UDP);
   switch((mr=getSn_MR(sn)) & 0x0F)
     708:	e8 2e       	mov	r14, r24
     70a:	f1 2c       	mov	r15, r1
     70c:	67 01       	movw	r12, r14
     70e:	75 e0       	ldi	r23, 0x05	; 5
     710:	cc 0c       	add	r12, r12
     712:	dd 1c       	adc	r13, r13
     714:	7a 95       	dec	r23
     716:	e1 f7       	brne	.-8      	; 0x710 <recvfrom+0x4a>
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	c8 0e       	add	r12, r24
     71c:	d1 1c       	adc	r13, r1
     71e:	b6 01       	movw	r22, r12
     720:	88 27       	eor	r24, r24
     722:	77 fd       	sbrc	r23, 7
     724:	80 95       	com	r24
     726:	98 2f       	mov	r25, r24
     728:	32 d1       	rcall	.+612    	; 0x98e <WIZCHIP_READ>
     72a:	48 2f       	mov	r20, r24
     72c:	8f 70       	andi	r24, 0x0F	; 15
     72e:	82 30       	cpi	r24, 0x02	; 2
     730:	19 f0       	breq	.+6      	; 0x738 <recvfrom+0x72>
     732:	84 30       	cpi	r24, 0x04	; 4
     734:	09 f0       	breq	.+2      	; 0x738 <recvfrom+0x72>
     736:	02 c1       	rjmp	.+516    	; 0x93c <recvfrom+0x276>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
     738:	a1 14       	cp	r10, r1
     73a:	b1 04       	cpc	r11, r1
     73c:	09 f4       	brne	.+2      	; 0x740 <recvfrom+0x7a>
     73e:	03 c1       	rjmp	.+518    	; 0x946 <recvfrom+0x280>
   if(sock_remained_size[sn] == 0)
     740:	f7 01       	movw	r30, r14
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	e2 5a       	subi	r30, 0xA2	; 162
     748:	ff 4d       	sbci	r31, 0xDF	; 223
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
     74e:	89 2b       	or	r24, r25
     750:	71 f5       	brne	.+92     	; 0x7ae <recvfrom+0xe8>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	07 2c       	mov	r0, r7
     758:	02 c0       	rjmp	.+4      	; 0x75e <recvfrom+0x98>
     75a:	22 0f       	add	r18, r18
     75c:	33 1f       	adc	r19, r19
     75e:	0a 94       	dec	r0
     760:	e2 f7       	brpl	.-8      	; 0x75a <recvfrom+0x94>
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     762:	16 01       	movw	r2, r12
     764:	9d ef       	ldi	r25, 0xFD	; 253
     766:	39 1a       	sub	r3, r25
     768:	44 24       	eor	r4, r4
     76a:	37 fc       	sbrc	r3, 7
     76c:	40 94       	com	r4
     76e:	54 2c       	mov	r5, r4
   CHECK_SOCKDATA();
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
     770:	87 2d       	mov	r24, r7
     772:	2e 87       	std	Y+14, r18	; 0x0e
     774:	3f 87       	std	Y+15, r19	; 0x0f
     776:	4d 87       	std	Y+13, r20	; 0x0d
     778:	8d d2       	rcall	.+1306   	; 0xc94 <getSn_RX_RSR>
     77a:	8c 01       	movw	r16, r24
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     77c:	c2 01       	movw	r24, r4
     77e:	b1 01       	movw	r22, r2
     780:	06 d1       	rcall	.+524    	; 0x98e <WIZCHIP_READ>
     782:	2e 85       	ldd	r18, Y+14	; 0x0e
     784:	3f 85       	ldd	r19, Y+15	; 0x0f
     786:	4d 85       	ldd	r20, Y+13	; 0x0d
     788:	88 23       	and	r24, r24
     78a:	09 f4       	brne	.+2      	; 0x78e <recvfrom+0xc8>
     78c:	e1 c0       	rjmp	.+450    	; 0x950 <recvfrom+0x28a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     78e:	80 91 5a 20 	lds	r24, 0x205A
     792:	90 91 5b 20 	lds	r25, 0x205B
     796:	82 23       	and	r24, r18
     798:	93 23       	and	r25, r19
     79a:	89 2b       	or	r24, r25
     79c:	21 f0       	breq	.+8      	; 0x7a6 <recvfrom+0xe0>
     79e:	01 15       	cp	r16, r1
     7a0:	11 05       	cpc	r17, r1
     7a2:	39 f4       	brne	.+14     	; 0x7b2 <recvfrom+0xec>
     7a4:	da c0       	rjmp	.+436    	; 0x95a <recvfrom+0x294>
         if(pack_len != 0) break;
     7a6:	01 15       	cp	r16, r1
     7a8:	11 05       	cpc	r17, r1
     7aa:	11 f3       	breq	.-60     	; 0x770 <recvfrom+0xaa>
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <recvfrom+0xec>

int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
   uint8_t  mr;
   uint8_t  head[8];
	uint16_t pack_len=0;
     7ae:	00 e0       	ldi	r16, 0x00	; 0
     7b0:	10 e0       	ldi	r17, 0x00	; 0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
         if(pack_len != 0) break;
      };
   }
   sock_pack_info[sn] = PACK_COMPLETED;
     7b2:	f7 01       	movw	r30, r14
     7b4:	e2 59       	subi	r30, 0x92	; 146
     7b6:	ff 4d       	sbci	r31, 0xDF	; 223
     7b8:	10 82       	st	Z, r1
	switch (mr & 0x07)
     7ba:	47 70       	andi	r20, 0x07	; 7
     7bc:	27 01       	movw	r4, r14
     7be:	44 0c       	add	r4, r4
     7c0:	55 1c       	adc	r5, r5
     7c2:	42 30       	cpi	r20, 0x02	; 2
     7c4:	21 f0       	breq	.+8      	; 0x7ce <recvfrom+0x108>
     7c6:	44 30       	cpi	r20, 0x04	; 4
     7c8:	09 f0       	breq	.+2      	; 0x7cc <recvfrom+0x106>
     7ca:	87 c0       	rjmp	.+270    	; 0x8da <recvfrom+0x214>
     7cc:	3e c0       	rjmp	.+124    	; 0x84a <recvfrom+0x184>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
     7ce:	f2 01       	movw	r30, r4
     7d0:	e2 5a       	subi	r30, 0xA2	; 162
     7d2:	ff 4d       	sbci	r31, 0xDF	; 223
     7d4:	80 81       	ld	r24, Z
     7d6:	91 81       	ldd	r25, Z+1	; 0x01
     7d8:	89 2b       	or	r24, r25
     7da:	09 f0       	breq	.+2      	; 0x7de <recvfrom+0x118>
     7dc:	6e c0       	rjmp	.+220    	; 0x8ba <recvfrom+0x1f4>
	      {
   			wiz_recv_data(sn, head, 8);
     7de:	48 e0       	ldi	r20, 0x08	; 8
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	be 01       	movw	r22, r28
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	87 2d       	mov	r24, r7
     7ea:	2e d3       	rcall	.+1628   	; 0xe48 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
     7ec:	16 01       	movw	r2, r12
     7ee:	33 94       	inc	r3
     7f0:	44 24       	eor	r4, r4
     7f2:	37 fc       	sbrc	r3, 7
     7f4:	40 94       	com	r4
     7f6:	54 2c       	mov	r5, r4
     7f8:	40 e4       	ldi	r20, 0x40	; 64
     7fa:	c2 01       	movw	r24, r4
     7fc:	b1 01       	movw	r22, r2
     7fe:	08 d1       	rcall	.+528    	; 0xa10 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     800:	c2 01       	movw	r24, r4
     802:	b1 01       	movw	r22, r2
     804:	c4 d0       	rcall	.+392    	; 0x98e <WIZCHIP_READ>
     806:	81 11       	cpse	r24, r1
     808:	fb cf       	rjmp	.-10     	; 0x800 <recvfrom+0x13a>
   			// read peer's IP address, port number & packet length
    			addr[0] = head[0];
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	e9 85       	ldd	r30, Y+9	; 0x09
     80e:	fa 85       	ldd	r31, Y+10	; 0x0a
     810:	80 83       	st	Z, r24
   			addr[1] = head[1];
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	81 83       	std	Z+1, r24	; 0x01
   			addr[2] = head[2];
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	82 83       	std	Z+2, r24	; 0x02
   			addr[3] = head[3];
     81a:	8c 81       	ldd	r24, Y+4	; 0x04
     81c:	83 83       	std	Z+3, r24	; 0x03
   			*port = head[4];
   			*port = (*port << 8) + head[5];
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	2e 81       	ldd	r18, Y+6	; 0x06
     824:	82 0f       	add	r24, r18
     826:	91 1d       	adc	r25, r1
     828:	eb 85       	ldd	r30, Y+11	; 0x0b
     82a:	fc 85       	ldd	r31, Y+12	; 0x0c
     82c:	80 83       	st	Z, r24
     82e:	91 83       	std	Z+1, r25	; 0x01
   			sock_remained_size[sn] = head[6];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
     830:	f7 01       	movw	r30, r14
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	e2 5a       	subi	r30, 0xA2	; 162
     838:	ff 4d       	sbci	r31, 0xDF	; 223
     83a:	9f 81       	ldd	r25, Y+7	; 0x07
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	28 85       	ldd	r18, Y+8	; 0x08
     840:	82 0f       	add	r24, r18
     842:	91 1d       	adc	r25, r1
     844:	80 83       	st	Z, r24
     846:	91 83       	std	Z+1, r25	; 0x01
     848:	33 c0       	rjmp	.+102    	; 0x8b0 <recvfrom+0x1ea>
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
     84a:	f2 01       	movw	r30, r4
     84c:	e2 5a       	subi	r30, 0xA2	; 162
     84e:	ff 4d       	sbci	r31, 0xDF	; 223
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	89 2b       	or	r24, r25
     856:	89 f5       	brne	.+98     	; 0x8ba <recvfrom+0x1f4>
	      {
   			wiz_recv_data(sn, head, 2);
     858:	42 e0       	ldi	r20, 0x02	; 2
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	be 01       	movw	r22, r28
     85e:	6f 5f       	subi	r22, 0xFF	; 255
     860:	7f 4f       	sbci	r23, 0xFF	; 255
     862:	87 2d       	mov	r24, r7
     864:	f1 d2       	rcall	.+1506   	; 0xe48 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
     866:	16 01       	movw	r2, r12
     868:	33 94       	inc	r3
     86a:	44 24       	eor	r4, r4
     86c:	37 fc       	sbrc	r3, 7
     86e:	40 94       	com	r4
     870:	54 2c       	mov	r5, r4
     872:	40 e4       	ldi	r20, 0x40	; 64
     874:	c2 01       	movw	r24, r4
     876:	b1 01       	movw	r22, r2
     878:	cb d0       	rcall	.+406    	; 0xa10 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     87a:	c2 01       	movw	r24, r4
     87c:	b1 01       	movw	r22, r2
     87e:	87 d0       	rcall	.+270    	; 0x98e <WIZCHIP_READ>
     880:	81 11       	cpse	r24, r1
     882:	fb cf       	rjmp	.-10     	; 0x87a <recvfrom+0x1b4>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
     884:	99 81       	ldd	r25, Y+1	; 0x01
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	2a 81       	ldd	r18, Y+2	; 0x02
     88a:	82 0f       	add	r24, r18
     88c:	91 1d       	adc	r25, r1
     88e:	f7 01       	movw	r30, r14
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	e2 5a       	subi	r30, 0xA2	; 162
     896:	ff 4d       	sbci	r31, 0xDF	; 223
     898:	80 83       	st	Z, r24
     89a:	91 83       	std	Z+1, r25	; 0x01
   			if(sock_remained_size[sn] > 1514) 
     89c:	8b 3e       	cpi	r24, 0xEB	; 235
     89e:	95 40       	sbci	r25, 0x05	; 5
     8a0:	38 f0       	brcs	.+14     	; 0x8b0 <recvfrom+0x1ea>
   			{
   			   close(sn);
     8a2:	87 2d       	mov	r24, r7
     8a4:	d4 dc       	rcall	.-1624   	; 0x24e <close>
   			   return SOCKFATAL_PACKLEN;
     8a6:	07 e1       	ldi	r16, 0x17	; 23
     8a8:	1c ef       	ldi	r17, 0xFC	; 252
     8aa:	2f ef       	ldi	r18, 0xFF	; 255
     8ac:	3f ef       	ldi	r19, 0xFF	; 255
     8ae:	58 c0       	rjmp	.+176    	; 0x960 <recvfrom+0x29a>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
     8b0:	f7 01       	movw	r30, r14
     8b2:	e2 59       	subi	r30, 0x92	; 146
     8b4:	ff 4d       	sbci	r31, 0xDF	; 223
     8b6:	80 e8       	ldi	r24, 0x80	; 128
     8b8:	80 83       	st	Z, r24
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
     8ba:	f7 01       	movw	r30, r14
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	e2 5a       	subi	r30, 0xA2	; 162
     8c2:	ff 4d       	sbci	r31, 0xDF	; 223
     8c4:	00 81       	ld	r16, Z
     8c6:	11 81       	ldd	r17, Z+1	; 0x01
     8c8:	a0 16       	cp	r10, r16
     8ca:	b1 06       	cpc	r11, r17
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <recvfrom+0x20a>
     8ce:	85 01       	movw	r16, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
     8d0:	a8 01       	movw	r20, r16
     8d2:	b4 01       	movw	r22, r8
     8d4:	87 2d       	mov	r24, r7
     8d6:	b8 d2       	rcall	.+1392   	; 0xe48 <wiz_recv_data>
		   break;
     8d8:	08 c0       	rjmp	.+16     	; 0x8ea <recvfrom+0x224>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   #endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
     8da:	b8 01       	movw	r22, r16
     8dc:	87 2d       	mov	r24, r7
     8de:	36 d3       	rcall	.+1644   	; 0xf4c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
     8e0:	f2 01       	movw	r30, r4
     8e2:	e2 5a       	subi	r30, 0xA2	; 162
     8e4:	ff 4d       	sbci	r31, 0xDF	; 223
     8e6:	00 83       	st	Z, r16
     8e8:	11 83       	std	Z+1, r17	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
     8ea:	46 01       	movw	r8, r12
     8ec:	93 94       	inc	r9
     8ee:	aa 24       	eor	r10, r10
     8f0:	97 fc       	sbrc	r9, 7
     8f2:	a0 94       	com	r10
     8f4:	ba 2c       	mov	r11, r10
     8f6:	40 e4       	ldi	r20, 0x40	; 64
     8f8:	c5 01       	movw	r24, r10
     8fa:	b4 01       	movw	r22, r8
     8fc:	89 d0       	rcall	.+274    	; 0xa10 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
     8fe:	c5 01       	movw	r24, r10
     900:	b4 01       	movw	r22, r8
     902:	45 d0       	rcall	.+138    	; 0x98e <WIZCHIP_READ>
     904:	81 11       	cpse	r24, r1
     906:	fb cf       	rjmp	.-10     	; 0x8fe <recvfrom+0x238>
	sock_remained_size[sn] -= pack_len;
     908:	f7 01       	movw	r30, r14
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	e2 5a       	subi	r30, 0xA2	; 162
     910:	ff 4d       	sbci	r31, 0xDF	; 223
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	80 1b       	sub	r24, r16
     918:	91 0b       	sbc	r25, r17
     91a:	80 83       	st	Z, r24
     91c:	91 83       	std	Z+1, r25	; 0x01
	if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
     91e:	89 2b       	or	r24, r25
     920:	31 f0       	breq	.+12     	; 0x92e <recvfrom+0x268>
     922:	f7 01       	movw	r30, r14
     924:	e2 59       	subi	r30, 0x92	; 146
     926:	ff 4d       	sbci	r31, 0xDF	; 223
     928:	80 81       	ld	r24, Z
     92a:	81 60       	ori	r24, 0x01	; 1
     92c:	80 83       	st	Z, r24
 	return pack_len;
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	16 c0       	rjmp	.+44     	; 0x960 <recvfrom+0x29a>
{
   uint8_t  mr;
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     934:	0f ef       	ldi	r16, 0xFF	; 255
     936:	1f ef       	ldi	r17, 0xFF	; 255
     938:	98 01       	movw	r18, r16
     93a:	12 c0       	rjmp	.+36     	; 0x960 <recvfrom+0x29a>
      case Sn_MR_IPRAW:
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
     93c:	0b ef       	ldi	r16, 0xFB	; 251
     93e:	1f ef       	ldi	r17, 0xFF	; 255
     940:	2f ef       	ldi	r18, 0xFF	; 255
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	0d c0       	rjmp	.+26     	; 0x960 <recvfrom+0x29a>
   }
   CHECK_SOCKDATA();
     946:	02 ef       	ldi	r16, 0xF2	; 242
     948:	1f ef       	ldi	r17, 0xFF	; 255
     94a:	2f ef       	ldi	r18, 0xFF	; 255
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	08 c0       	rjmp	.+16     	; 0x960 <recvfrom+0x29a>
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     950:	0c ef       	ldi	r16, 0xFC	; 252
     952:	1f ef       	ldi	r17, 0xFF	; 255
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	3f ef       	ldi	r19, 0xFF	; 255
     958:	03 c0       	rjmp	.+6      	; 0x960 <recvfrom+0x29a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     95a:	00 e0       	ldi	r16, 0x00	; 0
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	98 01       	movw	r18, r16
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
	sock_remained_size[sn] -= pack_len;
	if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
 	return pack_len;
}
     960:	b8 01       	movw	r22, r16
     962:	c9 01       	movw	r24, r18
     964:	2f 96       	adiw	r28, 0x0f	; 15
     966:	cd bf       	out	0x3d, r28	; 61
     968:	de bf       	out	0x3e, r29	; 62
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	af 90       	pop	r10
     97e:	9f 90       	pop	r9
     980:	8f 90       	pop	r8
     982:	7f 90       	pop	r7
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	08 95       	ret

0000098e <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	00 d0       	rcall	.+0      	; 0x998 <WIZCHIP_READ+0xa>
     998:	1f 92       	push	r1
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
     99e:	e0 91 0a 20 	lds	r30, 0x200A
     9a2:	f0 91 0b 20 	lds	r31, 0x200B
     9a6:	6a 83       	std	Y+2, r22	; 0x02
     9a8:	79 83       	std	Y+1, r23	; 0x01
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	09 95       	icall
   WIZCHIP.CS._select();
     9ae:	e0 91 0e 20 	lds	r30, 0x200E
     9b2:	f0 91 0f 20 	lds	r31, 0x200F
     9b6:	09 95       	icall
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     9b8:	04 e1       	ldi	r16, 0x14	; 20
     9ba:	10 e2       	ldi	r17, 0x20	; 32
     9bc:	d8 01       	movw	r26, r16
     9be:	ed 91       	ld	r30, X+
     9c0:	fc 91       	ld	r31, X
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     9c6:	d8 01       	movw	r26, r16
     9c8:	ed 91       	ld	r30, X+
     9ca:	fc 91       	ld	r31, X
     9cc:	79 81       	ldd	r23, Y+1	; 0x01
     9ce:	87 2f       	mov	r24, r23
     9d0:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     9d2:	d8 01       	movw	r26, r16
     9d4:	ed 91       	ld	r30, X+
     9d6:	fc 91       	ld	r31, X
     9d8:	6a 81       	ldd	r22, Y+2	; 0x02
     9da:	86 2f       	mov	r24, r22
     9dc:	09 95       	icall
   ret = WIZCHIP.IF.SPI._read_byte();
     9de:	e0 91 12 20 	lds	r30, 0x2012
     9e2:	f0 91 13 20 	lds	r31, 0x2013
     9e6:	09 95       	icall
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"   
#endif

   WIZCHIP.CS._deselect();
     9e8:	e0 91 10 20 	lds	r30, 0x2010
     9ec:	f0 91 11 20 	lds	r31, 0x2011
     9f0:	8b 83       	std	Y+3, r24	; 0x03
     9f2:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
     9f4:	e0 91 0c 20 	lds	r30, 0x200C
     9f8:	f0 91 0d 20 	lds	r31, 0x200D
     9fc:	09 95       	icall
   return ret;
}
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	23 96       	adiw	r28, 0x03	; 3
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	00 d0       	rcall	.+0      	; 0xa1a <WIZCHIP_WRITE+0xa>
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <WIZCHIP_WRITE+0xc>
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
    WIZCHIP_CRITICAL_ENTER();
     a20:	e0 91 0a 20 	lds	r30, 0x200A
     a24:	f0 91 0b 20 	lds	r31, 0x200B
     a28:	4c 83       	std	Y+4, r20	; 0x04
     a2a:	6b 83       	std	Y+3, r22	; 0x03
     a2c:	7a 83       	std	Y+2, r23	; 0x02
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	09 95       	icall
    WIZCHIP.CS._select();
     a32:	e0 91 0e 20 	lds	r30, 0x200E
     a36:	f0 91 0f 20 	lds	r31, 0x200F
     a3a:	09 95       	icall
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     a3c:	04 e1       	ldi	r16, 0x14	; 20
     a3e:	10 e2       	ldi	r17, 0x20	; 32
     a40:	d8 01       	movw	r26, r16
     a42:	ed 91       	ld	r30, X+
     a44:	fc 91       	ld	r31, X
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     a4a:	d8 01       	movw	r26, r16
     a4c:	ed 91       	ld	r30, X+
     a4e:	fc 91       	ld	r31, X
     a50:	7a 81       	ldd	r23, Y+2	; 0x02
     a52:	87 2f       	mov	r24, r23
     a54:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     a56:	d8 01       	movw	r26, r16
     a58:	ed 91       	ld	r30, X+
     a5a:	fc 91       	ld	r31, X
     a5c:	6b 81       	ldd	r22, Y+3	; 0x03
     a5e:	86 2f       	mov	r24, r22
     a60:	84 60       	ori	r24, 0x04	; 4
     a62:	09 95       	icall
   WIZCHIP.IF.SPI._write_byte(wb);
     a64:	d8 01       	movw	r26, r16
     a66:	ed 91       	ld	r30, X+
     a68:	fc 91       	ld	r31, X
     a6a:	4c 81       	ldd	r20, Y+4	; 0x04
     a6c:	84 2f       	mov	r24, r20
     a6e:	09 95       	icall
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
     a70:	e0 91 10 20 	lds	r30, 0x2010
     a74:	f0 91 11 20 	lds	r31, 0x2011
     a78:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
     a7a:	e0 91 0c 20 	lds	r30, 0x200C
     a7e:	f0 91 0d 20 	lds	r31, 0x200D
}
     a82:	24 96       	adiw	r28, 0x04	; 4
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
     a90:	09 94       	ijmp

00000a92 <WIZCHIP_READ_BUF>:
}
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	25 97       	sbiw	r28, 0x05	; 5
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	89 01       	movw	r16, r18
   uint16_t i = 0;
   uint16_t j = 0;
   WIZCHIP_CRITICAL_ENTER();
     aaa:	e0 91 0a 20 	lds	r30, 0x200A
     aae:	f0 91 0b 20 	lds	r31, 0x200B
     ab2:	4c 83       	std	Y+4, r20	; 0x04
     ab4:	5d 83       	std	Y+5, r21	; 0x05
     ab6:	6b 83       	std	Y+3, r22	; 0x03
     ab8:	7a 83       	std	Y+2, r23	; 0x02
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	09 95       	icall
   WIZCHIP.CS._select();
     abe:	e0 91 0e 20 	lds	r30, 0x200E
     ac2:	f0 91 0f 20 	lds	r31, 0x200F
     ac6:	09 95       	icall

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     ac8:	e0 91 14 20 	lds	r30, 0x2014
     acc:	f0 91 15 20 	lds	r31, 0x2015
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     ad4:	e0 91 14 20 	lds	r30, 0x2014
     ad8:	f0 91 15 20 	lds	r31, 0x2015
     adc:	7a 81       	ldd	r23, Y+2	; 0x02
     ade:	87 2f       	mov	r24, r23
     ae0:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     ae2:	e0 91 14 20 	lds	r30, 0x2014
     ae6:	f0 91 15 20 	lds	r31, 0x2015
     aea:	6b 81       	ldd	r22, Y+3	; 0x03
     aec:	86 2f       	mov	r24, r22
     aee:	09 95       	icall
     af0:	4c 81       	ldd	r20, Y+4	; 0x04
     af2:	e4 2e       	mov	r14, r20
     af4:	5d 81       	ldd	r21, Y+5	; 0x05
     af6:	f5 2e       	mov	r15, r21

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
}
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
     af8:	0e 0d       	add	r16, r14
     afa:	1f 1d       	adc	r17, r15
   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
      for(i = 0; i < len; i++,j)
     afc:	08 c0       	rjmp	.+16     	; 0xb0e <WIZCHIP_READ_BUF+0x7c>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
     afe:	e0 91 12 20 	lds	r30, 0x2012
     b02:	f0 91 13 20 	lds	r31, 0x2013
     b06:	09 95       	icall
     b08:	d7 01       	movw	r26, r14
     b0a:	8d 93       	st	X+, r24
     b0c:	7d 01       	movw	r14, r26
   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
      for(i = 0; i < len; i++,j)
     b0e:	e0 16       	cp	r14, r16
     b10:	f1 06       	cpc	r15, r17
     b12:	a9 f7       	brne	.-22     	; 0xafe <WIZCHIP_READ_BUF+0x6c>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
     b14:	e0 91 10 20 	lds	r30, 0x2010
     b18:	f0 91 11 20 	lds	r31, 0x2011
     b1c:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
     b1e:	e0 91 0c 20 	lds	r30, 0x200C
     b22:	f0 91 0d 20 	lds	r31, 0x200D
}
     b26:	25 96       	adiw	r28, 0x05	; 5
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
     b38:	09 94       	ijmp

00000b3a <WIZCHIP_WRITE_BUF>:
}

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	25 97       	sbiw	r28, 0x05	; 5
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	89 01       	movw	r16, r18
   uint16_t i = 0;
   uint16_t j = 0;
   WIZCHIP_CRITICAL_ENTER();
     b52:	e0 91 0a 20 	lds	r30, 0x200A
     b56:	f0 91 0b 20 	lds	r31, 0x200B
     b5a:	4c 83       	std	Y+4, r20	; 0x04
     b5c:	5d 83       	std	Y+5, r21	; 0x05
     b5e:	6b 83       	std	Y+3, r22	; 0x03
     b60:	7a 83       	std	Y+2, r23	; 0x02
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	09 95       	icall
   WIZCHIP.CS._select();
     b66:	e0 91 0e 20 	lds	r30, 0x200E
     b6a:	f0 91 0f 20 	lds	r31, 0x200F
     b6e:	09 95       	icall

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     b70:	e0 91 14 20 	lds	r30, 0x2014
     b74:	f0 91 15 20 	lds	r31, 0x2015
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     b7c:	e0 91 14 20 	lds	r30, 0x2014
     b80:	f0 91 15 20 	lds	r31, 0x2015
     b84:	7a 81       	ldd	r23, Y+2	; 0x02
     b86:	87 2f       	mov	r24, r23
     b88:	09 95       	icall
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     b8a:	e0 91 14 20 	lds	r30, 0x2014
     b8e:	f0 91 15 20 	lds	r31, 0x2015
     b92:	6b 81       	ldd	r22, Y+3	; 0x03
     b94:	86 2f       	mov	r24, r22
     b96:	84 60       	ori	r24, 0x04	; 4
     b98:	09 95       	icall
     b9a:	4c 81       	ldd	r20, Y+4	; 0x04
     b9c:	e4 2e       	mov	r14, r20
     b9e:	5d 81       	ldd	r21, Y+5	; 0x05
     ba0:	f5 2e       	mov	r15, r21

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
}

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
     ba2:	0e 0d       	add	r16, r14
     ba4:	1f 1d       	adc	r17, r15
   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
      for(i = 0; i < len; i++,j)
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <WIZCHIP_WRITE_BUF+0x7e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
     ba8:	e0 91 14 20 	lds	r30, 0x2014
     bac:	f0 91 15 20 	lds	r31, 0x2015
     bb0:	d7 01       	movw	r26, r14
     bb2:	8d 91       	ld	r24, X+
     bb4:	7d 01       	movw	r14, r26
     bb6:	09 95       	icall
   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
      for(i = 0; i < len; i++,j)
     bb8:	e0 16       	cp	r14, r16
     bba:	f1 06       	cpc	r15, r17
     bbc:	a9 f7       	brne	.-22     	; 0xba8 <WIZCHIP_WRITE_BUF+0x6e>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
     bbe:	e0 91 10 20 	lds	r30, 0x2010
     bc2:	f0 91 11 20 	lds	r31, 0x2011
     bc6:	09 95       	icall
   WIZCHIP_CRITICAL_EXIT();
     bc8:	e0 91 0c 20 	lds	r30, 0x200C
     bcc:	f0 91 0d 20 	lds	r31, 0x200D
}
     bd0:	25 96       	adiw	r28, 0x05	; 5
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
     be2:	09 94       	ijmp

00000be4 <getSn_TX_FSR>:
}


uint16_t getSn_TX_FSR(uint8_t sn)
{
     be4:	4f 92       	push	r4
     be6:	5f 92       	push	r5
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
     c04:	24 e0       	ldi	r18, 0x04	; 4
     c06:	82 9f       	mul	r24, r18
     c08:	c0 01       	movw	r24, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	23 e0       	ldi	r18, 0x03	; 3
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	2a 95       	dec	r18
     c16:	e1 f7       	brne	.-8      	; 0xc10 <getSn_TX_FSR+0x2c>
     c18:	6c 01       	movw	r12, r24
     c1a:	20 ee       	ldi	r18, 0xE0	; 224
     c1c:	d2 1a       	sub	r13, r18
     c1e:	ee 24       	eor	r14, r14
     c20:	d7 fc       	sbrc	r13, 7
     c22:	e0 94       	com	r14
     c24:	fe 2c       	mov	r15, r14
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
     c26:	2c 01       	movw	r4, r24
     c28:	2f ed       	ldi	r18, 0xDF	; 223
     c2a:	52 1a       	sub	r5, r18
     c2c:	66 24       	eor	r6, r6
     c2e:	57 fc       	sbrc	r5, 7
     c30:	60 94       	com	r6
     c32:	76 2c       	mov	r7, r6
}


uint16_t getSn_TX_FSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
     c34:	c0 e0       	ldi	r28, 0x00	; 0
     c36:	d0 e0       	ldi	r29, 0x00	; 0
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
     c38:	c7 01       	movw	r24, r14
     c3a:	b6 01       	movw	r22, r12
     c3c:	a8 de       	rcall	.-688    	; 0x98e <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
     c3e:	18 2f       	mov	r17, r24
     c40:	00 e0       	ldi	r16, 0x00	; 0
     c42:	c3 01       	movw	r24, r6
     c44:	b2 01       	movw	r22, r4
     c46:	a3 de       	rcall	.-698    	; 0x98e <WIZCHIP_READ>
     c48:	48 01       	movw	r8, r16
     c4a:	88 0e       	add	r8, r24
     c4c:	91 1c       	adc	r9, r1
      if (val1 != 0)
     c4e:	81 14       	cp	r8, r1
     c50:	91 04       	cpc	r9, r1
     c52:	59 f0       	breq	.+22     	; 0xc6a <getSn_TX_FSR+0x86>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
     c54:	c7 01       	movw	r24, r14
     c56:	b6 01       	movw	r22, r12
     c58:	9a de       	rcall	.-716    	; 0x98e <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
     c5a:	b8 2e       	mov	r11, r24
     c5c:	a1 2c       	mov	r10, r1
     c5e:	c3 01       	movw	r24, r6
     c60:	b2 01       	movw	r22, r4
     c62:	95 de       	rcall	.-726    	; 0x98e <WIZCHIP_READ>
     c64:	e5 01       	movw	r28, r10
     c66:	c8 0f       	add	r28, r24
     c68:	d1 1d       	adc	r29, r1
      }
   }while (val != val1);
     c6a:	c8 15       	cp	r28, r8
     c6c:	d9 05       	cpc	r29, r9
     c6e:	21 f7       	brne	.-56     	; 0xc38 <getSn_TX_FSR+0x54>
   return val;
}
     c70:	ce 01       	movw	r24, r28
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	bf 90       	pop	r11
     c84:	af 90       	pop	r10
     c86:	9f 90       	pop	r9
     c88:	8f 90       	pop	r8
     c8a:	7f 90       	pop	r7
     c8c:	6f 90       	pop	r6
     c8e:	5f 90       	pop	r5
     c90:	4f 90       	pop	r4
     c92:	08 95       	ret

00000c94 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
     c94:	4f 92       	push	r4
     c96:	5f 92       	push	r5
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
     cb4:	24 e0       	ldi	r18, 0x04	; 4
     cb6:	82 9f       	mul	r24, r18
     cb8:	c0 01       	movw	r24, r0
     cba:	11 24       	eor	r1, r1
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	33 e0       	ldi	r19, 0x03	; 3
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	3a 95       	dec	r19
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <getSn_RX_RSR+0x2c>
     cc8:	6c 01       	movw	r12, r24
     cca:	2a ed       	ldi	r18, 0xDA	; 218
     ccc:	d2 1a       	sub	r13, r18
     cce:	ee 24       	eor	r14, r14
     cd0:	d7 fc       	sbrc	r13, 7
     cd2:	e0 94       	com	r14
     cd4:	fe 2c       	mov	r15, r14
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
     cd6:	2c 01       	movw	r4, r24
     cd8:	29 ed       	ldi	r18, 0xD9	; 217
     cda:	52 1a       	sub	r5, r18
     cdc:	66 24       	eor	r6, r6
     cde:	57 fc       	sbrc	r5, 7
     ce0:	60 94       	com	r6
     ce2:	76 2c       	mov	r7, r6
}


uint16_t getSn_RX_RSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
     ce4:	c0 e0       	ldi	r28, 0x00	; 0
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	50 de       	rcall	.-864    	; 0x98e <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
     cee:	18 2f       	mov	r17, r24
     cf0:	00 e0       	ldi	r16, 0x00	; 0
     cf2:	c3 01       	movw	r24, r6
     cf4:	b2 01       	movw	r22, r4
     cf6:	4b de       	rcall	.-874    	; 0x98e <WIZCHIP_READ>
     cf8:	48 01       	movw	r8, r16
     cfa:	88 0e       	add	r8, r24
     cfc:	91 1c       	adc	r9, r1
      if (val1 != 0)
     cfe:	81 14       	cp	r8, r1
     d00:	91 04       	cpc	r9, r1
     d02:	59 f0       	breq	.+22     	; 0xd1a <getSn_RX_RSR+0x86>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
     d04:	c7 01       	movw	r24, r14
     d06:	b6 01       	movw	r22, r12
     d08:	42 de       	rcall	.-892    	; 0x98e <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
     d0a:	b8 2e       	mov	r11, r24
     d0c:	a1 2c       	mov	r10, r1
     d0e:	c3 01       	movw	r24, r6
     d10:	b2 01       	movw	r22, r4
     d12:	3d de       	rcall	.-902    	; 0x98e <WIZCHIP_READ>
     d14:	e5 01       	movw	r28, r10
     d16:	c8 0f       	add	r28, r24
     d18:	d1 1d       	adc	r29, r1
      }
   }while (val != val1);
     d1a:	c8 15       	cp	r28, r8
     d1c:	d9 05       	cpc	r29, r9
     d1e:	21 f7       	brne	.-56     	; 0xce8 <getSn_RX_RSR+0x54>
   return val;
}
     d20:	ce 01       	movw	r24, r28
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	cf 90       	pop	r12
     d32:	bf 90       	pop	r11
     d34:	af 90       	pop	r10
     d36:	9f 90       	pop	r9
     d38:	8f 90       	pop	r8
     d3a:	7f 90       	pop	r7
     d3c:	6f 90       	pop	r6
     d3e:	5f 90       	pop	r5
     d40:	4f 90       	pop	r4
     d42:	08 95       	ret

00000d44 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
     d44:	2f 92       	push	r2
     d46:	3f 92       	push	r3
     d48:	4f 92       	push	r4
     d4a:	5f 92       	push	r5
     d4c:	6f 92       	push	r6
     d4e:	7f 92       	push	r7
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	5b 01       	movw	r10, r22
     d68:	ea 01       	movw	r28, r20
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   uint32_t offset_wiz =0;
   if(len == 0)  return;
     d6a:	20 97       	sbiw	r28, 0x00	; 0
     d6c:	09 f4       	brne	.+2      	; 0xd70 <wiz_send_data+0x2c>
     d6e:	5a c0       	rjmp	.+180    	; 0xe24 <wiz_send_data+0xe0>
   ptr = getSn_TX_WR(sn);
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	89 9f       	mul	r24, r25
     d74:	10 01       	movw	r2, r0
     d76:	11 24       	eor	r1, r1
     d78:	61 01       	movw	r12, r2
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	c8 1a       	sub	r12, r24
     d7e:	d8 0a       	sbc	r13, r24
     d80:	43 e0       	ldi	r20, 0x03	; 3
     d82:	cc 0c       	add	r12, r12
     d84:	dd 1c       	adc	r13, r13
     d86:	4a 95       	dec	r20
     d88:	e1 f7       	brne	.-8      	; 0xd82 <wiz_send_data+0x3e>
     d8a:	26 01       	movw	r4, r12
     d8c:	9c ed       	ldi	r25, 0xDC	; 220
     d8e:	59 1a       	sub	r5, r25
     d90:	66 24       	eor	r6, r6
     d92:	57 fc       	sbrc	r5, 7
     d94:	60 94       	com	r6
     d96:	76 2c       	mov	r7, r6
     d98:	c3 01       	movw	r24, r6
     d9a:	b2 01       	movw	r22, r4
     d9c:	f8 dd       	rcall	.-1040   	; 0x98e <WIZCHIP_READ>
     d9e:	98 2e       	mov	r9, r24
     da0:	8b ed       	ldi	r24, 0xDB	; 219
     da2:	d8 1a       	sub	r13, r24
     da4:	ee 24       	eor	r14, r14
     da6:	d7 fc       	sbrc	r13, 7
     da8:	e0 94       	com	r14
     daa:	fe 2c       	mov	r15, r14
     dac:	c7 01       	movw	r24, r14
     dae:	b6 01       	movw	r22, r12
     db0:	ee dd       	rcall	.-1060   	; 0x98e <WIZCHIP_READ>
     db2:	19 2d       	mov	r17, r9
     db4:	00 e0       	ldi	r16, 0x00	; 0
     db6:	08 0f       	add	r16, r24
     db8:	11 1d       	adc	r17, r1
   
   //addrsel = (((uint32_t)ptr)<<8);
   addrsel = ptr;
     dba:	c8 01       	movw	r24, r16
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
   addrsel = addrsel <<8;
     dc0:	66 27       	eor	r22, r22
     dc2:	78 2f       	mov	r23, r24
     dc4:	89 2f       	mov	r24, r25
     dc6:	9a 2f       	mov	r25, r26
   
   
   offset_wiz = (WIZCHIP_TXBUF_BLOCK(sn) << 3);
     dc8:	91 01       	movw	r18, r2
     dca:	2e 5f       	subi	r18, 0xFE	; 254
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	e3 e0       	ldi	r30, 0x03	; 3
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	ea 95       	dec	r30
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <wiz_send_data+0x8c>
     dd8:	44 27       	eor	r20, r20
     dda:	37 fd       	sbrc	r19, 7
     ddc:	40 95       	com	r20
     dde:	54 2f       	mov	r21, r20
   addrsel = addrsel  + offset_wiz;
     de0:	62 0f       	add	r22, r18
     de2:	73 1f       	adc	r23, r19
     de4:	84 1f       	adc	r24, r20
     de6:	95 1f       	adc	r25, r21
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
     de8:	9e 01       	movw	r18, r28
     dea:	a5 01       	movw	r20, r10
     dec:	a6 de       	rcall	.-692    	; 0xb3a <WIZCHIP_WRITE_BUF>
   
   ptr += len;
     dee:	c0 0f       	add	r28, r16
     df0:	d1 1f       	adc	r29, r17
   setSn_TX_WR(sn,ptr);
     df2:	4d 2f       	mov	r20, r29
     df4:	c3 01       	movw	r24, r6
     df6:	b2 01       	movw	r22, r4
     df8:	0b de       	rcall	.-1002   	; 0xa10 <WIZCHIP_WRITE>
     dfa:	4c 2f       	mov	r20, r28
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	bf 90       	pop	r11
     e12:	af 90       	pop	r10
     e14:	9f 90       	pop	r9
     e16:	7f 90       	pop	r7
     e18:	6f 90       	pop	r6
     e1a:	5f 90       	pop	r5
     e1c:	4f 90       	pop	r4
     e1e:	3f 90       	pop	r3
     e20:	2f 90       	pop	r2
   offset_wiz = (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = addrsel  + offset_wiz;
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
   
   ptr += len;
   setSn_TX_WR(sn,ptr);
     e22:	f6 cd       	rjmp	.-1044   	; 0xa10 <WIZCHIP_WRITE>
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	bf 90       	pop	r11
     e36:	af 90       	pop	r10
     e38:	9f 90       	pop	r9
     e3a:	7f 90       	pop	r7
     e3c:	6f 90       	pop	r6
     e3e:	5f 90       	pop	r5
     e40:	4f 90       	pop	r4
     e42:	3f 90       	pop	r3
     e44:	2f 90       	pop	r2
     e46:	08 95       	ret

00000e48 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
     e48:	2f 92       	push	r2
     e4a:	3f 92       	push	r3
     e4c:	4f 92       	push	r4
     e4e:	5f 92       	push	r5
     e50:	6f 92       	push	r6
     e52:	7f 92       	push	r7
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	5b 01       	movw	r10, r22
     e6c:	ea 01       	movw	r28, r20
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   uint32_t RX_Buffer_Add=0;
   if(len == 0) return;
     e6e:	20 97       	sbiw	r28, 0x00	; 0
     e70:	09 f4       	brne	.+2      	; 0xe74 <wiz_recv_data+0x2c>
     e72:	5a c0       	rjmp	.+180    	; 0xf28 <wiz_recv_data+0xe0>
   ptr = getSn_RX_RD(sn);
     e74:	94 e0       	ldi	r25, 0x04	; 4
     e76:	89 9f       	mul	r24, r25
     e78:	10 01       	movw	r2, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	61 01       	movw	r12, r2
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	c8 1a       	sub	r12, r24
     e82:	d8 0a       	sbc	r13, r24
     e84:	f3 e0       	ldi	r31, 0x03	; 3
     e86:	cc 0c       	add	r12, r12
     e88:	dd 1c       	adc	r13, r13
     e8a:	fa 95       	dec	r31
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <wiz_recv_data+0x3e>
     e8e:	26 01       	movw	r4, r12
     e90:	98 ed       	ldi	r25, 0xD8	; 216
     e92:	59 1a       	sub	r5, r25
     e94:	66 24       	eor	r6, r6
     e96:	57 fc       	sbrc	r5, 7
     e98:	60 94       	com	r6
     e9a:	76 2c       	mov	r7, r6
     e9c:	c3 01       	movw	r24, r6
     e9e:	b2 01       	movw	r22, r4
     ea0:	76 dd       	rcall	.-1300   	; 0x98e <WIZCHIP_READ>
     ea2:	98 2e       	mov	r9, r24
     ea4:	87 ed       	ldi	r24, 0xD7	; 215
     ea6:	d8 1a       	sub	r13, r24
     ea8:	ee 24       	eor	r14, r14
     eaa:	d7 fc       	sbrc	r13, 7
     eac:	e0 94       	com	r14
     eae:	fe 2c       	mov	r15, r14
     eb0:	c7 01       	movw	r24, r14
     eb2:	b6 01       	movw	r22, r12
     eb4:	6c dd       	rcall	.-1320   	; 0x98e <WIZCHIP_READ>
     eb6:	19 2d       	mov	r17, r9
     eb8:	00 e0       	ldi	r16, 0x00	; 0
     eba:	08 0f       	add	r16, r24
     ebc:	11 1d       	adc	r17, r1
   
   //addrsel = (((uint32_t)ptr)<<8);
   addrsel = ptr;
     ebe:	c8 01       	movw	r24, r16
     ec0:	a0 e0       	ldi	r26, 0x00	; 0
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
   addrsel = addrsel <<8;
     ec4:	66 27       	eor	r22, r22
     ec6:	78 2f       	mov	r23, r24
     ec8:	89 2f       	mov	r24, r25
     eca:	9a 2f       	mov	r25, r26
 
   RX_Buffer_Add = (WIZCHIP_RXBUF_BLOCK(sn) << 3);
     ecc:	91 01       	movw	r18, r2
     ece:	2d 5f       	subi	r18, 0xFD	; 253
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	43 e0       	ldi	r20, 0x03	; 3
     ed4:	22 0f       	add	r18, r18
     ed6:	33 1f       	adc	r19, r19
     ed8:	4a 95       	dec	r20
     eda:	e1 f7       	brne	.-8      	; 0xed4 <wiz_recv_data+0x8c>
     edc:	44 27       	eor	r20, r20
     ede:	37 fd       	sbrc	r19, 7
     ee0:	40 95       	com	r20
     ee2:	54 2f       	mov	r21, r20
   addrsel = addrsel+RX_Buffer_Add;
     ee4:	62 0f       	add	r22, r18
     ee6:	73 1f       	adc	r23, r19
     ee8:	84 1f       	adc	r24, r20
     eea:	95 1f       	adc	r25, r21
   
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
     eec:	9e 01       	movw	r18, r28
     eee:	a5 01       	movw	r20, r10
     ef0:	d0 dd       	rcall	.-1120   	; 0xa92 <WIZCHIP_READ_BUF>
   ptr += len;
     ef2:	c0 0f       	add	r28, r16
     ef4:	d1 1f       	adc	r29, r17
   
   setSn_RX_RD(sn,ptr);
     ef6:	4d 2f       	mov	r20, r29
     ef8:	c3 01       	movw	r24, r6
     efa:	b2 01       	movw	r22, r4
     efc:	89 dd       	rcall	.-1262   	; 0xa10 <WIZCHIP_WRITE>
     efe:	4c 2f       	mov	r20, r28
     f00:	c7 01       	movw	r24, r14
     f02:	b6 01       	movw	r22, r12
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	9f 90       	pop	r9
     f1a:	7f 90       	pop	r7
     f1c:	6f 90       	pop	r6
     f1e:	5f 90       	pop	r5
     f20:	4f 90       	pop	r4
     f22:	3f 90       	pop	r3
     f24:	2f 90       	pop	r2
   addrsel = addrsel+RX_Buffer_Add;
   
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
   ptr += len;
   
   setSn_RX_RD(sn,ptr);
     f26:	74 cd       	rjmp	.-1304   	; 0xa10 <WIZCHIP_WRITE>
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	7f 90       	pop	r7
     f40:	6f 90       	pop	r6
     f42:	5f 90       	pop	r5
     f44:	4f 90       	pop	r4
     f46:	3f 90       	pop	r3
     f48:	2f 90       	pop	r2
     f4a:	08 95       	ret

00000f4c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
     f4c:	7f 92       	push	r7
     f4e:	8f 92       	push	r8
     f50:	9f 92       	push	r9
     f52:	af 92       	push	r10
     f54:	bf 92       	push	r11
     f56:	cf 92       	push	r12
     f58:	df 92       	push	r13
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;
   ptr = getSn_RX_RD(sn);
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	89 9f       	mul	r24, r25
     f6c:	60 01       	movw	r12, r0
     f6e:	11 24       	eor	r1, r1
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	c8 1a       	sub	r12, r24
     f74:	d8 0a       	sbc	r13, r24
     f76:	53 e0       	ldi	r21, 0x03	; 3
     f78:	cc 0c       	add	r12, r12
     f7a:	dd 1c       	adc	r13, r13
     f7c:	5a 95       	dec	r21
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <wiz_recv_ignore+0x2c>
     f80:	46 01       	movw	r8, r12
     f82:	98 ed       	ldi	r25, 0xD8	; 216
     f84:	99 1a       	sub	r9, r25
     f86:	aa 24       	eor	r10, r10
     f88:	97 fc       	sbrc	r9, 7
     f8a:	a0 94       	com	r10
     f8c:	ba 2c       	mov	r11, r10
     f8e:	c5 01       	movw	r24, r10
     f90:	b4 01       	movw	r22, r8
     f92:	fd dc       	rcall	.-1542   	; 0x98e <WIZCHIP_READ>
     f94:	78 2e       	mov	r7, r24
     f96:	87 ed       	ldi	r24, 0xD7	; 215
     f98:	d8 1a       	sub	r13, r24
     f9a:	ee 24       	eor	r14, r14
     f9c:	d7 fc       	sbrc	r13, 7
     f9e:	e0 94       	com	r14
     fa0:	fe 2c       	mov	r15, r14
     fa2:	c7 01       	movw	r24, r14
     fa4:	b6 01       	movw	r22, r12
     fa6:	f3 dc       	rcall	.-1562   	; 0x98e <WIZCHIP_READ>
     fa8:	17 2d       	mov	r17, r7
     faa:	00 e0       	ldi	r16, 0x00	; 0
     fac:	08 0f       	add	r16, r24
     fae:	11 1d       	adc	r17, r1
   ptr += len;
     fb0:	0c 0f       	add	r16, r28
     fb2:	1d 1f       	adc	r17, r29
   setSn_RX_RD(sn,ptr);
     fb4:	41 2f       	mov	r20, r17
     fb6:	c5 01       	movw	r24, r10
     fb8:	b4 01       	movw	r22, r8
     fba:	2a dd       	rcall	.-1452   	; 0xa10 <WIZCHIP_WRITE>
     fbc:	40 2f       	mov	r20, r16
     fbe:	c7 01       	movw	r24, r14
     fc0:	b6 01       	movw	r22, r12
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	7f 90       	pop	r7
void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
   uint16_t ptr = 0;
   ptr = getSn_RX_RD(sn);
   ptr += len;
   setSn_RX_RD(sn,ptr);
     fdc:	19 cd       	rjmp	.-1486   	; 0xa10 <WIZCHIP_WRITE>

00000fde <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
     fde:	08 95       	ret

00000fe0 <wizchip_cris_exit>:
     fe0:	08 95       	ret

00000fe2 <wizchip_cs_select>:
     fe2:	08 95       	ret

00000fe4 <wizchip_cs_deselect>:
     fe4:	08 95       	ret

00000fe6 <wizchip_bus_readbyte>:
     fe6:	fb 01       	movw	r30, r22
     fe8:	80 81       	ld	r24, Z
     fea:	08 95       	ret

00000fec <wizchip_bus_writebyte>:
     fec:	fb 01       	movw	r30, r22
     fee:	40 83       	st	Z, r20
     ff0:	08 95       	ret

00000ff2 <wizchip_spi_readbyte>:
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	08 95       	ret

00000ff6 <wizchip_spi_writebyte>:
     ff6:	08 95       	ret

00000ff8 <reg_wizchip_cs_cbfunc>:
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	19 f0       	breq	.+6      	; 0x1002 <reg_wizchip_cs_cbfunc+0xa>
     ffc:	61 15       	cp	r22, r1
     ffe:	71 05       	cpc	r23, r1
    1000:	69 f4       	brne	.+26     	; 0x101c <reg_wizchip_cs_cbfunc+0x24>
    1002:	81 ef       	ldi	r24, 0xF1	; 241
    1004:	97 e0       	ldi	r25, 0x07	; 7
    1006:	80 93 0e 20 	sts	0x200E, r24
    100a:	90 93 0f 20 	sts	0x200F, r25
    100e:	82 ef       	ldi	r24, 0xF2	; 242
    1010:	97 e0       	ldi	r25, 0x07	; 7
    1012:	80 93 10 20 	sts	0x2010, r24
    1016:	90 93 11 20 	sts	0x2011, r25
    101a:	08 95       	ret
    101c:	80 93 0e 20 	sts	0x200E, r24
    1020:	90 93 0f 20 	sts	0x200F, r25
    1024:	60 93 10 20 	sts	0x2010, r22
    1028:	70 93 11 20 	sts	0x2011, r23
    102c:	08 95       	ret

0000102e <reg_wizchip_spi_cbfunc>:
    102e:	20 91 02 20 	lds	r18, 0x2002
    1032:	30 91 03 20 	lds	r19, 0x2003
    1036:	31 ff       	sbrs	r19, 1
    1038:	1b c0       	rjmp	.+54     	; 0x1070 <reg_wizchip_spi_cbfunc+0x42>
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	19 f0       	breq	.+6      	; 0x1044 <reg_wizchip_spi_cbfunc+0x16>
    103e:	61 15       	cp	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	69 f4       	brne	.+26     	; 0x105e <reg_wizchip_spi_cbfunc+0x30>
    1044:	89 ef       	ldi	r24, 0xF9	; 249
    1046:	97 e0       	ldi	r25, 0x07	; 7
    1048:	80 93 12 20 	sts	0x2012, r24
    104c:	90 93 13 20 	sts	0x2013, r25
    1050:	8b ef       	ldi	r24, 0xFB	; 251
    1052:	97 e0       	ldi	r25, 0x07	; 7
    1054:	80 93 14 20 	sts	0x2014, r24
    1058:	90 93 15 20 	sts	0x2015, r25
    105c:	08 95       	ret
    105e:	80 93 12 20 	sts	0x2012, r24
    1062:	90 93 13 20 	sts	0x2013, r25
    1066:	60 93 14 20 	sts	0x2014, r22
    106a:	70 93 15 20 	sts	0x2015, r23
    106e:	08 95       	ret
    1070:	ff cf       	rjmp	.-2      	; 0x1070 <reg_wizchip_spi_cbfunc+0x42>

00001072 <wizchip_sw_reset>:
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	62 97       	sbiw	r28, 0x12	; 18
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	26 e0       	ldi	r18, 0x06	; 6
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	ae 01       	movw	r20, r28
    1086:	4f 5f       	subi	r20, 0xFF	; 255
    1088:	5f 4f       	sbci	r21, 0xFF	; 255
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	79 e0       	ldi	r23, 0x09	; 9
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	ff dc       	rcall	.-1538   	; 0xa92 <WIZCHIP_READ_BUF>
    1094:	24 e0       	ldi	r18, 0x04	; 4
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	ae 01       	movw	r20, r28
    109a:	41 5f       	subi	r20, 0xF1	; 241
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	71 e0       	ldi	r23, 0x01	; 1
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	f5 dc       	rcall	.-1558   	; 0xa92 <WIZCHIP_READ_BUF>
    10a8:	24 e0       	ldi	r18, 0x04	; 4
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	ae 01       	movw	r20, r28
    10ae:	45 5f       	subi	r20, 0xF5	; 245
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	75 e0       	ldi	r23, 0x05	; 5
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	eb dc       	rcall	.-1578   	; 0xa92 <WIZCHIP_READ_BUF>
    10bc:	24 e0       	ldi	r18, 0x04	; 4
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	ae 01       	movw	r20, r28
    10c2:	49 5f       	subi	r20, 0xF9	; 249
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	7f e0       	ldi	r23, 0x0F	; 15
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	e1 dc       	rcall	.-1598   	; 0xa92 <WIZCHIP_READ_BUF>
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	cb 01       	movw	r24, r22
    10d8:	9b dc       	rcall	.-1738   	; 0xa10 <WIZCHIP_WRITE>
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	cb 01       	movw	r24, r22
    10e0:	56 dc       	rcall	.-1876   	; 0x98e <WIZCHIP_READ>
    10e2:	26 e0       	ldi	r18, 0x06	; 6
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	ae 01       	movw	r20, r28
    10e8:	4f 5f       	subi	r20, 0xFF	; 255
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	79 e0       	ldi	r23, 0x09	; 9
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	22 dd       	rcall	.-1468   	; 0xb3a <WIZCHIP_WRITE_BUF>
    10f6:	24 e0       	ldi	r18, 0x04	; 4
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	ae 01       	movw	r20, r28
    10fc:	41 5f       	subi	r20, 0xF1	; 241
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	71 e0       	ldi	r23, 0x01	; 1
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	18 dd       	rcall	.-1488   	; 0xb3a <WIZCHIP_WRITE_BUF>
    110a:	24 e0       	ldi	r18, 0x04	; 4
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	ae 01       	movw	r20, r28
    1110:	45 5f       	subi	r20, 0xF5	; 245
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	75 e0       	ldi	r23, 0x05	; 5
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e dd       	rcall	.-1508   	; 0xb3a <WIZCHIP_WRITE_BUF>
    111e:	24 e0       	ldi	r18, 0x04	; 4
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	ae 01       	movw	r20, r28
    1124:	49 5f       	subi	r20, 0xF9	; 249
    1126:	5f 4f       	sbci	r21, 0xFF	; 255
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	7f e0       	ldi	r23, 0x0F	; 15
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	04 dd       	rcall	.-1528   	; 0xb3a <WIZCHIP_WRITE_BUF>
    1132:	62 96       	adiw	r28, 0x12	; 18
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <wizchip_init>:
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	7c 01       	movw	r14, r24
    114c:	8b 01       	movw	r16, r22
    114e:	91 df       	rcall	.-222    	; 0x1072 <wizchip_sw_reset>
    1150:	e1 14       	cp	r14, r1
    1152:	f1 04       	cpc	r15, r1
    1154:	21 f4       	brne	.+8      	; 0x115e <wizchip_init+0x20>
    1156:	01 15       	cp	r16, r1
    1158:	11 05       	cpc	r17, r1
    115a:	29 f5       	brne	.+74     	; 0x11a6 <wizchip_init+0x68>
    115c:	22 c0       	rjmp	.+68     	; 0x11a2 <wizchip_init+0x64>
    115e:	f7 01       	movw	r30, r14
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	21 91       	ld	r18, Z+
    1166:	82 0f       	add	r24, r18
    1168:	9f 5f       	subi	r25, 0xFF	; 255
    116a:	98 30       	cpi	r25, 0x08	; 8
    116c:	d9 f7       	brne	.-10     	; 0x1164 <wizchip_init+0x26>
    116e:	81 31       	cpi	r24, 0x11	; 17
    1170:	14 f0       	brlt	.+4      	; 0x1176 <wizchip_init+0x38>
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	38 c0       	rjmp	.+112    	; 0x11e6 <wizchip_init+0xa8>
    1176:	c1 e0       	ldi	r28, 0x01	; 1
    1178:	d0 e0       	ldi	r29, 0x00	; 0
    117a:	f7 01       	movw	r30, r14
    117c:	41 91       	ld	r20, Z+
    117e:	7f 01       	movw	r14, r30
    1180:	be 01       	movw	r22, r28
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	9a 95       	dec	r25
    118a:	e1 f7       	brne	.-8      	; 0x1184 <wizchip_init+0x46>
    118c:	71 5e       	subi	r23, 0xE1	; 225
    118e:	88 27       	eor	r24, r24
    1190:	77 fd       	sbrc	r23, 7
    1192:	80 95       	com	r24
    1194:	98 2f       	mov	r25, r24
    1196:	3c dc       	rcall	.-1928   	; 0xa10 <WIZCHIP_WRITE>
    1198:	24 96       	adiw	r28, 0x04	; 4
    119a:	c1 32       	cpi	r28, 0x21	; 33
    119c:	d1 05       	cpc	r29, r1
    119e:	69 f7       	brne	.-38     	; 0x117a <wizchip_init+0x3c>
    11a0:	da cf       	rjmp	.-76     	; 0x1156 <wizchip_init+0x18>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	20 c0       	rjmp	.+64     	; 0x11e6 <wizchip_init+0xa8>
    11a6:	f8 01       	movw	r30, r16
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	21 91       	ld	r18, Z+
    11ae:	82 0f       	add	r24, r18
    11b0:	9f 5f       	subi	r25, 0xFF	; 255
    11b2:	98 30       	cpi	r25, 0x08	; 8
    11b4:	d9 f7       	brne	.-10     	; 0x11ac <wizchip_init+0x6e>
    11b6:	81 31       	cpi	r24, 0x11	; 17
    11b8:	e4 f6       	brge	.-72     	; 0x1172 <wizchip_init+0x34>
    11ba:	c1 e0       	ldi	r28, 0x01	; 1
    11bc:	d0 e0       	ldi	r29, 0x00	; 0
    11be:	f8 01       	movw	r30, r16
    11c0:	41 91       	ld	r20, Z+
    11c2:	8f 01       	movw	r16, r30
    11c4:	be 01       	movw	r22, r28
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	8a 95       	dec	r24
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <wizchip_init+0x8a>
    11d0:	72 5e       	subi	r23, 0xE2	; 226
    11d2:	88 27       	eor	r24, r24
    11d4:	77 fd       	sbrc	r23, 7
    11d6:	80 95       	com	r24
    11d8:	98 2f       	mov	r25, r24
    11da:	1a dc       	rcall	.-1996   	; 0xa10 <WIZCHIP_WRITE>
    11dc:	24 96       	adiw	r28, 0x04	; 4
    11de:	c1 32       	cpi	r28, 0x21	; 33
    11e0:	d1 05       	cpc	r29, r1
    11e2:	69 f7       	brne	.-38     	; 0x11be <wizchip_init+0x80>
    11e4:	de cf       	rjmp	.-68     	; 0x11a2 <wizchip_init+0x64>
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	08 95       	ret

000011f4 <wizchip_clrinterrupt>:
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	ec 01       	movw	r28, r24
    11fa:	ac 01       	movw	r20, r24
    11fc:	40 7f       	andi	r20, 0xF0	; 240
    11fe:	55 27       	eor	r21, r21
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	75 e1       	ldi	r23, 0x15	; 21
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	03 dc       	rcall	.-2042   	; 0xa10 <WIZCHIP_WRITE>
    120a:	4d 2f       	mov	r20, r29
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	77 e1       	ldi	r23, 0x17	; 23
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	fb cb       	rjmp	.-2058   	; 0xa10 <WIZCHIP_WRITE>

0000121a <wizchip_getinterrupt>:
    121a:	cf 93       	push	r28
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	75 e1       	ldi	r23, 0x15	; 21
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	b4 db       	rcall	.-2200   	; 0x98e <WIZCHIP_READ>
    1226:	c8 2f       	mov	r28, r24
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	77 e1       	ldi	r23, 0x17	; 23
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	ae db       	rcall	.-2212   	; 0x98e <WIZCHIP_READ>
    1232:	38 2f       	mov	r19, r24
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	c0 7f       	andi	r28, 0xF0	; 240
    1238:	2c 0f       	add	r18, r28
    123a:	31 1d       	adc	r19, r1
    123c:	c9 01       	movw	r24, r18
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <wizchip_setinterruptmask>:
    1242:	cf 93       	push	r28
    1244:	c9 2f       	mov	r28, r25
    1246:	48 2f       	mov	r20, r24
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	76 e1       	ldi	r23, 0x16	; 22
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	df db       	rcall	.-2114   	; 0xa10 <WIZCHIP_WRITE>
    1252:	4c 2f       	mov	r20, r28
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	78 e1       	ldi	r23, 0x18	; 24
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	cf 91       	pop	r28
    125e:	d8 cb       	rjmp	.-2128   	; 0xa10 <WIZCHIP_WRITE>

00001260 <wizchip_getinterruptmask>:
    1260:	cf 93       	push	r28
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	76 e1       	ldi	r23, 0x16	; 22
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	91 db       	rcall	.-2270   	; 0x98e <WIZCHIP_READ>
    126c:	c8 2f       	mov	r28, r24
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	78 e1       	ldi	r23, 0x18	; 24
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	8b db       	rcall	.-2282   	; 0x98e <WIZCHIP_READ>
    1278:	38 2f       	mov	r19, r24
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	2c 0f       	add	r18, r28
    127e:	31 1d       	adc	r19, r1
    1280:	c9 01       	movw	r24, r18
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <wizphy_getphylink>:
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	7e e2       	ldi	r23, 0x2E	; 46
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	7f db       	rcall	.-2306   	; 0x98e <WIZCHIP_READ>
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	08 95       	ret

00001294 <wizphy_getphypmode>:
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	7e e2       	ldi	r23, 0x2E	; 46
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	78 db       	rcall	.-2320   	; 0x98e <WIZCHIP_READ>
    129e:	98 2f       	mov	r25, r24
    12a0:	90 73       	andi	r25, 0x30	; 48
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <wizphy_getphypmode+0x14>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret

000012aa <wizphy_reset>:
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	7e e2       	ldi	r23, 0x2E	; 46
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	6d db       	rcall	.-2342   	; 0x98e <WIZCHIP_READ>
    12b4:	48 2f       	mov	r20, r24
    12b6:	4f 77       	andi	r20, 0x7F	; 127
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	7e e2       	ldi	r23, 0x2E	; 46
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a7 db       	rcall	.-2226   	; 0xa10 <WIZCHIP_WRITE>
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	7e e2       	ldi	r23, 0x2E	; 46
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	61 db       	rcall	.-2366   	; 0x98e <WIZCHIP_READ>
    12cc:	48 2f       	mov	r20, r24
    12ce:	40 68       	ori	r20, 0x80	; 128
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	7e e2       	ldi	r23, 0x2E	; 46
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9b cb       	rjmp	.-2250   	; 0xa10 <WIZCHIP_WRITE>

000012da <wizphy_setphyconf>:
    12da:	fc 01       	movw	r30, r24
    12dc:	80 81       	ld	r24, Z
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <wizphy_setphyconf+0xc>
    12e2:	40 e4       	ldi	r20, 0x40	; 64
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <wizphy_setphyconf+0xe>
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	81 81       	ldd	r24, Z+1	; 0x01
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <wizphy_setphyconf+0x18>
    12ee:	48 63       	ori	r20, 0x38	; 56
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <wizphy_setphyconf+0x32>
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	91 30       	cpi	r25, 0x01	; 1
    12f8:	31 f4       	brne	.+12     	; 0x1306 <wizphy_setphyconf+0x2c>
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	11 f4       	brne	.+4      	; 0x1302 <wizphy_setphyconf+0x28>
    12fe:	48 61       	ori	r20, 0x18	; 24
    1300:	05 c0       	rjmp	.+10     	; 0x130c <wizphy_setphyconf+0x32>
    1302:	48 60       	ori	r20, 0x08	; 8
    1304:	03 c0       	rjmp	.+6      	; 0x130c <wizphy_setphyconf+0x32>
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	09 f4       	brne	.+2      	; 0x130c <wizphy_setphyconf+0x32>
    130a:	40 61       	ori	r20, 0x10	; 16
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	7e e2       	ldi	r23, 0x2E	; 46
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	7d db       	rcall	.-2310   	; 0xa10 <WIZCHIP_WRITE>
    1316:	c9 cf       	rjmp	.-110    	; 0x12aa <wizphy_reset>

00001318 <wizphy_getphyconf>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	7e e2       	ldi	r23, 0x2E	; 46
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	33 db       	rcall	.-2458   	; 0x98e <WIZCHIP_READ>
    1328:	86 fb       	bst	r24, 6
    132a:	99 27       	eor	r25, r25
    132c:	90 f9       	bld	r25, 0
    132e:	98 83       	st	Y, r25
    1330:	88 73       	andi	r24, 0x38	; 56
    1332:	80 32       	cpi	r24, 0x20	; 32
    1334:	11 f0       	breq	.+4      	; 0x133a <wizphy_getphyconf+0x22>
    1336:	88 33       	cpi	r24, 0x38	; 56
    1338:	19 f4       	brne	.+6      	; 0x1340 <wizphy_getphyconf+0x28>
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	99 83       	std	Y+1, r25	; 0x01
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <wizphy_getphyconf+0x2a>
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	88 31       	cpi	r24, 0x18	; 24
    1344:	21 f0       	breq	.+8      	; 0x134e <wizphy_getphyconf+0x36>
    1346:	80 32       	cpi	r24, 0x20	; 32
    1348:	11 f0       	breq	.+4      	; 0x134e <wizphy_getphyconf+0x36>
    134a:	80 31       	cpi	r24, 0x10	; 16
    134c:	19 f4       	brne	.+6      	; 0x1354 <wizphy_getphyconf+0x3c>
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <wizphy_getphyconf+0x3e>
    1354:	1a 82       	std	Y+2, r1	; 0x02
    1356:	88 31       	cpi	r24, 0x18	; 24
    1358:	21 f0       	breq	.+8      	; 0x1362 <wizphy_getphyconf+0x4a>
    135a:	80 32       	cpi	r24, 0x20	; 32
    135c:	11 f0       	breq	.+4      	; 0x1362 <wizphy_getphyconf+0x4a>
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	19 f4       	brne	.+6      	; 0x1368 <wizphy_getphyconf+0x50>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	01 c0       	rjmp	.+2      	; 0x136a <wizphy_getphyconf+0x52>
    1368:	1b 82       	std	Y+3, r1	; 0x03
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    1370:	cf 93       	push	r28
    1372:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	7e e2       	ldi	r23, 0x2E	; 46
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	08 db       	rcall	.-2544   	; 0x98e <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    137e:	86 fd       	sbrc	r24, 6
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <wizphy_setphypmode+0x16>
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	1a c0       	rjmp	.+52     	; 0x13ba <wizphy_setphypmode+0x4a>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    1386:	48 2f       	mov	r20, r24
    1388:	47 7c       	andi	r20, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    138a:	c1 30       	cpi	r28, 0x01	; 1
    138c:	11 f4       	brne	.+4      	; 0x1392 <wizphy_setphypmode+0x22>
      tmp |= PHYCFGR_OPMDC_PDOWN;
    138e:	40 63       	ori	r20, 0x30	; 48
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <wizphy_setphypmode+0x24>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    1392:	48 63       	ori	r20, 0x38	; 56
   setPHYCFGR(tmp);
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	7e e2       	ldi	r23, 0x2E	; 46
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	39 db       	rcall	.-2446   	; 0xa10 <WIZCHIP_WRITE>
   wizphy_reset();
    139e:	85 df       	rcall	.-246    	; 0x12aa <wizphy_reset>
   tmp = getPHYCFGR();
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	7e e2       	ldi	r23, 0x2E	; 46
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	f2 da       	rcall	.-2588   	; 0x98e <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
    13aa:	c1 30       	cpi	r28, 0x01	; 1
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <wizphy_setphypmode+0x42>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    13ae:	80 73       	andi	r24, 0x30	; 48
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <wizphy_setphypmode+0x44>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    13b2:	88 73       	andi	r24, 0x38	; 56
    13b4:	88 23       	and	r24, r24
    13b6:	29 f3       	breq	.-54     	; 0x1382 <wizphy_setphypmode+0x12>
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
   }
   return -1;
}
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <ctlwizchip>:
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	eb 01       	movw	r28, r22
   uint8_t tmp = 0;
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
    13c6:	87 30       	cpi	r24, 0x07	; 7
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <ctlwizchip+0x10>
    13cc:	55 c0       	rjmp	.+170    	; 0x1478 <ctlwizchip+0xba>
    13ce:	78 f4       	brcc	.+30     	; 0x13ee <ctlwizchip+0x30>
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	b1 f1       	breq	.+108    	; 0x1442 <ctlwizchip+0x84>
    13d6:	28 f4       	brcc	.+10     	; 0x13e2 <ctlwizchip+0x24>
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	21 f1       	breq	.+72     	; 0x1426 <ctlwizchip+0x68>
    13de:	a8 f5       	brcc	.+106    	; 0x144a <ctlwizchip+0x8c>
    13e0:	20 c0       	rjmp	.+64     	; 0x1422 <ctlwizchip+0x64>
    13e2:	85 30       	cpi	r24, 0x05	; 5
    13e4:	91 05       	cpc	r25, r1
    13e6:	b9 f1       	breq	.+110    	; 0x1456 <ctlwizchip+0x98>
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <ctlwizchip+0x2e>
    13ea:	39 c0       	rjmp	.+114    	; 0x145e <ctlwizchip+0xa0>
    13ec:	30 c0       	rjmp	.+96     	; 0x144e <ctlwizchip+0x90>
    13ee:	8b 30       	cpi	r24, 0x0B	; 11
    13f0:	91 05       	cpc	r25, r1
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <ctlwizchip+0x38>
    13f4:	69 c0       	rjmp	.+210    	; 0x14c8 <ctlwizchip+0x10a>
    13f6:	38 f4       	brcc	.+14     	; 0x1406 <ctlwizchip+0x48>
    13f8:	89 30       	cpi	r24, 0x09	; 9
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <ctlwizchip+0x42>
    13fe:	5f c0       	rjmp	.+190    	; 0x14be <ctlwizchip+0x100>
    1400:	08 f0       	brcs	.+2      	; 0x1404 <ctlwizchip+0x46>
    1402:	5f c0       	rjmp	.+190    	; 0x14c2 <ctlwizchip+0x104>
    1404:	4b c0       	rjmp	.+150    	; 0x149c <ctlwizchip+0xde>
    1406:	8d 30       	cpi	r24, 0x0D	; 13
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <ctlwizchip+0x50>
    140c:	60 c0       	rjmp	.+192    	; 0x14ce <ctlwizchip+0x110>
    140e:	08 f4       	brcc	.+2      	; 0x1412 <ctlwizchip+0x54>
    1410:	6b c0       	rjmp	.+214    	; 0x14e8 <ctlwizchip+0x12a>
    1412:	8e 30       	cpi	r24, 0x0E	; 14
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <ctlwizchip+0x5c>
    1418:	5f c0       	rjmp	.+190    	; 0x14d8 <ctlwizchip+0x11a>
    141a:	0f 97       	sbiw	r24, 0x0f	; 15
    141c:	09 f4       	brne	.+2      	; 0x1420 <ctlwizchip+0x62>
    141e:	61 c0       	rjmp	.+194    	; 0x14e2 <ctlwizchip+0x124>
    1420:	5e c0       	rjmp	.+188    	; 0x14de <ctlwizchip+0x120>
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    1422:	27 de       	rcall	.-946    	; 0x1072 <wizchip_sw_reset>
    1424:	61 c0       	rjmp	.+194    	; 0x14e8 <ctlwizchip+0x12a>
         break;
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    1426:	20 97       	sbiw	r28, 0x00	; 0
    1428:	21 f0       	breq	.+8      	; 0x1432 <ctlwizchip+0x74>
         {
            ptmp[0] = (uint8_t*)arg;
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    142a:	68 5f       	subi	r22, 0xF8	; 248
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	ce 01       	movw	r24, r28
    1430:	04 c0       	rjmp	.+8      	; 0x143a <ctlwizchip+0x7c>
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
   uint8_t tmp = 0;
   uint8_t* ptmp[2] = {0,0};
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
         break;
      default:
         return -1;
   }
   return 0;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
         if(arg != 0) 
         {
            ptmp[0] = (uint8_t*)arg;
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);;
    1440:	7e ce       	rjmp	.-772    	; 0x113e <wizchip_init>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    1442:	88 81       	ld	r24, Y
    1444:	99 81       	ldd	r25, Y+1	; 0x01
    1446:	d6 de       	rcall	.-596    	; 0x11f4 <wizchip_clrinterrupt>
    1448:	4f c0       	rjmp	.+158    	; 0x14e8 <ctlwizchip+0x12a>
         break;
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    144a:	e7 de       	rcall	.-562    	; 0x121a <wizchip_getinterrupt>
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <ctlwizchip+0x9a>
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    144e:	88 81       	ld	r24, Y
    1450:	99 81       	ldd	r25, Y+1	; 0x01
    1452:	f7 de       	rcall	.-530    	; 0x1242 <wizchip_setinterruptmask>
    1454:	49 c0       	rjmp	.+146    	; 0x14e8 <ctlwizchip+0x12a>
         break;         
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    1456:	04 df       	rcall	.-504    	; 0x1260 <wizchip_getinterruptmask>
    1458:	88 83       	st	Y, r24
    145a:	99 83       	std	Y+1, r25	; 0x01
    145c:	45 c0       	rjmp	.+138    	; 0x14e8 <ctlwizchip+0x12a>
         break;
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    145e:	49 81       	ldd	r20, Y+1	; 0x01
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	73 e1       	ldi	r23, 0x13	; 19
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	d3 da       	rcall	.-2650   	; 0xa10 <WIZCHIP_WRITE>
    146a:	48 81       	ld	r20, Y
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	74 e1       	ldi	r23, 0x14	; 20
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	cd da       	rcall	.-2662   	; 0xa10 <WIZCHIP_WRITE>
    1476:	38 c0       	rjmp	.+112    	; 0x14e8 <ctlwizchip+0x12a>
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	73 e1       	ldi	r23, 0x13	; 19
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	86 da       	rcall	.-2804   	; 0x98e <WIZCHIP_READ>
    1482:	18 2f       	mov	r17, r24
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	74 e1       	ldi	r23, 0x14	; 20
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	80 da       	rcall	.-2816   	; 0x98e <WIZCHIP_READ>
    148e:	31 2f       	mov	r19, r17
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	28 0f       	add	r18, r24
    1494:	31 1d       	adc	r19, r1
    1496:	28 83       	st	Y, r18
    1498:	39 83       	std	Y+1, r19	; 0x01
    149a:	26 c0       	rjmp	.+76     	; 0x14e8 <ctlwizchip+0x12a>
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    149c:	80 91 04 20 	lds	r24, 0x2004
    14a0:	88 83       	st	Y, r24
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    14a2:	80 91 05 20 	lds	r24, 0x2005
    14a6:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    14a8:	80 91 06 20 	lds	r24, 0x2006
    14ac:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    14ae:	80 91 07 20 	lds	r24, 0x2007
    14b2:	8b 83       	std	Y+3, r24	; 0x03
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    14b4:	80 91 08 20 	lds	r24, 0x2008
    14b8:	8c 83       	std	Y+4, r24	; 0x04
         ((uint8_t*)arg)[5] = 0;
    14ba:	1d 82       	std	Y+5, r1	; 0x05
    14bc:	15 c0       	rjmp	.+42     	; 0x14e8 <ctlwizchip+0x12a>
         break;
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
    14be:	f5 de       	rcall	.-534    	; 0x12aa <wizphy_reset>
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <ctlwizchip+0x12a>
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    14c2:	cb 01       	movw	r24, r22
    14c4:	0a df       	rcall	.-492    	; 0x12da <wizphy_setphyconf>
    14c6:	10 c0       	rjmp	.+32     	; 0x14e8 <ctlwizchip+0x12a>
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    14c8:	cb 01       	movw	r24, r22
    14ca:	26 df       	rcall	.-436    	; 0x1318 <wizphy_getphyconf>
    14cc:	0d c0       	rjmp	.+26     	; 0x14e8 <ctlwizchip+0x12a>
         break;
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    14ce:	88 81       	ld	r24, Y
         break;
      default:
         return -1;
   }
   return 0;
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    14d6:	4c cf       	rjmp	.-360    	; 0x1370 <wizphy_setphypmode>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    14d8:	dd de       	rcall	.-582    	; 0x1294 <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    14da:	8f 3f       	cpi	r24, 0xFF	; 255
    14dc:	21 f4       	brne	.+8      	; 0x14e6 <ctlwizchip+0x128>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <ctlwizchip+0x12c>
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    14e2:	d1 de       	rcall	.-606    	; 0x1286 <wizphy_getphylink>
    14e4:	fa cf       	rjmp	.-12     	; 0x14da <ctlwizchip+0x11c>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
    14e6:	88 83       	st	Y, r24
         break;
      default:
         return -1;
   }
   return 0;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	08 95       	ret

000014f2 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    14f8:	26 e0       	ldi	r18, 0x06	; 6
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	ac 01       	movw	r20, r24
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	79 e0       	ldi	r23, 0x09	; 9
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	19 db       	rcall	.-2510   	; 0xb3a <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    1508:	ae 01       	movw	r20, r28
    150a:	42 5f       	subi	r20, 0xF2	; 242
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
    150e:	24 e0       	ldi	r18, 0x04	; 4
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	71 e0       	ldi	r23, 0x01	; 1
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0f db       	rcall	.-2530   	; 0xb3a <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    151c:	ae 01       	movw	r20, r28
    151e:	46 5f       	subi	r20, 0xF6	; 246
    1520:	5f 4f       	sbci	r21, 0xFF	; 255
    1522:	24 e0       	ldi	r18, 0x04	; 4
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	75 e0       	ldi	r23, 0x05	; 5
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	05 db       	rcall	.-2550   	; 0xb3a <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    1530:	ae 01       	movw	r20, r28
    1532:	4a 5f       	subi	r20, 0xFA	; 250
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
    1536:	24 e0       	ldi	r18, 0x04	; 4
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	7f e0       	ldi	r23, 0x0F	; 15
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	fb da       	rcall	.-2570   	; 0xb3a <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    1544:	8a 89       	ldd	r24, Y+18	; 0x12
    1546:	80 93 76 20 	sts	0x2076, r24
   _DNS_[1] = pnetinfo->dns[1];
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	80 93 77 20 	sts	0x2077, r24
   _DNS_[2] = pnetinfo->dns[2];
    1550:	8c 89       	ldd	r24, Y+20	; 0x14
    1552:	80 93 78 20 	sts	0x2078, r24
   _DNS_[3] = pnetinfo->dns[3];
    1556:	8d 89       	ldd	r24, Y+21	; 0x15
    1558:	80 93 79 20 	sts	0x2079, r24
   _DHCP_   = pnetinfo->dhcp;
    155c:	8e 89       	ldd	r24, Y+22	; 0x16
    155e:	9f 89       	ldd	r25, Y+23	; 0x17
    1560:	80 93 7a 20 	sts	0x207A, r24
    1564:	90 93 7b 20 	sts	0x207B, r25
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    1574:	26 e0       	ldi	r18, 0x06	; 6
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	ac 01       	movw	r20, r24
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	79 e0       	ldi	r23, 0x09	; 9
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	87 da       	rcall	.-2802   	; 0xa92 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    1584:	ae 01       	movw	r20, r28
    1586:	42 5f       	subi	r20, 0xF2	; 242
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	24 e0       	ldi	r18, 0x04	; 4
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	7d da       	rcall	.-2822   	; 0xa92 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    1598:	ae 01       	movw	r20, r28
    159a:	46 5f       	subi	r20, 0xF6	; 246
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	24 e0       	ldi	r18, 0x04	; 4
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	75 e0       	ldi	r23, 0x05	; 5
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	73 da       	rcall	.-2842   	; 0xa92 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    15ac:	ae 01       	movw	r20, r28
    15ae:	4a 5f       	subi	r20, 0xFA	; 250
    15b0:	5f 4f       	sbci	r21, 0xFF	; 255
    15b2:	24 e0       	ldi	r18, 0x04	; 4
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	7f e0       	ldi	r23, 0x0F	; 15
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	69 da       	rcall	.-2862   	; 0xa92 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    15c0:	80 91 76 20 	lds	r24, 0x2076
    15c4:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    15c6:	80 91 77 20 	lds	r24, 0x2077
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    15cc:	80 91 78 20 	lds	r24, 0x2078
    15d0:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    15d2:	80 91 79 20 	lds	r24, 0x2079
    15d6:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    15d8:	80 91 7a 20 	lds	r24, 0x207A
    15dc:	90 91 7b 20 	lds	r25, 0x207B
    15e0:	8e 8b       	std	Y+22, r24	; 0x16
    15e2:	9f 8b       	std	Y+23, r25	; 0x17
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	ec 01       	movw	r28, r24
   uint8_t tmp = 0;
#if _WIZCHIP_ != 5500   
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    15f0:	85 7c       	andi	r24, 0xC5	; 197
    15f2:	89 2b       	or	r24, r25
    15f4:	61 f4       	brne	.+24     	; 0x160e <wizchip_setnetmode+0x24>
#endif      
   tmp = getMR();
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	cb 01       	movw	r24, r22
    15fc:	c8 d9       	rcall	.-3184   	; 0x98e <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
    15fe:	4c 2f       	mov	r20, r28
    1600:	48 2b       	or	r20, r24
   setMR(tmp);
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	cb 01       	movw	r24, r22
    1608:	03 da       	rcall	.-3066   	; 0xa10 <WIZCHIP_WRITE>
   return 0;
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <wizchip_setnetmode+0x26>
{
   uint8_t tmp = 0;
#if _WIZCHIP_ != 5500   
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    160e:	8f ef       	ldi	r24, 0xFF	; 255
#endif      
   tmp = getMR();
   tmp |= (uint8_t)netmode;
   setMR(tmp);
   return 0;
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	cb 01       	movw	r24, r22
    161c:	b8 d9       	rcall	.-3216   	; 0x98e <WIZCHIP_READ>
}
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	08 95       	ret

00001622 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	ec 01       	movw	r28, r24
   setRCR(nettime->retry_cnt);
    1628:	48 81       	ld	r20, Y
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	7b e1       	ldi	r23, 0x1B	; 27
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	ee d9       	rcall	.-3108   	; 0xa10 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
    1634:	4a 81       	ldd	r20, Y+2	; 0x02
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	79 e1       	ldi	r23, 0x19	; 25
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	e8 d9       	rcall	.-3120   	; 0xa10 <WIZCHIP_WRITE>
    1640:	49 81       	ldd	r20, Y+1	; 0x01
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	7a e1       	ldi	r23, 0x1A	; 26
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
}
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
   setRCR(nettime->retry_cnt);
   setRTR(nettime->time_100us);
    164e:	e0 c9       	rjmp	.-3136   	; 0xa10 <WIZCHIP_WRITE>

00001650 <wizchip_gettimeout>:
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
   nettime->retry_cnt = getRCR();
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	7b e1       	ldi	r23, 0x1B	; 27
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	96 d9       	rcall	.-3284   	; 0x98e <WIZCHIP_READ>
    1662:	88 83       	st	Y, r24
   nettime->time_100us = getRTR();
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	79 e1       	ldi	r23, 0x19	; 25
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	90 d9       	rcall	.-3296   	; 0x98e <WIZCHIP_READ>
    166e:	18 2f       	mov	r17, r24
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	7a e1       	ldi	r23, 0x1A	; 26
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	8a d9       	rcall	.-3308   	; 0x98e <WIZCHIP_READ>
    167a:	31 2f       	mov	r19, r17
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	28 0f       	add	r18, r24
    1680:	31 1d       	adc	r19, r1
    1682:	29 83       	std	Y+1, r18	; 0x01
    1684:	3a 83       	std	Y+2, r19	; 0x02
}
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	08 95       	ret

0000168e <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	eb 01       	movw	r28, r22
   
   switch(cntype)
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	99 f0       	breq	.+38     	; 0x16c0 <ctlnetwork+0x32>
    169a:	28 f4       	brcc	.+10     	; 0x16a6 <ctlnetwork+0x18>
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	51 f0       	breq	.+20     	; 0x16b4 <ctlnetwork+0x26>
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f4       	brne	.+60     	; 0x16e0 <ctlnetwork+0x52>
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <ctlnetwork+0x2c>
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	91 05       	cpc	r25, r1
    16aa:	99 f0       	breq	.+38     	; 0x16d2 <ctlnetwork+0x44>
    16ac:	70 f0       	brcs	.+28     	; 0x16ca <ctlnetwork+0x3c>
    16ae:	05 97       	sbiw	r24, 0x05	; 5
    16b0:	b9 f4       	brne	.+46     	; 0x16e0 <ctlnetwork+0x52>
    16b2:	13 c0       	rjmp	.+38     	; 0x16da <ctlnetwork+0x4c>
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
    16b4:	cb 01       	movw	r24, r22
    16b6:	1d df       	rcall	.-454    	; 0x14f2 <wizchip_setnetinfo>
    16b8:	0e c0       	rjmp	.+28     	; 0x16d6 <ctlnetwork+0x48>
         break;
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
    16ba:	cb 01       	movw	r24, r22
    16bc:	58 df       	rcall	.-336    	; 0x156e <wizchip_getnetinfo>
    16be:	0b c0       	rjmp	.+22     	; 0x16d6 <ctlnetwork+0x48>
         break;
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
    16c0:	88 81       	ld	r24, Y
    16c2:	99 81       	ldd	r25, Y+1	; 0x01
         break;
      default:
         return -1;
   }
   return 0;
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
         break;
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
         break;
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
    16c8:	90 cf       	rjmp	.-224    	; 0x15ea <wizchip_setnetmode>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
    16ca:	a5 df       	rcall	.-182    	; 0x1616 <wizchip_getnetmode>
    16cc:	88 83       	st	Y, r24
    16ce:	99 83       	std	Y+1, r25	; 0x01
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <ctlnetwork+0x48>
         break;
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
    16d2:	cb 01       	movw	r24, r22
    16d4:	a6 df       	rcall	.-180    	; 0x1622 <wizchip_settimeout>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
      default:
         return -1;
   }
   return 0;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
         break;
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
         break;
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <ctlnetwork+0x54>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
    16da:	cb 01       	movw	r24, r22
    16dc:	b9 df       	rcall	.-142    	; 0x1650 <wizchip_gettimeout>
    16de:	fb cf       	rjmp	.-10     	; 0x16d6 <ctlnetwork+0x48>
         break;
      default:
         return -1;
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
   }
   return 0;
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	80 93 70 00 	sts	0x0070, r24
    16ee:	80 93 71 00 	sts	0x0071, r24
    16f2:	80 93 72 00 	sts	0x0072, r24
    16f6:	80 93 73 00 	sts	0x0073, r24
    16fa:	80 93 74 00 	sts	0x0074, r24
    16fe:	80 93 75 00 	sts	0x0075, r24
    1702:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1706:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1708:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    170a:	80 91 50 00 	lds	r24, 0x0050
    170e:	82 60       	ori	r24, 0x02	; 2
    1710:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1714:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1716:	80 91 51 00 	lds	r24, 0x0051
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    171a:	81 ff       	sbrs	r24, 1
    171c:	fc cf       	rjmp	.-8      	; 0x1716 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	80 e4       	ldi	r24, 0x40	; 64
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	09 d0       	rcall	.+18     	; 0x1738 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1726:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1728:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    172a:	80 91 50 00 	lds	r24, 0x0050
    172e:	8e 7f       	andi	r24, 0xFE	; 254
    1730:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1734:	9f bf       	out	0x3f, r25	; 63
    1736:	08 95       	ret

00001738 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1738:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    173a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    173c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    173e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1740:	60 83       	st	Z, r22
	ret                             // Return to caller
    1742:	08 95       	ret

00001744 <nvm_wait_until_ready>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    1744:	80 91 cf 01 	lds	r24, 0x01CF
    1748:	87 fd       	sbrc	r24, 7
    174a:	fc cf       	rjmp	.-8      	; 0x1744 <nvm_wait_until_ready>
    174c:	08 95       	ret

0000174e <nvm_eeprom_read_byte>:
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	f7 df       	rcall	.-18     	; 0x1744 <nvm_wait_until_ready>
    1756:	d0 5f       	subi	r29, 0xF0	; 240
    1758:	88 81       	ld	r24, Y
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	08 95       	ret

00001760 <nvm_eeprom_flush_buffer>:
 * \note The function does not preserve the value of the NVM.CMD register
 */
void nvm_eeprom_flush_buffer(void)
{
	// Wait until NVM is ready
	nvm_wait_until_ready();
    1760:	f1 df       	rcall	.-30     	; 0x1744 <nvm_wait_until_ready>

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    1762:	80 91 cf 01 	lds	r24, 0x01CF
    1766:	81 ff       	sbrs	r24, 1
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <nvm_eeprom_flush_buffer+0x18>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    176a:	86 e3       	ldi	r24, 0x36	; 54
    176c:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	8b ec       	ldi	r24, 0xCB	; 203
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	e0 cf       	rjmp	.-64     	; 0x1738 <ccp_write_io>
    1778:	08 95       	ret

0000177a <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	1f 92       	push	r1
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	8c 01       	movw	r16, r24

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    1790:	80 ec       	ldi	r24, 0xC0	; 192
    1792:	c8 2e       	mov	r12, r24
    1794:	dd 24       	eor	r13, r13
    1796:	d3 94       	inc	r13
    1798:	d6 01       	movw	r26, r12
    179a:	1a 96       	adiw	r26, 0x0a	; 10
    179c:	fc 90       	ld	r15, X
	nvm_eeprom_flush_buffer();
    179e:	69 83       	std	Y+1, r22	; 0x01
    17a0:	df df       	rcall	.-66     	; 0x1760 <nvm_eeprom_flush_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();
    17a2:	d0 df       	rcall	.-96     	; 0x1744 <nvm_wait_until_ready>
 * \param  value     Byte value to write to buffer.
 */
void nvm_eeprom_load_byte_to_buffer(uint8_t byte_addr, uint8_t value)
{
	// Wait until NVM is ready
	nvm_wait_until_ready();
    17a4:	cf df       	rcall	.-98     	; 0x1744 <nvm_wait_until_ready>

	// Issue READ_FUSES command
	nvm_issue_command(NVM_CMD_READ_FUSES_gc);

	return NVM.DATA0;
}
    17a6:	f8 01       	movw	r30, r16
    17a8:	ff 27       	eor	r31, r31
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    17aa:	f0 5f       	subi	r31, 0xF0	; 240
    17ac:	69 81       	ldd	r22, Y+1	; 0x01
    17ae:	60 83       	st	Z, r22
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);

	// Set address to write to
	NVM.ADDR2 = 0x00;
    17b0:	f6 01       	movw	r30, r12
    17b2:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    17b4:	11 83       	std	Z+1, r17	; 0x01
	NVM.ADDR0 = address & 0xFF;
    17b6:	00 83       	st	Z, r16

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    17b8:	85 e3       	ldi	r24, 0x35	; 53
    17ba:	82 87       	std	Z+10, r24	; 0x0a
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	8b ec       	ldi	r24, 0xCB	; 203
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	ba df       	rcall	.-140    	; 0x1738 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    17c4:	d6 01       	movw	r26, r12
    17c6:	1a 96       	adiw	r26, 0x0a	; 10
    17c8:	fc 92       	st	X, r15
}
    17ca:	0f 90       	pop	r0
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	08 95       	ret

000017dc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    17dc:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    17e0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    17e2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    17e4:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    17e8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    17ea:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    17ee:	08 95       	ret

000017f0 <__portable_avr_delay_cycles>:
{
	for(uint8_t i=1;i<7;i++)
	{
		*MAC++=nvm_eeprom_read_byte(i);
	}
}
    17f0:	61 50       	subi	r22, 0x01	; 1
    17f2:	71 09       	sbc	r23, r1
    17f4:	81 09       	sbc	r24, r1
    17f6:	91 09       	sbc	r25, r1
    17f8:	d9 f7       	brne	.-10     	; 0x17f0 <__portable_avr_delay_cycles>
    17fa:	08 95       	ret

000017fc <nvm_read_production_signature_row>:
    17fc:	68 2f       	mov	r22, r24
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	ec cf       	rjmp	.-40     	; 0x17dc <nvm_read_byte>

00001804 <ioport_set_pin_mode.constprop.1>:
    1804:	e8 2f       	mov	r30, r24
    1806:	e6 95       	lsr	r30
    1808:	e6 95       	lsr	r30
    180a:	e6 95       	lsr	r30
    180c:	90 e2       	ldi	r25, 0x20	; 32
    180e:	e9 9f       	mul	r30, r25
    1810:	f0 01       	movw	r30, r0
    1812:	11 24       	eor	r1, r1
    1814:	e0 5f       	subi	r30, 0xF0	; 240
    1816:	f9 4f       	sbci	r31, 0xF9	; 249
    1818:	87 70       	andi	r24, 0x07	; 7
    181a:	e8 0f       	add	r30, r24
    181c:	f1 1d       	adc	r31, r1
    181e:	9f b7       	in	r25, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	80 81       	ld	r24, Z
    1824:	87 70       	andi	r24, 0x07	; 7
    1826:	80 83       	st	Z, r24
    1828:	80 81       	ld	r24, Z
    182a:	88 61       	ori	r24, 0x18	; 24
    182c:	80 83       	st	Z, r24
    182e:	9f bf       	out	0x3f, r25	; 63
    1830:	08 95       	ret

00001832 <kill_NetConfig>:

void kill_NetConfig(void)
{
	nvm_eeprom_write_byte(0,0xFF);
    1832:	6f ef       	ldi	r22, 0xFF	; 255
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a0 df       	rcall	.-192    	; 0x177a <nvm_eeprom_write_byte>
	delay_ms(40);
    183a:	65 e5       	ldi	r22, 0x55	; 85
    183c:	71 e4       	ldi	r23, 0x41	; 65
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	d6 cf       	rjmp	.-84     	; 0x17f0 <__portable_avr_delay_cycles>

00001844 <SW_Reset>:
}

void SW_Reset()
{
	CCP = CCP_IOREG_gc;
    1844:	88 ed       	ldi	r24, 0xD8	; 216
    1846:	84 bf       	out	0x34, r24	; 52
	RST_CTRL =  RST_SWRST_bm;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	80 93 79 00 	sts	0x0079, r24
    184e:	08 95       	ret

00001850 <write_NetConfig>:
}

void write_NetConfig(wiz_NetInfo* Cnfg, uint8_t WriteMac)
{
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
    185a:	16 2f       	mov	r17, r22
	uint8_t eeppos=0;
	//Config Avalible
	nvm_eeprom_write_byte(eeppos++,0xA5);
    185c:	65 ea       	ldi	r22, 0xA5	; 165
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	8b df       	rcall	.-234    	; 0x177a <nvm_eeprom_write_byte>
	//Skip MAC only on special request
	//
	if(WriteMac!=0)
    1864:	11 23       	and	r17, r17
    1866:	c1 f0       	breq	.+48     	; 0x1898 <write_NetConfig+0x48>
	{
		nvm_eeprom_write_byte(eeppos++,Cnfg->mac[0]);
    1868:	68 81       	ld	r22, Y
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	85 df       	rcall	.-246    	; 0x177a <nvm_eeprom_write_byte>
		nvm_eeprom_write_byte(eeppos++,Cnfg->mac[1]);
    1870:	69 81       	ldd	r22, Y+1	; 0x01
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	81 df       	rcall	.-254    	; 0x177a <nvm_eeprom_write_byte>
		nvm_eeprom_write_byte(eeppos++,Cnfg->mac[2]);
    1878:	6a 81       	ldd	r22, Y+2	; 0x02
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	7d df       	rcall	.-262    	; 0x177a <nvm_eeprom_write_byte>
		nvm_eeprom_write_byte(eeppos++,Cnfg->mac[3]);
    1880:	6b 81       	ldd	r22, Y+3	; 0x03
    1882:	84 e0       	ldi	r24, 0x04	; 4
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	79 df       	rcall	.-270    	; 0x177a <nvm_eeprom_write_byte>
		nvm_eeprom_write_byte(eeppos++,Cnfg->mac[4]);
    1888:	6c 81       	ldd	r22, Y+4	; 0x04
    188a:	85 e0       	ldi	r24, 0x05	; 5
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	75 df       	rcall	.-278    	; 0x177a <nvm_eeprom_write_byte>
		nvm_eeprom_write_byte(eeppos++,Cnfg->mac[5]);
    1890:	6d 81       	ldd	r22, Y+5	; 0x05
    1892:	86 e0       	ldi	r24, 0x06	; 6
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	71 df       	rcall	.-286    	; 0x177a <nvm_eeprom_write_byte>
		eeppos++;
		eeppos++;
		eeppos++;	
	}
	//Write IP
	nvm_eeprom_write_byte(eeppos++,Cnfg->ip[0]);
    1898:	6e 81       	ldd	r22, Y+6	; 0x06
    189a:	87 e0       	ldi	r24, 0x07	; 7
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	6d df       	rcall	.-294    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->ip[1]);
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	88 e0       	ldi	r24, 0x08	; 8
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	69 df       	rcall	.-302    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->ip[2]);
    18a8:	68 85       	ldd	r22, Y+8	; 0x08
    18aa:	89 e0       	ldi	r24, 0x09	; 9
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	65 df       	rcall	.-310    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->ip[3]);
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	8a e0       	ldi	r24, 0x0A	; 10
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	61 df       	rcall	.-318    	; 0x177a <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(eeppos++,Cnfg->sn[0]);
    18b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    18ba:	8b e0       	ldi	r24, 0x0B	; 11
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	5d df       	rcall	.-326    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->sn[1]);
    18c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c2:	8c e0       	ldi	r24, 0x0C	; 12
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	59 df       	rcall	.-334    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->sn[2]);
    18c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ca:	8d e0       	ldi	r24, 0x0D	; 13
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	55 df       	rcall	.-342    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->sn[3]);
    18d0:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d2:	8e e0       	ldi	r24, 0x0E	; 14
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	51 df       	rcall	.-350    	; 0x177a <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(eeppos++,Cnfg->gw[0]);
    18d8:	6e 85       	ldd	r22, Y+14	; 0x0e
    18da:	8f e0       	ldi	r24, 0x0F	; 15
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	4d df       	rcall	.-358    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->gw[1]);
    18e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    18e2:	80 e1       	ldi	r24, 0x10	; 16
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	49 df       	rcall	.-366    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->gw[2]);
    18e8:	68 89       	ldd	r22, Y+16	; 0x10
    18ea:	81 e1       	ldi	r24, 0x11	; 17
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	45 df       	rcall	.-374    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->gw[3]);
    18f0:	69 89       	ldd	r22, Y+17	; 0x11
    18f2:	82 e1       	ldi	r24, 0x12	; 18
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	41 df       	rcall	.-382    	; 0x177a <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(eeppos++,Cnfg->dns[0]);
    18f8:	6a 89       	ldd	r22, Y+18	; 0x12
    18fa:	83 e1       	ldi	r24, 0x13	; 19
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	3d df       	rcall	.-390    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->dns[1]);
    1900:	6b 89       	ldd	r22, Y+19	; 0x13
    1902:	84 e1       	ldi	r24, 0x14	; 20
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	39 df       	rcall	.-398    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->dns[2]);
    1908:	6c 89       	ldd	r22, Y+20	; 0x14
    190a:	85 e1       	ldi	r24, 0x15	; 21
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	35 df       	rcall	.-406    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->dns[3]);
    1910:	6d 89       	ldd	r22, Y+21	; 0x15
    1912:	86 e1       	ldi	r24, 0x16	; 22
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	31 df       	rcall	.-414    	; 0x177a <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(eeppos++,Cnfg->dhcp);
    1918:	6e 89       	ldd	r22, Y+22	; 0x16
    191a:	87 e1       	ldi	r24, 0x17	; 23
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	2d df       	rcall	.-422    	; 0x177a <nvm_eeprom_write_byte>
    1920:	07 e8       	ldi	r16, 0x87	; 135
    1922:	10 e2       	ldi	r17, 0x20	; 32
    1924:	c8 e1       	ldi	r28, 0x18	; 24
    1926:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(uint8_t i=0;i<64;i++)
	{
		nvm_eeprom_write_byte(eeppos++,NetTAG[i]);	
    1928:	f8 01       	movw	r30, r16
    192a:	61 91       	ld	r22, Z+
    192c:	8f 01       	movw	r16, r30
    192e:	ce 01       	movw	r24, r28
    1930:	24 df       	rcall	.-440    	; 0x177a <nvm_eeprom_write_byte>
    1932:	21 96       	adiw	r28, 0x01	; 1
	nvm_eeprom_write_byte(eeppos++,Cnfg->dns[1]);
	nvm_eeprom_write_byte(eeppos++,Cnfg->dns[2]);
	nvm_eeprom_write_byte(eeppos++,Cnfg->dns[3]);
	nvm_eeprom_write_byte(eeppos++,Cnfg->dhcp);
	
	for(uint8_t i=0;i<64;i++)
    1934:	c8 35       	cpi	r28, 0x58	; 88
    1936:	d1 05       	cpc	r29, r1
    1938:	b9 f7       	brne	.-18     	; 0x1928 <write_NetConfig+0xd8>
    193a:	02 ed       	ldi	r16, 0xD2	; 210
    193c:	10 e2       	ldi	r17, 0x20	; 32
    193e:	c8 e5       	ldi	r28, 0x58	; 88
    1940:	d0 e0       	ldi	r29, 0x00	; 0
		nvm_eeprom_write_byte(eeppos++,NetTAG[i]);	
	}
	
	for(uint8_t i=0;i<32;i++)
	{
		nvm_eeprom_write_byte(eeppos++,Info[i]);
    1942:	f8 01       	movw	r30, r16
    1944:	61 91       	ld	r22, Z+
    1946:	8f 01       	movw	r16, r30
    1948:	ce 01       	movw	r24, r28
    194a:	17 df       	rcall	.-466    	; 0x177a <nvm_eeprom_write_byte>
    194c:	21 96       	adiw	r28, 0x01	; 1
	for(uint8_t i=0;i<64;i++)
	{
		nvm_eeprom_write_byte(eeppos++,NetTAG[i]);	
	}
	
	for(uint8_t i=0;i<32;i++)
    194e:	c8 37       	cpi	r28, 0x78	; 120
    1950:	d1 05       	cpc	r29, r1
    1952:	b9 f7       	brne	.-18     	; 0x1942 <write_NetConfig+0xf2>
    1954:	04 c0       	rjmp	.+8      	; 0x195e <write_NetConfig+0x10e>
	}
	uint8_t value=0;
	value=nvm_eeprom_read_byte(0);
	while(value!=165)
	{
		nvm_eeprom_write_byte(0,165);	
    1956:	65 ea       	ldi	r22, 0xA5	; 165
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e df       	rcall	.-484    	; 0x177a <nvm_eeprom_write_byte>
		value=nvm_eeprom_read_byte(0);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	f5 de       	rcall	.-534    	; 0x174e <nvm_eeprom_read_byte>
	{
		nvm_eeprom_write_byte(eeppos++,Info[i]);
	}
	uint8_t value=0;
	value=nvm_eeprom_read_byte(0);
	while(value!=165)
    1964:	85 3a       	cpi	r24, 0xA5	; 165
    1966:	b9 f7       	brne	.-18     	; 0x1956 <write_NetConfig+0x106>
		nvm_eeprom_write_byte(0,165);	
		value=nvm_eeprom_read_byte(0);
	}
	
	
}
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	08 95       	ret

00001972 <read_NetConfig>:

uint8_t read_NetConfig(wiz_NetInfo* Cnfg)
{
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	ec 01       	movw	r28, r24
	uint8_t eeppos=0;
	//Config Avalible
	uint8_t ConfigFlag = nvm_eeprom_read_byte(eeppos++);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	e6 de       	rcall	.-564    	; 0x174e <nvm_eeprom_read_byte>
	if(ConfigFlag==165)
    1982:	85 3a       	cpi	r24, 0xA5	; 165
    1984:	09 f0       	breq	.+2      	; 0x1988 <read_NetConfig+0x16>
    1986:	79 c0       	rjmp	.+242    	; 0x1a7a <read_NetConfig+0x108>
	{
		Cnfg->mac[0]=nvm_eeprom_read_byte(eeppos++);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	e0 de       	rcall	.-576    	; 0x174e <nvm_eeprom_read_byte>
    198e:	88 83       	st	Y, r24
		Cnfg->mac[1]=nvm_eeprom_read_byte(eeppos++);
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	dc de       	rcall	.-584    	; 0x174e <nvm_eeprom_read_byte>
    1996:	89 83       	std	Y+1, r24	; 0x01
		Cnfg->mac[2]=nvm_eeprom_read_byte(eeppos++);
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	d8 de       	rcall	.-592    	; 0x174e <nvm_eeprom_read_byte>
    199e:	8a 83       	std	Y+2, r24	; 0x02
		Cnfg->mac[3]=nvm_eeprom_read_byte(eeppos++);
    19a0:	84 e0       	ldi	r24, 0x04	; 4
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	d4 de       	rcall	.-600    	; 0x174e <nvm_eeprom_read_byte>
    19a6:	8b 83       	std	Y+3, r24	; 0x03
		Cnfg->mac[4]=nvm_eeprom_read_byte(eeppos++);
    19a8:	85 e0       	ldi	r24, 0x05	; 5
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	d0 de       	rcall	.-608    	; 0x174e <nvm_eeprom_read_byte>
    19ae:	8c 83       	std	Y+4, r24	; 0x04
		Cnfg->mac[5]=nvm_eeprom_read_byte(eeppos++);
    19b0:	86 e0       	ldi	r24, 0x06	; 6
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	cc de       	rcall	.-616    	; 0x174e <nvm_eeprom_read_byte>
    19b6:	8d 83       	std	Y+5, r24	; 0x05
		
		Cnfg->ip[0]=nvm_eeprom_read_byte(eeppos++);
    19b8:	87 e0       	ldi	r24, 0x07	; 7
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	c8 de       	rcall	.-624    	; 0x174e <nvm_eeprom_read_byte>
    19be:	8e 83       	std	Y+6, r24	; 0x06
		Cnfg->ip[1]=nvm_eeprom_read_byte(eeppos++);
    19c0:	88 e0       	ldi	r24, 0x08	; 8
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	c4 de       	rcall	.-632    	; 0x174e <nvm_eeprom_read_byte>
    19c6:	8f 83       	std	Y+7, r24	; 0x07
		Cnfg->ip[2]=nvm_eeprom_read_byte(eeppos++);
    19c8:	89 e0       	ldi	r24, 0x09	; 9
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	c0 de       	rcall	.-640    	; 0x174e <nvm_eeprom_read_byte>
    19ce:	88 87       	std	Y+8, r24	; 0x08
		Cnfg->ip[3]=nvm_eeprom_read_byte(eeppos++);
    19d0:	8a e0       	ldi	r24, 0x0A	; 10
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	bc de       	rcall	.-648    	; 0x174e <nvm_eeprom_read_byte>
    19d6:	89 87       	std	Y+9, r24	; 0x09
		
		Cnfg->sn[0]=nvm_eeprom_read_byte(eeppos++);
    19d8:	8b e0       	ldi	r24, 0x0B	; 11
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	b8 de       	rcall	.-656    	; 0x174e <nvm_eeprom_read_byte>
    19de:	8a 87       	std	Y+10, r24	; 0x0a
		Cnfg->sn[1]=nvm_eeprom_read_byte(eeppos++);
    19e0:	8c e0       	ldi	r24, 0x0C	; 12
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	b4 de       	rcall	.-664    	; 0x174e <nvm_eeprom_read_byte>
    19e6:	8b 87       	std	Y+11, r24	; 0x0b
		Cnfg->sn[2]=nvm_eeprom_read_byte(eeppos++);
    19e8:	8d e0       	ldi	r24, 0x0D	; 13
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	b0 de       	rcall	.-672    	; 0x174e <nvm_eeprom_read_byte>
    19ee:	8c 87       	std	Y+12, r24	; 0x0c
		Cnfg->sn[3]=nvm_eeprom_read_byte(eeppos++);
    19f0:	8e e0       	ldi	r24, 0x0E	; 14
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	ac de       	rcall	.-680    	; 0x174e <nvm_eeprom_read_byte>
    19f6:	8d 87       	std	Y+13, r24	; 0x0d
		
		Cnfg->gw[0]=nvm_eeprom_read_byte(eeppos++);
    19f8:	8f e0       	ldi	r24, 0x0F	; 15
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a8 de       	rcall	.-688    	; 0x174e <nvm_eeprom_read_byte>
    19fe:	8e 87       	std	Y+14, r24	; 0x0e
		Cnfg->gw[1]=nvm_eeprom_read_byte(eeppos++);
    1a00:	80 e1       	ldi	r24, 0x10	; 16
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a4 de       	rcall	.-696    	; 0x174e <nvm_eeprom_read_byte>
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
		Cnfg->gw[2]=nvm_eeprom_read_byte(eeppos++);
    1a08:	81 e1       	ldi	r24, 0x11	; 17
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 de       	rcall	.-704    	; 0x174e <nvm_eeprom_read_byte>
    1a0e:	88 8b       	std	Y+16, r24	; 0x10
		Cnfg->gw[3]=nvm_eeprom_read_byte(eeppos++);
    1a10:	82 e1       	ldi	r24, 0x12	; 18
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9c de       	rcall	.-712    	; 0x174e <nvm_eeprom_read_byte>
    1a16:	89 8b       	std	Y+17, r24	; 0x11
		
		Cnfg->dns[0]=nvm_eeprom_read_byte(eeppos++);
    1a18:	83 e1       	ldi	r24, 0x13	; 19
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	98 de       	rcall	.-720    	; 0x174e <nvm_eeprom_read_byte>
    1a1e:	8a 8b       	std	Y+18, r24	; 0x12
		Cnfg->dns[1]=nvm_eeprom_read_byte(eeppos++);
    1a20:	84 e1       	ldi	r24, 0x14	; 20
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	94 de       	rcall	.-728    	; 0x174e <nvm_eeprom_read_byte>
    1a26:	8b 8b       	std	Y+19, r24	; 0x13
		Cnfg->dns[2]=nvm_eeprom_read_byte(eeppos++);
    1a28:	85 e1       	ldi	r24, 0x15	; 21
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	90 de       	rcall	.-736    	; 0x174e <nvm_eeprom_read_byte>
    1a2e:	8c 8b       	std	Y+20, r24	; 0x14
		Cnfg->dns[3]=nvm_eeprom_read_byte(eeppos++);
    1a30:	86 e1       	ldi	r24, 0x16	; 22
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	8c de       	rcall	.-744    	; 0x174e <nvm_eeprom_read_byte>
    1a36:	8d 8b       	std	Y+21, r24	; 0x15
		
		Cnfg->dhcp=nvm_eeprom_read_byte(eeppos++);
    1a38:	87 e1       	ldi	r24, 0x17	; 23
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	88 de       	rcall	.-752    	; 0x174e <nvm_eeprom_read_byte>
    1a3e:	8e 8b       	std	Y+22, r24	; 0x16
    1a40:	1f 8a       	std	Y+23, r1	; 0x17
    1a42:	07 e8       	ldi	r16, 0x87	; 135
    1a44:	10 e2       	ldi	r17, 0x20	; 32
    1a46:	c8 e1       	ldi	r28, 0x18	; 24
    1a48:	d0 e0       	ldi	r29, 0x00	; 0
		for(uint8_t i=0;i<64;i++)
		{
			NetTAG[i]=nvm_eeprom_read_byte(eeppos++);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	80 de       	rcall	.-768    	; 0x174e <nvm_eeprom_read_byte>
    1a4e:	f8 01       	movw	r30, r16
    1a50:	81 93       	st	Z+, r24
    1a52:	8f 01       	movw	r16, r30
    1a54:	21 96       	adiw	r28, 0x01	; 1
		Cnfg->dns[1]=nvm_eeprom_read_byte(eeppos++);
		Cnfg->dns[2]=nvm_eeprom_read_byte(eeppos++);
		Cnfg->dns[3]=nvm_eeprom_read_byte(eeppos++);
		
		Cnfg->dhcp=nvm_eeprom_read_byte(eeppos++);
		for(uint8_t i=0;i<64;i++)
    1a56:	c8 35       	cpi	r28, 0x58	; 88
    1a58:	d1 05       	cpc	r29, r1
    1a5a:	b9 f7       	brne	.-18     	; 0x1a4a <read_NetConfig+0xd8>
    1a5c:	02 ed       	ldi	r16, 0xD2	; 210
    1a5e:	10 e2       	ldi	r17, 0x20	; 32
    1a60:	c8 e5       	ldi	r28, 0x58	; 88
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
			NetTAG[i]=nvm_eeprom_read_byte(eeppos++);
		}
		
		for(uint8_t i=0;i<32;i++)
		{
			Info[i]=nvm_eeprom_read_byte(eeppos++);
    1a64:	ce 01       	movw	r24, r28
    1a66:	73 de       	rcall	.-794    	; 0x174e <nvm_eeprom_read_byte>
    1a68:	f8 01       	movw	r30, r16
    1a6a:	81 93       	st	Z+, r24
    1a6c:	8f 01       	movw	r16, r30
    1a6e:	21 96       	adiw	r28, 0x01	; 1
		for(uint8_t i=0;i<64;i++)
		{
			NetTAG[i]=nvm_eeprom_read_byte(eeppos++);
		}
		
		for(uint8_t i=0;i<32;i++)
    1a70:	c8 37       	cpi	r28, 0x78	; 120
    1a72:	d1 05       	cpc	r29, r1
    1a74:	b9 f7       	brne	.-18     	; 0x1a64 <read_NetConfig+0xf2>
		}
	}
	
	if(ConfigFlag==165)
	{
		return 0;
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <read_NetConfig+0x10e>
	}
	else
	{
		//Keep EMC Config
		EMC_Config=1;	
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 80 20 	sts	0x2080, r24
		return 1;
	}
	
	
	
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <udp_open_socket>:
		
	udp_send(SOCK_UDP0, UDP_BUF, (uint16_t)packpos, ((uint16_t)778), DestIP);
}

uint32_t udp_open_socket(uint8_t sn, uint16_t port)
{
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	c8 2f       	mov	r28, r24
    1a92:	8b 01       	movw	r16, r22
	int32_t  ret;
	
	
	switch(getSn_SR(sn))
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	c8 9f       	mul	r28, r24
    1a98:	b0 01       	movw	r22, r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	68 5f       	subi	r22, 0xF8	; 248
    1a9e:	7c 4f       	sbci	r23, 0xFC	; 252
    1aa0:	88 27       	eor	r24, r24
    1aa2:	77 fd       	sbrc	r23, 7
    1aa4:	80 95       	com	r24
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	0e 94 c7 04 	call	0x98e	; 0x98e <WIZCHIP_READ>
    1aac:	88 23       	and	r24, r24
    1aae:	31 f0       	breq	.+12     	; 0x1abc <udp_open_socket+0x32>
    1ab0:	82 32       	cpi	r24, 0x22	; 34
    1ab2:	d1 f4       	brne	.+52     	; 0x1ae8 <udp_open_socket+0x5e>
	{
		case SOCK_UDP :
		{
			
			return 0;
    1ab4:	00 e0       	ldi	r16, 0x00	; 0
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	98 01       	movw	r18, r16
    1aba:	1a c0       	rjmp	.+52     	; 0x1af0 <udp_open_socket+0x66>
		}
		
		case SOCK_CLOSED:
		if((ret=socket(sn,Sn_MR_UDP,port,0x00)) != sn)
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	a8 01       	movw	r20, r16
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	8c 2f       	mov	r24, r28
    1ac4:	0e 94 8c 01 	call	0x318	; 0x318 <socket>
    1ac8:	08 2f       	mov	r16, r24
    1aca:	11 27       	eor	r17, r17
    1acc:	07 fd       	sbrc	r16, 7
    1ace:	10 95       	com	r17
    1ad0:	21 2f       	mov	r18, r17
    1ad2:	31 2f       	mov	r19, r17
    1ad4:	8c 2f       	mov	r24, r28
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	a0 e0       	ldi	r26, 0x00	; 0
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	08 17       	cp	r16, r24
    1ade:	19 07       	cpc	r17, r25
    1ae0:	2a 07       	cpc	r18, r26
    1ae2:	3b 07       	cpc	r19, r27
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <udp_open_socket+0x5e>
		{
			
			return ret;
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <udp_open_socket+0x66>
		break;
		default :
		break;
	}
	
	return 1;
    1ae8:	01 e0       	ldi	r16, 0x01	; 1
    1aea:	10 e0       	ldi	r17, 0x00	; 0
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
}
    1af0:	b8 01       	movw	r22, r16
    1af2:	c9 01       	movw	r24, r18
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	08 95       	ret

00001afc <udp_send>:
	
	return 1;
}

int32_t udp_send(uint8_t sn, uint8_t* buf, uint16_t size, uint16_t destport, uint8_t *destip)
{
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	78 2e       	mov	r7, r24
    1b18:	6b 01       	movw	r12, r22
    1b1a:	7a 01       	movw	r14, r20
    1b1c:	59 01       	movw	r10, r18
    1b1e:	48 01       	movw	r8, r16
	int32_t  ret;
	uint16_t sentsize=0;
	
	switch(getSn_SR(sn))
    1b20:	80 e2       	ldi	r24, 0x20	; 32
    1b22:	78 9e       	mul	r7, r24
    1b24:	b0 01       	movw	r22, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	68 5f       	subi	r22, 0xF8	; 248
    1b2a:	7c 4f       	sbci	r23, 0xFC	; 252
    1b2c:	88 27       	eor	r24, r24
    1b2e:	77 fd       	sbrc	r23, 7
    1b30:	80 95       	com	r24
    1b32:	98 2f       	mov	r25, r24
    1b34:	0e 94 c7 04 	call	0x98e	; 0x98e <WIZCHIP_READ>
    1b38:	88 23       	and	r24, r24
    1b3a:	d9 f0       	breq	.+54     	; 0x1b72 <udp_send+0x76>
    1b3c:	82 32       	cpi	r24, 0x22	; 34
    1b3e:	79 f5       	brne	.+94     	; 0x1b9e <udp_send+0xa2>
    1b40:	12 c0       	rjmp	.+36     	; 0x1b66 <udp_send+0x6a>
		{
			
			while(sentsize != size)
			{
				
				ret = sendto(sn,buf+sentsize,size-sentsize,destip,destport);
    1b42:	a7 01       	movw	r20, r14
    1b44:	4c 1b       	sub	r20, r28
    1b46:	5d 0b       	sbc	r21, r29
    1b48:	b6 01       	movw	r22, r12
    1b4a:	6c 0f       	add	r22, r28
    1b4c:	7d 1f       	adc	r23, r29
    1b4e:	85 01       	movw	r16, r10
    1b50:	94 01       	movw	r18, r8
    1b52:	87 2d       	mov	r24, r7
    1b54:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sendto>
    1b58:	8b 01       	movw	r16, r22
    1b5a:	9c 01       	movw	r18, r24
				
				if(ret < 0)
    1b5c:	97 fd       	sbrc	r25, 7
    1b5e:	23 c0       	rjmp	.+70     	; 0x1ba6 <udp_send+0xaa>
				{
					
					return ret;
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
    1b60:	c6 0f       	add	r28, r22
    1b62:	d7 1f       	adc	r29, r23
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <udp_send+0x6e>
int32_t udp_send(uint8_t sn, uint8_t* buf, uint16_t size, uint16_t destport, uint8_t *destip)
{
	int32_t  ret;
	uint16_t sentsize=0;
	
	switch(getSn_SR(sn))
    1b66:	c0 e0       	ldi	r28, 0x00	; 0
    1b68:	d0 e0       	ldi	r29, 0x00	; 0
	{
		case SOCK_UDP :
		{
			
			while(sentsize != size)
    1b6a:	ce 15       	cp	r28, r14
    1b6c:	df 05       	cpc	r29, r15
    1b6e:	49 f7       	brne	.-46     	; 0x1b42 <udp_send+0x46>
    1b70:	16 c0       	rjmp	.+44     	; 0x1b9e <udp_send+0xa2>
			}
		}
		break;
		case SOCK_CLOSED:
		{
			if((ret=socket(sn,Sn_MR_UDP,UDP_PORT,0x00)) != sn)
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	49 e0       	ldi	r20, 0x09	; 9
    1b76:	53 e0       	ldi	r21, 0x03	; 3
    1b78:	62 e0       	ldi	r22, 0x02	; 2
    1b7a:	87 2d       	mov	r24, r7
    1b7c:	0e 94 8c 01 	call	0x318	; 0x318 <socket>
    1b80:	08 2f       	mov	r16, r24
    1b82:	11 27       	eor	r17, r17
    1b84:	07 fd       	sbrc	r16, 7
    1b86:	10 95       	com	r17
    1b88:	21 2f       	mov	r18, r17
    1b8a:	31 2f       	mov	r19, r17
    1b8c:	87 2d       	mov	r24, r7
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	08 17       	cp	r16, r24
    1b96:	19 07       	cpc	r17, r25
    1b98:	2a 07       	cpc	r18, r26
    1b9a:	3b 07       	cpc	r19, r27
    1b9c:	21 f4       	brne	.+8      	; 0x1ba6 <udp_send+0xaa>
		break;
		default :
		
		break;
	}
	return 1;
    1b9e:	01 e0       	ldi	r16, 0x01	; 1
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
}
    1ba6:	b8 01       	movw	r22, r16
    1ba8:	c9 01       	movw	r24, r18
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	ef 90       	pop	r14
    1bb6:	df 90       	pop	r13
    1bb8:	cf 90       	pop	r12
    1bba:	bf 90       	pop	r11
    1bbc:	af 90       	pop	r10
    1bbe:	9f 90       	pop	r9
    1bc0:	8f 90       	pop	r8
    1bc2:	7f 90       	pop	r7
    1bc4:	08 95       	ret

00001bc6 <TransmittData>:
		Packet_Decode_FSM(*Data++);
	}
}

void TransmittData(void)
{
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <TransmittData+0xa>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <TransmittData+0xc>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	uint8_t DestIP[]={255,255,255,255};
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t packpos=0;
	uint8_t i=0;
	UDP_BUF[packpos++]=0xFF;
    1be0:	80 93 f2 20 	sts	0x20F2, r24
	UDP_BUF[packpos++]=0x00;
    1be4:	10 92 f3 20 	sts	0x20F3, r1
	UDP_BUF[packpos++]=0xAA;
    1be8:	8a ea       	ldi	r24, 0xAA	; 170
    1bea:	80 93 f4 20 	sts	0x20F4, r24
	if(EMC_Config==0)
    1bee:	80 91 80 20 	lds	r24, 0x2080
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	03 c0       	rjmp	.+6      	; 0x1bfc <TransmittData+0x36>
	{
		UDP_BUF[packpos++]=0x00; //Command	
    1bf6:	10 92 f5 20 	sts	0x20F5, r1
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <TransmittData+0x3c>
	}
	else
	{
		UDP_BUF[packpos++]=0x80; //Command	
    1bfc:	80 e8       	ldi	r24, 0x80	; 128
    1bfe:	80 93 f5 20 	sts	0x20F5, r24
    1c02:	e1 e3       	ldi	r30, 0x31	; 49
    1c04:	f0 e2       	ldi	r31, 0x20	; 32
    1c06:	a6 ef       	ldi	r26, 0xF6	; 246
    1c08:	b0 e2       	ldi	r27, 0x20	; 32
	}
	
	for(i=0;i<6;i++)	
	{
		UDP_BUF[packpos++] = NetworkConfig.mac[i];
    1c0a:	81 91       	ld	r24, Z+
    1c0c:	8d 93       	st	X+, r24
	else
	{
		UDP_BUF[packpos++]=0x80; //Command	
	}
	
	for(i=0;i<6;i++)	
    1c0e:	80 e2       	ldi	r24, 0x20	; 32
    1c10:	e7 33       	cpi	r30, 0x37	; 55
    1c12:	f8 07       	cpc	r31, r24
    1c14:	d1 f7       	brne	.-12     	; 0x1c0a <TransmittData+0x44>
	{
		UDP_BUF[packpos++] = NetworkConfig.mac[i];
	}
	for(i=0;i<4;i++)	
	{
		UDP_BUF[packpos++] = NetworkConfig.ip[i];
    1c16:	80 91 37 20 	lds	r24, 0x2037
    1c1a:	80 93 fc 20 	sts	0x20FC, r24
    1c1e:	80 91 38 20 	lds	r24, 0x2038
    1c22:	80 93 fd 20 	sts	0x20FD, r24
    1c26:	80 91 39 20 	lds	r24, 0x2039
    1c2a:	80 93 fe 20 	sts	0x20FE, r24
    1c2e:	80 91 3a 20 	lds	r24, 0x203A
    1c32:	80 93 ff 20 	sts	0x20FF, r24
	}
	for(i=0;i<4;i++)	
	{
		UDP_BUF[packpos++] = NetworkConfig.sn[i];
    1c36:	80 91 3b 20 	lds	r24, 0x203B
    1c3a:	80 93 00 21 	sts	0x2100, r24
    1c3e:	80 91 3c 20 	lds	r24, 0x203C
    1c42:	80 93 01 21 	sts	0x2101, r24
    1c46:	80 91 3d 20 	lds	r24, 0x203D
    1c4a:	80 93 02 21 	sts	0x2102, r24
    1c4e:	80 91 3e 20 	lds	r24, 0x203E
    1c52:	80 93 03 21 	sts	0x2103, r24
	}
	for(i=0;i<4;i++)	
	{
		UDP_BUF[packpos++] = NetworkConfig.gw[i];
    1c56:	80 91 3f 20 	lds	r24, 0x203F
    1c5a:	80 93 04 21 	sts	0x2104, r24
    1c5e:	80 91 40 20 	lds	r24, 0x2040
    1c62:	80 93 05 21 	sts	0x2105, r24
    1c66:	80 91 41 20 	lds	r24, 0x2041
    1c6a:	80 93 06 21 	sts	0x2106, r24
    1c6e:	80 91 42 20 	lds	r24, 0x2042
    1c72:	80 93 07 21 	sts	0x2107, r24
	}
	for(i=0;i<4;i++)	
	{
		UDP_BUF[packpos++] = NetworkConfig.dns[i];
    1c76:	80 91 43 20 	lds	r24, 0x2043
    1c7a:	80 93 08 21 	sts	0x2108, r24
    1c7e:	80 91 44 20 	lds	r24, 0x2044
    1c82:	80 93 09 21 	sts	0x2109, r24
    1c86:	80 91 45 20 	lds	r24, 0x2045
    1c8a:	80 93 0a 21 	sts	0x210A, r24
    1c8e:	80 91 46 20 	lds	r24, 0x2046
    1c92:	80 93 0b 21 	sts	0x210B, r24
	}
	UDP_BUF[packpos++] = NetworkConfig.dhcp;
    1c96:	80 91 47 20 	lds	r24, 0x2047
    1c9a:	80 93 0c 21 	sts	0x210C, r24
    1c9e:	e7 e8       	ldi	r30, 0x87	; 135
    1ca0:	f0 e2       	ldi	r31, 0x20	; 32
    1ca2:	ad e0       	ldi	r26, 0x0D	; 13
    1ca4:	b1 e2       	ldi	r27, 0x21	; 33
	for(i=0;i<64;i++)	
	{
		UDP_BUF[packpos++] = NetTAG[i];
    1ca6:	81 91       	ld	r24, Z+
    1ca8:	8d 93       	st	X+, r24
	for(i=0;i<4;i++)	
	{
		UDP_BUF[packpos++] = NetworkConfig.dns[i];
	}
	UDP_BUF[packpos++] = NetworkConfig.dhcp;
	for(i=0;i<64;i++)	
    1caa:	80 e2       	ldi	r24, 0x20	; 32
    1cac:	e7 3c       	cpi	r30, 0xC7	; 199
    1cae:	f8 07       	cpc	r31, r24
    1cb0:	d1 f7       	brne	.-12     	; 0x1ca6 <TransmittData+0xe0>
    1cb2:	e2 ed       	ldi	r30, 0xD2	; 210
    1cb4:	f0 e2       	ldi	r31, 0x20	; 32
    1cb6:	ad e4       	ldi	r26, 0x4D	; 77
    1cb8:	b1 e2       	ldi	r27, 0x21	; 33
	{
		UDP_BUF[packpos++] = NetTAG[i];
	}
	for(i=0;i<32;i++)	
	{
		UDP_BUF[packpos++] = Info[i];
    1cba:	81 91       	ld	r24, Z+
    1cbc:	8d 93       	st	X+, r24
	UDP_BUF[packpos++] = NetworkConfig.dhcp;
	for(i=0;i<64;i++)	
	{
		UDP_BUF[packpos++] = NetTAG[i];
	}
	for(i=0;i<32;i++)	
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	e2 3f       	cpi	r30, 0xF2	; 242
    1cc2:	f8 07       	cpc	r31, r24
    1cc4:	d1 f7       	brne	.-12     	; 0x1cba <TransmittData+0xf4>
    1cc6:	e6 eb       	ldi	r30, 0xB6	; 182
    1cc8:	f1 e2       	ldi	r31, 0x21	; 33
    1cca:	ad e6       	ldi	r26, 0x6D	; 109
    1ccc:	b1 e2       	ldi	r27, 0x21	; 33
	{
		UDP_BUF[packpos++] = Info[i];
	}
	for(i=0;i<11;i++)	
	{
		UDP_BUF[packpos++] = DeviceID[i];
    1cce:	81 91       	ld	r24, Z+
    1cd0:	8d 93       	st	X+, r24
	}
	for(i=0;i<32;i++)	
	{
		UDP_BUF[packpos++] = Info[i];
	}
	for(i=0;i<11;i++)	
    1cd2:	81 e2       	ldi	r24, 0x21	; 33
    1cd4:	e1 3c       	cpi	r30, 0xC1	; 193
    1cd6:	f8 07       	cpc	r31, r24
    1cd8:	d1 f7       	brne	.-12     	; 0x1cce <TransmittData+0x108>
	{
		UDP_BUF[packpos++] = DeviceID[i];
	}
	UDP_BUF[packpos++]=0x00; //CRC16
    1cda:	10 92 78 21 	sts	0x2178, r1
	UDP_BUF[packpos++]=0x00; //CRC16
    1cde:	10 92 79 21 	sts	0x2179, r1
	
	UDP_BUF[packpos++]=0x00;
    1ce2:	10 92 7a 21 	sts	0x217A, r1
	UDP_BUF[packpos++]=0xFF;
    1ce6:	8f ef       	ldi	r24, 0xFF	; 255
    1ce8:	80 93 7b 21 	sts	0x217B, r24
	UDP_BUF[packpos++]=0x55;
    1cec:	85 e5       	ldi	r24, 0x55	; 85
    1cee:	80 93 7c 21 	sts	0x217C, r24
	
		
	udp_send(SOCK_UDP0, UDP_BUF, (uint16_t)packpos, ((uint16_t)778), DestIP);
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	0f 5f       	subi	r16, 0xFF	; 255
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	2a e0       	ldi	r18, 0x0A	; 10
    1cfa:	33 e0       	ldi	r19, 0x03	; 3
    1cfc:	4b e8       	ldi	r20, 0x8B	; 139
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	62 ef       	ldi	r22, 0xF2	; 242
    1d02:	70 e2       	ldi	r23, 0x20	; 32
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	fa de       	rcall	.-524    	; 0x1afc <udp_send>
}
    1d08:	24 96       	adiw	r28, 0x04	; 4
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret

00001d18 <Packet_Decode_FSM>:
volatile uint8_t CRC16[2]={0,0};
volatile uint8_t SubBytesLeft=0;
volatile uint8_t Command_Byte=255;
volatile uint8_t ConfigFlag=0;
void Packet_Decode_FSM(uint8_t Data)
{
    1d18:	cf 93       	push	r28

	switch(FSM_State)
    1d1a:	e0 91 17 20 	lds	r30, 0x2017
    1d1e:	f0 91 18 20 	lds	r31, 0x2018
    1d22:	e1 31       	cpi	r30, 0x11	; 17
    1d24:	f1 05       	cpc	r31, r1
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <Packet_Decode_FSM+0x12>
    1d28:	a2 c1       	rjmp	.+836    	; 0x206e <Packet_Decode_FSM+0x356>
    1d2a:	ea 5a       	subi	r30, 0xAA	; 170
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	9a c2       	rjmp	.+1332   	; 0x2264 <__tablejump2__>
	{
		case Idle:
		{
			if(Data==0xFF)
    1d30:	8f 3f       	cpi	r24, 0xFF	; 255
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <Packet_Decode_FSM+0x1e>
    1d34:	96 c1       	rjmp	.+812    	; 0x2062 <Packet_Decode_FSM+0x34a>
			{
				FSM_State=Start;
    1d36:	10 92 17 20 	sts	0x2017, r1
    1d3a:	10 92 18 20 	sts	0x2018, r1
				Command_Byte=255;
    1d3e:	80 93 16 20 	sts	0x2016, r24
    1d42:	95 c1       	rjmp	.+810    	; 0x206e <Packet_Decode_FSM+0x356>
		}
		break;
		
		case Start:
		{
			if(Data==0x00)
    1d44:	81 11       	cpse	r24, r1
    1d46:	8d c1       	rjmp	.+794    	; 0x2062 <Packet_Decode_FSM+0x34a>
			{
				FSM_State=S0;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	80 93 17 20 	sts	0x2017, r24
    1d50:	90 93 18 20 	sts	0x2018, r25
    1d54:	8c c1       	rjmp	.+792    	; 0x206e <Packet_Decode_FSM+0x356>
		}
		break;
		
		case S0:
		{
			if(Data==0xAA)
    1d56:	8a 3a       	cpi	r24, 0xAA	; 170
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <Packet_Decode_FSM+0x44>
    1d5a:	83 c1       	rjmp	.+774    	; 0x2062 <Packet_Decode_FSM+0x34a>
			{
				FSM_State=Command;
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	80 93 17 20 	sts	0x2017, r24
    1d64:	90 93 18 20 	sts	0x2018, r25
    1d68:	82 c1       	rjmp	.+772    	; 0x206e <Packet_Decode_FSM+0x356>
		}
		break;
		
		case Command:
		{
			Command_Byte=Data;
    1d6a:	80 93 16 20 	sts	0x2016, r24
			switch(Command_Byte)
    1d6e:	80 91 16 20 	lds	r24, 0x2016
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	39 f0       	breq	.+14     	; 0x1d84 <Packet_Decode_FSM+0x6c>
    1d76:	80 f0       	brcs	.+32     	; 0x1d98 <Packet_Decode_FSM+0x80>
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	21 f0       	breq	.+8      	; 0x1d84 <Packet_Decode_FSM+0x6c>
    1d7c:	83 30       	cpi	r24, 0x03	; 3
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <Packet_Decode_FSM+0x6a>
    1d80:	70 c1       	rjmp	.+736    	; 0x2062 <Packet_Decode_FSM+0x34a>
    1d82:	0a c0       	rjmp	.+20     	; 0x1d98 <Packet_Decode_FSM+0x80>
				}
				break;
				
				case 0x02:
				{
					FSM_State=MAC_ADR;
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	80 93 17 20 	sts	0x2017, r24
    1d8c:	90 93 18 20 	sts	0x2018, r25
					SubBytesLeft=6;
    1d90:	86 e0       	ldi	r24, 0x06	; 6
    1d92:	80 93 7d 20 	sts	0x207D, r24
				}
				break;
    1d96:	6b c1       	rjmp	.+726    	; 0x206e <Packet_Decode_FSM+0x356>
				
				case 0x03:
				{
					FSM_State=E0;
    1d98:	8d e0       	ldi	r24, 0x0D	; 13
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	80 93 17 20 	sts	0x2017, r24
    1da0:	90 93 18 20 	sts	0x2018, r25
					//Am Ende die Config sensen lassen
				}
				break;
    1da4:	64 c1       	rjmp	.+712    	; 0x206e <Packet_Decode_FSM+0x356>
		}
		break;
		
		case MAC_ADR:
		{
			uint8_t Index=6-SubBytesLeft;
    1da6:	20 91 7d 20 	lds	r18, 0x207D
			SubBytesLeft--;
    1daa:	90 91 7d 20 	lds	r25, 0x207D
    1dae:	91 50       	subi	r25, 0x01	; 1
    1db0:	90 93 7d 20 	sts	0x207D, r25
		}
		break;
		
		case MAC_ADR:
		{
			uint8_t Index=6-SubBytesLeft;
    1db4:	e6 e0       	ldi	r30, 0x06	; 6
    1db6:	e2 1b       	sub	r30, r18
			SubBytesLeft--;
			NetConf.mac[Index]=Data;
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	e7 5e       	subi	r30, 0xE7	; 231
    1dbc:	ff 4d       	sbci	r31, 0xDF	; 223
    1dbe:	80 83       	st	Z, r24
			if(SubBytesLeft==0)
    1dc0:	80 91 7d 20 	lds	r24, 0x207D
    1dc4:	81 11       	cpse	r24, r1
    1dc6:	53 c1       	rjmp	.+678    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=IP;
    1dc8:	84 e0       	ldi	r24, 0x04	; 4
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	80 93 17 20 	sts	0x2017, r24
    1dd0:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=4;
    1dd4:	84 e0       	ldi	r24, 0x04	; 4
    1dd6:	80 93 7d 20 	sts	0x207D, r24
    1dda:	49 c1       	rjmp	.+658    	; 0x206e <Packet_Decode_FSM+0x356>
			
		}
		break;
		case IP:
		{
			uint8_t Index=4-SubBytesLeft;
    1ddc:	30 91 7d 20 	lds	r19, 0x207D
			SubBytesLeft--;
    1de0:	90 91 7d 20 	lds	r25, 0x207D
    1de4:	91 50       	subi	r25, 0x01	; 1
    1de6:	90 93 7d 20 	sts	0x207D, r25
			
		}
		break;
		case IP:
		{
			uint8_t Index=4-SubBytesLeft;
    1dea:	24 e0       	ldi	r18, 0x04	; 4
    1dec:	e2 2f       	mov	r30, r18
    1dee:	e3 1b       	sub	r30, r19
			SubBytesLeft--;
			NetConf.ip[Index]=Data;
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	e7 5e       	subi	r30, 0xE7	; 231
    1df4:	ff 4d       	sbci	r31, 0xDF	; 223
    1df6:	86 83       	std	Z+6, r24	; 0x06
			if(SubBytesLeft==0)
    1df8:	80 91 7d 20 	lds	r24, 0x207D
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	37 c1       	rjmp	.+622    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=SN;
    1e00:	85 e0       	ldi	r24, 0x05	; 5
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	80 93 17 20 	sts	0x2017, r24
    1e08:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=4;
    1e0c:	20 93 7d 20 	sts	0x207D, r18
    1e10:	2e c1       	rjmp	.+604    	; 0x206e <Packet_Decode_FSM+0x356>
			}
		}
		break;
		case SN:
		{
			uint8_t Index=4-SubBytesLeft;
    1e12:	30 91 7d 20 	lds	r19, 0x207D
			SubBytesLeft--;
    1e16:	90 91 7d 20 	lds	r25, 0x207D
    1e1a:	91 50       	subi	r25, 0x01	; 1
    1e1c:	90 93 7d 20 	sts	0x207D, r25
			}
		}
		break;
		case SN:
		{
			uint8_t Index=4-SubBytesLeft;
    1e20:	24 e0       	ldi	r18, 0x04	; 4
    1e22:	e2 2f       	mov	r30, r18
    1e24:	e3 1b       	sub	r30, r19
			SubBytesLeft--;
			NetConf.sn[Index]=Data;
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	e7 5e       	subi	r30, 0xE7	; 231
    1e2a:	ff 4d       	sbci	r31, 0xDF	; 223
    1e2c:	82 87       	std	Z+10, r24	; 0x0a
			if(SubBytesLeft==0)
    1e2e:	80 91 7d 20 	lds	r24, 0x207D
    1e32:	81 11       	cpse	r24, r1
    1e34:	1c c1       	rjmp	.+568    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=GW;
    1e36:	86 e0       	ldi	r24, 0x06	; 6
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	80 93 17 20 	sts	0x2017, r24
    1e3e:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=4;
    1e42:	20 93 7d 20 	sts	0x207D, r18
    1e46:	13 c1       	rjmp	.+550    	; 0x206e <Packet_Decode_FSM+0x356>
			}
		}
		break;
		case GW:
		{
			uint8_t Index=4-SubBytesLeft;
    1e48:	30 91 7d 20 	lds	r19, 0x207D
			SubBytesLeft--;
    1e4c:	90 91 7d 20 	lds	r25, 0x207D
    1e50:	91 50       	subi	r25, 0x01	; 1
    1e52:	90 93 7d 20 	sts	0x207D, r25
			}
		}
		break;
		case GW:
		{
			uint8_t Index=4-SubBytesLeft;
    1e56:	24 e0       	ldi	r18, 0x04	; 4
    1e58:	e2 2f       	mov	r30, r18
    1e5a:	e3 1b       	sub	r30, r19
			SubBytesLeft--;
			NetConf.gw[Index]=Data;
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	e7 5e       	subi	r30, 0xE7	; 231
    1e60:	ff 4d       	sbci	r31, 0xDF	; 223
    1e62:	86 87       	std	Z+14, r24	; 0x0e
			if(SubBytesLeft==0)
    1e64:	80 91 7d 20 	lds	r24, 0x207D
    1e68:	81 11       	cpse	r24, r1
    1e6a:	01 c1       	rjmp	.+514    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=DNS;
    1e6c:	87 e0       	ldi	r24, 0x07	; 7
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	80 93 17 20 	sts	0x2017, r24
    1e74:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=4;
    1e78:	20 93 7d 20 	sts	0x207D, r18
    1e7c:	f8 c0       	rjmp	.+496    	; 0x206e <Packet_Decode_FSM+0x356>
			}
		}
		break;
		case DNS:
		{
			uint8_t Index=4-SubBytesLeft;
    1e7e:	30 91 7d 20 	lds	r19, 0x207D
			SubBytesLeft--;
    1e82:	90 91 7d 20 	lds	r25, 0x207D
    1e86:	91 50       	subi	r25, 0x01	; 1
    1e88:	90 93 7d 20 	sts	0x207D, r25
			}
		}
		break;
		case DNS:
		{
			uint8_t Index=4-SubBytesLeft;
    1e8c:	24 e0       	ldi	r18, 0x04	; 4
    1e8e:	e2 2f       	mov	r30, r18
    1e90:	e3 1b       	sub	r30, r19
			SubBytesLeft--;
			NetConf.dns[Index]=Data;
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	e7 5e       	subi	r30, 0xE7	; 231
    1e96:	ff 4d       	sbci	r31, 0xDF	; 223
    1e98:	82 8b       	std	Z+18, r24	; 0x12
			if(SubBytesLeft==0)
    1e9a:	80 91 7d 20 	lds	r24, 0x207D
    1e9e:	81 11       	cpse	r24, r1
    1ea0:	e6 c0       	rjmp	.+460    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=DHCP;
    1ea2:	88 e0       	ldi	r24, 0x08	; 8
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	80 93 17 20 	sts	0x2017, r24
    1eaa:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=4;
    1eae:	20 93 7d 20 	sts	0x207D, r18
    1eb2:	dd c0       	rjmp	.+442    	; 0x206e <Packet_Decode_FSM+0x356>
			}
		}
		break;
		case DHCP:
		{
			NetConf.dhcp=Data;
    1eb4:	80 93 2f 20 	sts	0x202F, r24
    1eb8:	10 92 30 20 	sts	0x2030, r1
			FSM_State=TAG;
    1ebc:	89 e0       	ldi	r24, 0x09	; 9
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	80 93 17 20 	sts	0x2017, r24
    1ec4:	90 93 18 20 	sts	0x2018, r25
			SubBytesLeft=64;
    1ec8:	80 e4       	ldi	r24, 0x40	; 64
    1eca:	80 93 7d 20 	sts	0x207D, r24
		}
		break;
    1ece:	cf c0       	rjmp	.+414    	; 0x206e <Packet_Decode_FSM+0x356>
		case TAG:
		{
			uint8_t Index=64-SubBytesLeft;
    1ed0:	20 91 7d 20 	lds	r18, 0x207D
			SubBytesLeft--;
    1ed4:	90 91 7d 20 	lds	r25, 0x207D
    1ed8:	91 50       	subi	r25, 0x01	; 1
    1eda:	90 93 7d 20 	sts	0x207D, r25
			SubBytesLeft=64;
		}
		break;
		case TAG:
		{
			uint8_t Index=64-SubBytesLeft;
    1ede:	e0 e4       	ldi	r30, 0x40	; 64
    1ee0:	e2 1b       	sub	r30, r18
			SubBytesLeft--;
			NetTAG[Index]=Data;
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	e9 57       	subi	r30, 0x79	; 121
    1ee6:	ff 4d       	sbci	r31, 0xDF	; 223
    1ee8:	80 83       	st	Z, r24
			if(SubBytesLeft==0)
    1eea:	80 91 7d 20 	lds	r24, 0x207D
    1eee:	81 11       	cpse	r24, r1
    1ef0:	be c0       	rjmp	.+380    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=INFO;
    1ef2:	8a e0       	ldi	r24, 0x0A	; 10
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	80 93 17 20 	sts	0x2017, r24
    1efa:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=32;
    1efe:	80 e2       	ldi	r24, 0x20	; 32
    1f00:	80 93 7d 20 	sts	0x207D, r24
    1f04:	b4 c0       	rjmp	.+360    	; 0x206e <Packet_Decode_FSM+0x356>
			}
		}
		break;
		case INFO:
		{
			uint8_t Index=32-SubBytesLeft;
    1f06:	20 91 7d 20 	lds	r18, 0x207D
			SubBytesLeft--;
    1f0a:	90 91 7d 20 	lds	r25, 0x207D
    1f0e:	91 50       	subi	r25, 0x01	; 1
    1f10:	90 93 7d 20 	sts	0x207D, r25
			}
		}
		break;
		case INFO:
		{
			uint8_t Index=32-SubBytesLeft;
    1f14:	e0 e2       	ldi	r30, 0x20	; 32
    1f16:	e2 1b       	sub	r30, r18
			SubBytesLeft--;
			Info[Index]=Data;
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	ee 52       	subi	r30, 0x2E	; 46
    1f1c:	ff 4d       	sbci	r31, 0xDF	; 223
    1f1e:	80 83       	st	Z, r24
			if(SubBytesLeft==0)
    1f20:	80 91 7d 20 	lds	r24, 0x207D
    1f24:	81 11       	cpse	r24, r1
    1f26:	a3 c0       	rjmp	.+326    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=CHIPID;
    1f28:	8b e0       	ldi	r24, 0x0B	; 11
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	80 93 17 20 	sts	0x2017, r24
    1f30:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=11;
    1f34:	8b e0       	ldi	r24, 0x0B	; 11
    1f36:	80 93 7d 20 	sts	0x207D, r24
    1f3a:	99 c0       	rjmp	.+306    	; 0x206e <Packet_Decode_FSM+0x356>
		}
		break;
		
		case CHIPID:
		{
			uint8_t Index=11-SubBytesLeft;
    1f3c:	20 91 7d 20 	lds	r18, 0x207D
			SubBytesLeft--;
    1f40:	90 91 7d 20 	lds	r25, 0x207D
    1f44:	91 50       	subi	r25, 0x01	; 1
    1f46:	90 93 7d 20 	sts	0x207D, r25
		}
		break;
		
		case CHIPID:
		{
			uint8_t Index=11-SubBytesLeft;
    1f4a:	eb e0       	ldi	r30, 0x0B	; 11
    1f4c:	e2 1b       	sub	r30, r18
			SubBytesLeft--;
			CHIPID_Target[Index]=Data;
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	e9 53       	subi	r30, 0x39	; 57
    1f52:	ff 4d       	sbci	r31, 0xDF	; 223
    1f54:	80 83       	st	Z, r24
			if(SubBytesLeft==0)
    1f56:	80 91 7d 20 	lds	r24, 0x207D
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	88 c0       	rjmp	.+272    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=CRC_CHK;
    1f5e:	8c e0       	ldi	r24, 0x0C	; 12
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	80 93 17 20 	sts	0x2017, r24
    1f66:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=2;
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	80 93 7d 20 	sts	0x207D, r24
    1f70:	7e c0       	rjmp	.+252    	; 0x206e <Packet_Decode_FSM+0x356>
			
		}
		break;
		case CRC_CHK:
		{
			uint8_t Index=2-SubBytesLeft;
    1f72:	20 91 7d 20 	lds	r18, 0x207D
			SubBytesLeft--;
    1f76:	90 91 7d 20 	lds	r25, 0x207D
    1f7a:	91 50       	subi	r25, 0x01	; 1
    1f7c:	90 93 7d 20 	sts	0x207D, r25
			
		}
		break;
		case CRC_CHK:
		{
			uint8_t Index=2-SubBytesLeft;
    1f80:	e2 e0       	ldi	r30, 0x02	; 2
    1f82:	e2 1b       	sub	r30, r18
			SubBytesLeft--;
			CRC16[Index]=Data;
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	e2 58       	subi	r30, 0x82	; 130
    1f88:	ff 4d       	sbci	r31, 0xDF	; 223
    1f8a:	80 83       	st	Z, r24
			if(SubBytesLeft==0)
    1f8c:	80 91 7d 20 	lds	r24, 0x207D
    1f90:	81 11       	cpse	r24, r1
    1f92:	6d c0       	rjmp	.+218    	; 0x206e <Packet_Decode_FSM+0x356>
			{
				//Alle Daten zusammen
				FSM_State=E0;
    1f94:	8d e0       	ldi	r24, 0x0D	; 13
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	80 93 17 20 	sts	0x2017, r24
    1f9c:	90 93 18 20 	sts	0x2018, r25
				SubBytesLeft=0;
    1fa0:	10 92 7d 20 	sts	0x207D, r1
    1fa4:	64 c0       	rjmp	.+200    	; 0x206e <Packet_Decode_FSM+0x356>
			}
		}
		break;
		case E0:
		{
			if(Data==0x00)
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	5c c0       	rjmp	.+184    	; 0x2062 <Packet_Decode_FSM+0x34a>
			{
				FSM_State=E1;
    1faa:	8e e0       	ldi	r24, 0x0E	; 14
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	80 93 17 20 	sts	0x2017, r24
    1fb2:	90 93 18 20 	sts	0x2018, r25
    1fb6:	5b c0       	rjmp	.+182    	; 0x206e <Packet_Decode_FSM+0x356>
		}
		break;
		
		case E1:
		{
			if(Data==0xFF)
    1fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <Packet_Decode_FSM+0x2a6>
    1fbc:	52 c0       	rjmp	.+164    	; 0x2062 <Packet_Decode_FSM+0x34a>
			{
				FSM_State=Ende;
    1fbe:	8f e0       	ldi	r24, 0x0F	; 15
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	80 93 17 20 	sts	0x2017, r24
    1fc6:	90 93 18 20 	sts	0x2018, r25
    1fca:	51 c0       	rjmp	.+162    	; 0x206e <Packet_Decode_FSM+0x356>
		}
		break;
		
		case Ende:
		{
			if(Data==0x55)
    1fcc:	85 35       	cpi	r24, 0x55	; 85
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <Packet_Decode_FSM+0x2ba>
    1fd0:	48 c0       	rjmp	.+144    	; 0x2062 <Packet_Decode_FSM+0x34a>
			{
				FSM_State=Idle;
    1fd2:	80 e1       	ldi	r24, 0x10	; 16
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	80 93 17 20 	sts	0x2017, r24
    1fda:	90 93 18 20 	sts	0x2018, r25
				//CRC Check eigendlich hier
				//Noch nicht eingebaut, da Prototype
				if(Command_Byte==0x00)
    1fde:	80 91 16 20 	lds	r24, 0x2016
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <Packet_Decode_FSM+0x2d0>
				{
					//Netzwerkkonfig senden
					//Easy Packet COnstruction with the Buffer als less thean 250byte are
					TransmittData();
    1fe6:	ef dd       	rcall	.-1058   	; 0x1bc6 <TransmittData>
					
					
				}
				
				
				if(Command_Byte==0x01)
    1fe8:	80 91 16 20 	lds	r24, 0x2016
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	d1 f4       	brne	.+52     	; 0x2024 <Packet_Decode_FSM+0x30c>
				{
					//Also einmal die Daten schreiben lassen wenn die MAC passt
					uint8_t mac_match=1;
					for(uint8_t i=0;i<6;i++)
					{
						if(NetworkConfig.mac[0]!=NetConf.mac[0])
    1ff0:	90 91 31 20 	lds	r25, 0x2031
    1ff4:	20 91 19 20 	lds	r18, 0x2019
    1ff8:	86 e0       	ldi	r24, 0x06	; 6
    1ffa:	c1 e0       	ldi	r28, 0x01	; 1
    1ffc:	92 13       	cpse	r25, r18
						{
							mac_match=0;
    1ffe:	c0 e0       	ldi	r28, 0x00	; 0
    2000:	81 50       	subi	r24, 0x01	; 1
				
				if(Command_Byte==0x01)
				{
					//Also einmal die Daten schreiben lassen wenn die MAC passt
					uint8_t mac_match=1;
					for(uint8_t i=0;i<6;i++)
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <Packet_Decode_FSM+0x2e4>
						if(NetworkConfig.mac[0]!=NetConf.mac[0])
						{
							mac_match=0;
						}
					}
					ConfigFlag = nvm_eeprom_read_byte(0);
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a2 db       	rcall	.-2236   	; 0x174e <nvm_eeprom_read_byte>
    200a:	80 93 7c 20 	sts	0x207C, r24
					if(ConfigFlag==165)
    200e:	80 91 7c 20 	lds	r24, 0x207C
    2012:	85 3a       	cpi	r24, 0xA5	; 165
    2014:	39 f4       	brne	.+14     	; 0x2024 <Packet_Decode_FSM+0x30c>
					{
						if(mac_match==1) //Put Data into Chip....
    2016:	c1 30       	cpi	r28, 0x01	; 1
    2018:	29 f4       	brne	.+10     	; 0x2024 <Packet_Decode_FSM+0x30c>
						{
							write_NetConfig(&NetConf,0);
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	89 e1       	ldi	r24, 0x19	; 25
    201e:	90 e2       	ldi	r25, 0x20	; 32
    2020:	17 dc       	rcall	.-2002   	; 0x1850 <write_NetConfig>
							SW_Reset();
    2022:	10 dc       	rcall	.-2016   	; 0x1844 <SW_Reset>
						}
					}
				}
				
				if(Command_Byte==0x02)
    2024:	80 91 16 20 	lds	r24, 0x2016
    2028:	82 30       	cpi	r24, 0x02	; 2
    202a:	a1 f4       	brne	.+40     	; 0x2054 <Packet_Decode_FSM+0x33c>
    202c:	e7 ec       	ldi	r30, 0xC7	; 199
    202e:	f0 e2       	ldi	r31, 0x20	; 32
    2030:	a6 eb       	ldi	r26, 0xB6	; 182
    2032:	b1 e2       	ldi	r27, 0x21	; 33
volatile States_t FSM_State = Idle;
volatile uint8_t CRC16[2]={0,0};
volatile uint8_t SubBytesLeft=0;
volatile uint8_t Command_Byte=255;
volatile uint8_t ConfigFlag=0;
void Packet_Decode_FSM(uint8_t Data)
    2034:	81 e0       	ldi	r24, 0x01	; 1
				{
					//Also einmal die Daten schreiben lassen wenn die MAC passt
					uint8_t chipid_match=1;
					for(uint8_t i=0;i<11;i++)
					{
						if(CHIPID_Target[i]!=DeviceID[i])
    2036:	21 91       	ld	r18, Z+
    2038:	9d 91       	ld	r25, X+
    203a:	29 13       	cpse	r18, r25
						{
							chipid_match=0;
    203c:	80 e0       	ldi	r24, 0x00	; 0
				
				if(Command_Byte==0x02)
				{
					//Also einmal die Daten schreiben lassen wenn die MAC passt
					uint8_t chipid_match=1;
					for(uint8_t i=0;i<11;i++)
    203e:	90 e2       	ldi	r25, 0x20	; 32
    2040:	e2 3d       	cpi	r30, 0xD2	; 210
    2042:	f9 07       	cpc	r31, r25
    2044:	c1 f7       	brne	.-16     	; 0x2036 <Packet_Decode_FSM+0x31e>
						if(CHIPID_Target[i]!=DeviceID[i])
						{
							chipid_match=0;
						}
					}
					if(chipid_match==1) //Put Data into Chip....
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	29 f4       	brne	.+10     	; 0x2054 <Packet_Decode_FSM+0x33c>
					{
						write_NetConfig(&NetConf,1);
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	89 e1       	ldi	r24, 0x19	; 25
    204e:	90 e2       	ldi	r25, 0x20	; 32
    2050:	ff db       	rcall	.-2050   	; 0x1850 <write_NetConfig>
						SW_Reset();
    2052:	f8 db       	rcall	.-2064   	; 0x1844 <SW_Reset>
					}
				}
			
				if(Command_Byte==0x03)
    2054:	80 91 16 20 	lds	r24, 0x2016
    2058:	83 30       	cpi	r24, 0x03	; 3
    205a:	49 f4       	brne	.+18     	; 0x206e <Packet_Decode_FSM+0x356>
				{
					kill_NetConfig();
    205c:	ea db       	rcall	.-2092   	; 0x1832 <kill_NetConfig>




	
}
    205e:	cf 91       	pop	r28
				}
			
				if(Command_Byte==0x03)
				{
					kill_NetConfig();
					SW_Reset();
    2060:	f1 cb       	rjmp	.-2078   	; 0x1844 <SW_Reset>
				
				
			}
			else
			{
				FSM_State=Idle;
    2062:	80 e1       	ldi	r24, 0x10	; 16
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	80 93 17 20 	sts	0x2017, r24
    206a:	90 93 18 20 	sts	0x2018, r25




	
}
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <Decode_Data>:

void Decode_Data(uint8_t* Data, uint16_t size)
{
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	ec 01       	movw	r28, r24
    207c:	8b 01       	movw	r16, r22


	
}

void Decode_Data(uint8_t* Data, uint16_t size)
    207e:	08 0f       	add	r16, r24
    2080:	19 1f       	adc	r17, r25
{
	//Lets decode what we got	
	for(int i=0;i<size;i++)
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <Decode_Data+0x16>
	{
		Packet_Decode_FSM(*Data++);
    2084:	89 91       	ld	r24, Y+
    2086:	48 de       	rcall	.-880    	; 0x1d18 <Packet_Decode_FSM>
}

void Decode_Data(uint8_t* Data, uint16_t size)
{
	//Lets decode what we got	
	for(int i=0;i<size;i++)
    2088:	c0 17       	cp	r28, r16
    208a:	d1 07       	cpc	r29, r17
    208c:	d9 f7       	brne	.-10     	; 0x2084 <Decode_Data+0x12>
	{
		Packet_Decode_FSM(*Data++);
	}
}
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	08 95       	ret

00002098 <udp_recive>:
	
	return 1;
}

int32_t udp_recive(uint8_t sn, uint8_t* buf, uint16_t port)
{
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	28 97       	sbiw	r28, 0x08	; 8
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	f8 2e       	mov	r15, r24
	uint8_t  destip[4];
	uint16_t destport;

	//uint8_t  packinfo = 0;
	
	switch(getSn_SR(sn))
    20ae:	80 e2       	ldi	r24, 0x20	; 32
    20b0:	f8 9e       	mul	r15, r24
    20b2:	b0 01       	movw	r22, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	68 5f       	subi	r22, 0xF8	; 248
    20b8:	7c 4f       	sbci	r23, 0xFC	; 252
    20ba:	88 27       	eor	r24, r24
    20bc:	77 fd       	sbrc	r23, 7
    20be:	80 95       	com	r24
    20c0:	98 2f       	mov	r25, r24
    20c2:	4f 83       	std	Y+7, r20	; 0x07
    20c4:	58 87       	std	Y+8, r21	; 0x08
    20c6:	0e 94 c7 04 	call	0x98e	; 0x98e <WIZCHIP_READ>
    20ca:	4f 81       	ldd	r20, Y+7	; 0x07
    20cc:	58 85       	ldd	r21, Y+8	; 0x08
    20ce:	88 23       	and	r24, r24
    20d0:	51 f1       	breq	.+84     	; 0x2126 <udp_recive+0x8e>
    20d2:	82 32       	cpi	r24, 0x22	; 34
    20d4:	e1 f5       	brne	.+120    	; 0x214e <udp_recive+0xb6>
	{
		case SOCK_UDP :
		
	
			if((size = getSn_RX_RSR(sn)) > 0)
    20d6:	8f 2d       	mov	r24, r15
    20d8:	0e 94 4a 06 	call	0xc94	; 0xc94 <getSn_RX_RSR>
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	09 f4       	brne	.+2      	; 0x20e2 <udp_recive+0x4a>
    20e0:	36 c0       	rjmp	.+108    	; 0x214e <udp_recive+0xb6>
			{
				
				//Check if Data is lager than expected
				if(size > UDP_BUF_SIZE) size = UDP_BUF_SIZE;
				ret = recvfrom(sn,UDP_BUF,size,destip,(uint16_t*)&destport); //Returned UDP Sizse is 8 bytes to long!
    20e2:	ac 01       	movw	r20, r24
    20e4:	85 3c       	cpi	r24, 0xC5	; 197
    20e6:	91 05       	cpc	r25, r1
    20e8:	10 f0       	brcs	.+4      	; 0x20ee <udp_recive+0x56>
    20ea:	44 ec       	ldi	r20, 0xC4	; 196
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	8e 01       	movw	r16, r28
    20f0:	0b 5f       	subi	r16, 0xFB	; 251
    20f2:	1f 4f       	sbci	r17, 0xFF	; 255
    20f4:	9e 01       	movw	r18, r28
    20f6:	2f 5f       	subi	r18, 0xFF	; 255
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	62 ef       	ldi	r22, 0xF2	; 242
    20fc:	70 e2       	ldi	r23, 0x20	; 32
    20fe:	8f 2d       	mov	r24, r15
    2100:	0e 94 63 03 	call	0x6c6	; 0x6c6 <recvfrom>
    2104:	8b 01       	movw	r16, r22
    2106:	9c 01       	movw	r18, r24
				if(ret <= 0) return ret;
    2108:	16 16       	cp	r1, r22
    210a:	17 06       	cpc	r1, r23
    210c:	18 06       	cpc	r1, r24
    210e:	19 06       	cpc	r1, r25
    2110:	14 f5       	brge	.+68     	; 0x2156 <udp_recive+0xbe>
				if(sn==SOCK_UDP0)
    2112:	f1 10       	cpse	r15, r1
    2114:	1c c0       	rjmp	.+56     	; 0x214e <udp_recive+0xb6>
				{
					Decode_Data(UDP_BUF,ret);
    2116:	82 ef       	ldi	r24, 0xF2	; 242
    2118:	90 e2       	ldi	r25, 0x20	; 32
    211a:	ab df       	rcall	.-170    	; 0x2072 <Decode_Data>
		break;
		default :
		break;
	}
	
	return 1;
    211c:	01 e0       	ldi	r16, 0x01	; 1
    211e:	10 e0       	ldi	r17, 0x00	; 0
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	18 c0       	rjmp	.+48     	; 0x2156 <udp_recive+0xbe>
	
		break;
		case SOCK_CLOSED:
		

		if((ret=socket(sn,Sn_MR_UDP,port,0x00)) != sn)
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	62 e0       	ldi	r22, 0x02	; 2
    212a:	8f 2d       	mov	r24, r15
    212c:	0e 94 8c 01 	call	0x318	; 0x318 <socket>
    2130:	08 2f       	mov	r16, r24
    2132:	11 27       	eor	r17, r17
    2134:	07 fd       	sbrc	r16, 7
    2136:	10 95       	com	r17
    2138:	21 2f       	mov	r18, r17
    213a:	31 2f       	mov	r19, r17
    213c:	8f 2d       	mov	r24, r15
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	08 17       	cp	r16, r24
    2146:	19 07       	cpc	r17, r25
    2148:	2a 07       	cpc	r18, r26
    214a:	3b 07       	cpc	r19, r27
    214c:	21 f4       	brne	.+8      	; 0x2156 <udp_recive+0xbe>
		break;
		default :
		break;
	}
	
	return 1;
    214e:	01 e0       	ldi	r16, 0x01	; 1
    2150:	10 e0       	ldi	r17, 0x00	; 0
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
}
    2156:	b8 01       	movw	r22, r16
    2158:	c9 01       	movw	r24, r18
    215a:	28 96       	adiw	r28, 0x08	; 8
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	08 95       	ret

0000216c <main>:



int main (void)
{
	board_init();
    216c:	71 d0       	rcall	.+226    	; 0x2250 <board_init>
	ioport_init();
	sysclk_init();
    216e:	bc da       	rcall	.-2696   	; 0x16e8 <sysclk_init>
	cli();
    2170:	f8 94       	cli
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2172:	10 92 81 20 	sts	0x2081, r1
    2176:	10 92 82 20 	sts	0x2082, r1
    217a:	10 92 83 20 	sts	0x2083, r1
    217e:	10 92 84 20 	sts	0x2084, r1
    2182:	10 92 85 20 	sts	0x2085, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2186:	c1 e0       	ldi	r28, 0x01	; 1
    2188:	c0 93 86 20 	sts	0x2086, r28
	sleepmgr_init();
	//kill_NetConfig();
	//Collecting Device_ID
	
	DeviceID[0]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(LOTNUM0));
    218c:	88 e0       	ldi	r24, 0x08	; 8
    218e:	36 db       	rcall	.-2452   	; 0x17fc <nvm_read_production_signature_row>
    2190:	80 93 b6 21 	sts	0x21B6, r24
	DeviceID[1]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(LOTNUM1));
    2194:	89 e0       	ldi	r24, 0x09	; 9
    2196:	32 db       	rcall	.-2460   	; 0x17fc <nvm_read_production_signature_row>
    2198:	80 93 b7 21 	sts	0x21B7, r24
	DeviceID[2]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(LOTNUM2));
    219c:	8a e0       	ldi	r24, 0x0A	; 10
    219e:	2e db       	rcall	.-2468   	; 0x17fc <nvm_read_production_signature_row>
    21a0:	80 93 b8 21 	sts	0x21B8, r24
	DeviceID[3]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(LOTNUM3));
    21a4:	8b e0       	ldi	r24, 0x0B	; 11
    21a6:	2a db       	rcall	.-2476   	; 0x17fc <nvm_read_production_signature_row>
    21a8:	80 93 b9 21 	sts	0x21B9, r24
	DeviceID[4]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(LOTNUM4));
    21ac:	8c e0       	ldi	r24, 0x0C	; 12
    21ae:	26 db       	rcall	.-2484   	; 0x17fc <nvm_read_production_signature_row>
    21b0:	80 93 ba 21 	sts	0x21BA, r24
	DeviceID[5]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(LOTNUM5));
    21b4:	8d e0       	ldi	r24, 0x0D	; 13
    21b6:	22 db       	rcall	.-2492   	; 0x17fc <nvm_read_production_signature_row>
    21b8:	80 93 bb 21 	sts	0x21BB, r24
	DeviceID[6]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(WAFNUM));
    21bc:	80 e1       	ldi	r24, 0x10	; 16
    21be:	1e db       	rcall	.-2500   	; 0x17fc <nvm_read_production_signature_row>
    21c0:	80 93 bc 21 	sts	0x21BC, r24
	DeviceID[7]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(COORDX0));
    21c4:	82 e1       	ldi	r24, 0x12	; 18
    21c6:	1a db       	rcall	.-2508   	; 0x17fc <nvm_read_production_signature_row>
    21c8:	80 93 bd 21 	sts	0x21BD, r24
	DeviceID[8]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(COORDX1));
    21cc:	83 e1       	ldi	r24, 0x13	; 19
    21ce:	16 db       	rcall	.-2516   	; 0x17fc <nvm_read_production_signature_row>
    21d0:	80 93 be 21 	sts	0x21BE, r24
	DeviceID[9]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(COORDY0));
    21d4:	84 e1       	ldi	r24, 0x14	; 20
    21d6:	12 db       	rcall	.-2524   	; 0x17fc <nvm_read_production_signature_row>
    21d8:	80 93 bf 21 	sts	0x21BF, r24
	DeviceID[10]=nvm_read_production_signature_row(nvm_get_production_signature_row_offset(COORDY1));
    21dc:	85 e1       	ldi	r24, 0x15	; 21
    21de:	0e db       	rcall	.-2532   	; 0x17fc <nvm_read_production_signature_row>
    21e0:	80 93 c0 21 	sts	0x21C0, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    21e4:	88 e0       	ldi	r24, 0x08	; 8
    21e6:	80 93 62 06 	sts	0x0662, r24
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	80 93 62 06 	sts	0x0662, r24
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	80 93 62 06 	sts	0x0662, r24
    21f6:	c0 93 62 06 	sts	0x0662, r28
	
	ioport_set_pin_dir(CF1, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CF2, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CF3, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CF4, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(CF1, IOPORT_MODE_PULLUP);
    21fa:	8b e1       	ldi	r24, 0x1B	; 27
    21fc:	03 db       	rcall	.-2554   	; 0x1804 <ioport_set_pin_mode.constprop.1>
	ioport_set_pin_mode(CF2, IOPORT_MODE_PULLUP);
    21fe:	8a e1       	ldi	r24, 0x1A	; 26
    2200:	01 db       	rcall	.-2558   	; 0x1804 <ioport_set_pin_mode.constprop.1>
	ioport_set_pin_mode(CF3, IOPORT_MODE_PULLUP);
    2202:	89 e1       	ldi	r24, 0x19	; 25
    2204:	ff da       	rcall	.-2562   	; 0x1804 <ioport_set_pin_mode.constprop.1>
	ioport_set_pin_mode(CF4, IOPORT_MODE_PULLUP);
    2206:	88 e1       	ldi	r24, 0x18	; 24
    2208:	fd da       	rcall	.-2566   	; 0x1804 <ioport_set_pin_mode.constprop.1>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    220a:	c0 e2       	ldi	r28, 0x20	; 32
    220c:	c0 93 01 06 	sts	0x0601, r28
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2210:	c0 93 05 06 	sts	0x0605, r28
	if(ioport_get_pin_level(CF1) && ioport_get_pin_level(CF2) && ioport_get_pin_level(CF3) && ioport_get_pin_level(CF4)) 
	{
		schlafen();
	}
     */
	delay_ms(100);	
    2214:	65 e5       	ldi	r22, 0x55	; 85
    2216:	73 e2       	ldi	r23, 0x23	; 35
    2218:	88 e0       	ldi	r24, 0x08	; 8
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	e9 da       	rcall	.-2606   	; 0x17f0 <__portable_avr_delay_cycles>

 	if(read_NetConfig(&NetworkConfig)!=0)
    221e:	81 e3       	ldi	r24, 0x31	; 49
    2220:	90 e2       	ldi	r25, 0x20	; 32
    2222:	a7 db       	rcall	.-2226   	; 0x1972 <read_NetConfig>
    2224:	88 23       	and	r24, r24
    2226:	19 f0       	breq	.+6      	; 0x222e <main+0xc2>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2228:	c0 93 06 06 	sts	0x0606, r28
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <main+0xc6>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    222e:	c0 93 05 06 	sts	0x0605, r28
	{
		//OKAY
		ioport_set_pin_high(LED);
		
	}
	w55500_init(&NetworkConfig);
    2232:	81 e3       	ldi	r24, 0x31	; 49
    2234:	90 e2       	ldi	r25, 0x20	; 32
    2236:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <w55500_init>
	udp_open_socket(SOCK_UDP0,UDP_PORT);
    223a:	69 e0       	ldi	r22, 0x09	; 9
    223c:	73 e0       	ldi	r23, 0x03	; 3
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	24 dc       	rcall	.-1976   	; 0x1a8a <udp_open_socket>
	while(1)
	{
		
		udp_recive(SOCK_UDP0,UDP_BUF,UDP_PORT);
    2242:	49 e0       	ldi	r20, 0x09	; 9
    2244:	53 e0       	ldi	r21, 0x03	; 3
    2246:	62 ef       	ldi	r22, 0xF2	; 242
    2248:	70 e2       	ldi	r23, 0x20	; 32
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	25 df       	rcall	.-438    	; 0x2098 <udp_recive>
    224e:	f9 cf       	rjmp	.-14     	; 0x2242 <main+0xd6>

00002250 <board_init>:

void board_init(void)
{
	// LED ein:
	 
	PORTA.OUTCLR = PIN5_bm;
    2250:	e0 e0       	ldi	r30, 0x00	; 0
    2252:	f6 e0       	ldi	r31, 0x06	; 6
    2254:	80 e2       	ldi	r24, 0x20	; 32
    2256:	86 83       	std	Z+6, r24	; 0x06
	PORTA.DIRSET = PIN5_bm;
    2258:	81 83       	std	Z+1, r24	; 0x01
	
	// Pullups der Config-Jumper ein:
	PORTD.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);
    225a:	8f e0       	ldi	r24, 0x0F	; 15
    225c:	e0 e6       	ldi	r30, 0x60	; 96
    225e:	f6 e0       	ldi	r31, 0x06	; 6
    2260:	85 83       	std	Z+5, r24	; 0x05
    2262:	08 95       	ret

00002264 <__tablejump2__>:
    2264:	ee 0f       	add	r30, r30
    2266:	ff 1f       	adc	r31, r31

00002268 <__tablejump__>:
    2268:	05 90       	lpm	r0, Z+
    226a:	f4 91       	lpm	r31, Z
    226c:	e0 2d       	mov	r30, r0
    226e:	09 94       	ijmp

00002270 <_exit>:
    2270:	f8 94       	cli

00002272 <__stop_program>:
    2272:	ff cf       	rjmp	.-2      	; 0x2272 <__stop_program>
